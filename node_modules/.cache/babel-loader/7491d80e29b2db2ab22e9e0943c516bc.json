{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\nconst ConversationBox = styled.div`\n  height: 70vh;\n  overflow-y: auto;\n  border: 1px solid #3c8ce7;\n  padding: 10px;\n  margin-bottom: 20px;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n`;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#2a2a2a'};\n  color: #e0e0e0;\n  padding: 10px;\n  border-radius: 15px;\n  margin-bottom: 10px;\n  max-width: 70%;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n`;\nconst Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-radius: 5px;\n  background-color: #3a3a3a;\n  color: #e0e0e0;\n  margin-top: 10px;\n`;\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\nconst CopyButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n`;\nconst Timer = styled.div`\n  font-size: 2rem;\n  text-align: center;\n  margin: 1rem 0;\n`;\nconst CrazyEightContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst CrazyEightInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\nconst CrazyEightInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  margin-bottom: 0.5rem;\n  border: 1px solid #3c8ce7;\n  border-radius: 5px;\n`;\nconst StoryboardContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst StoryboardInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\nconst StoryboardSection = styled.textarea`\n  width: 100%;\n  height: 150px;\n  margin-top: 1rem;\n  padding: 0.5rem;\n  border-radius: 5px;\n`;\nconst SubmitButton = styled(CopyButton)`\n  margin-top: 1rem;\n  font-size: 1.2rem;\n  padding: 1rem 2rem;\n`;\nconst PrototypeSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst InteractionSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst ToggleSidebarButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  position: absolute;\n  top: 10px;\n  right: 10px;\n`;\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [isTyping, setIsTyping] = useState(false);\n  const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n  const [timerSeconds, setTimerSeconds] = useState(480);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [crazyEightIdeas, setCrazyEightIdeas] = useState(Array(8).fill(''));\n  const [storyboardSections, setStoryboardSections] = useState(['', '', '']);\n  const [prototypeData, setPrototypeData] = useState({\n    coreElements: '',\n    structureFlow: '',\n    interactionsProcesses: ''\n  });\n  const [testingScenario, setTestingScenario] = useState('');\n  const [userInteraction, setUserInteraction] = useState('');\n  const [analysisNotes, setAnalysisNotes] = useState('');\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const conversationEndRef = useRef(null);\n  const scrollToBottom = useCallback(() => {\n    var _conversationEndRef$c;\n    (_conversationEndRef$c = conversationEndRef.current) === null || _conversationEndRef$c === void 0 ? void 0 : _conversationEndRef$c.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, []);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n  const addMessage = useCallback(message => {\n    setMessages(prev => [...prev, message]);\n  }, []);\n  const addSprintData = useCallback((key, value) => {\n    setSprintData(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  }, []);\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n  const moveToNextDay = useCallback(() => {\n    setCurrentDay(prev => {\n      const nextDay = Math.min(prev + 1, 5);\n      setIsReadyForNextDay(false);\n      if (prev === 2) {\n        setCrazyEightIdeas(Array(8).fill(''));\n      } else if (prev === 3) {\n        setStoryboardSections(['', '', '']);\n      }\n      setIsTimerRunning(false);\n      setTimerSeconds(480);\n      return nextDay;\n    });\n  }, []);\n  const checkDayCompletion = useCallback(() => {\n    var _sprintData$, _sprintData$2;\n    let isComplete = false;\n    switch (currentDay) {\n      case 1:\n        isComplete = ((_sprintData$ = sprintData[1]) === null || _sprintData$ === void 0 ? void 0 : _sprintData$[\"Long-term Goal\"]) && ((_sprintData$2 = sprintData[1]) === null || _sprintData$2 === void 0 ? void 0 : _sprintData$2[\"Critical Questions\"]);\n        break;\n      case 2:\n        isComplete = crazyEightIdeas.every(idea => idea.trim() !== '');\n        break;\n      case 3:\n        isComplete = storyboardSections.every(section => section.trim() !== '');\n        break;\n      case 4:\n        isComplete = Object.values(prototypeData).every(value => value.trim() !== '');\n        break;\n      case 5:\n        isComplete = testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '';\n        break;\n      default:\n        isComplete = false;\n    }\n    setIsReadyForNextDay(isComplete);\n  }, [currentDay, sprintData, crazyEightIdeas, storyboardSections, prototypeData, testingScenario, userInteraction, analysisNotes]);\n  useEffect(() => {\n    let interval;\n    if (isTimerRunning && timerSeconds > 0) {\n      interval = setInterval(() => {\n        setTimerSeconds(seconds => seconds - 1);\n      }, 1000);\n    } else if (timerSeconds === 0) {\n      setIsTimerRunning(false);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerRunning, timerSeconds]);\n  const getInitialPrompt = useCallback(() => {\n    if (currentDay === 1) {\n      return `Welcome to our Mini Design Sprint! This compressed version of Jake Knapp and John Zeratsky's methodology will guide you through a rapid innovation process. We'll cover the essentials of a full sprint in just five short sessions.\n  \n  Let's kick off Day 1 by defining your long-term goal. This goal should be ambitious yet achievable, setting the direction for our entire sprint. What specific outcome are you aiming to achieve with this project? Think big and be as clear as possible.`;\n    }\n    return `Welcome to Day ${currentDay} of the Design Sprint. ${sprintGuidance[currentDay].prompt}`;\n  }, [currentDay]);\n  useEffect(() => {\n    const loadInitialPrompt = async () => {\n      setIsTyping(true);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setIsTyping(false);\n      const initialPrompt = getInitialPrompt();\n      setMessages([{\n        isUser: false,\n        text: initialPrompt\n      }]);\n    };\n    loadInitialPrompt();\n  }, [currentDay, getInitialPrompt]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const userMessage = {\n      isUser: true,\n      text: input\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsTyping(true);\n    try {\n      const context = messages.map(m => `${m.isUser ? 'User' : 'Relay'}: ${m.text}`).join('\\n');\n      const prompt = `Day ${currentDay} of Design Sprint. Context: ${context}\\nUser: ${input}\\n${getCurrentPrompt()}`;\n      const response = await getGPTResponse(prompt);\n      const aiMessage = {\n        isUser: false,\n        text: response\n      };\n      setMessages(prev => [...prev, aiMessage]);\n      updateSprintData(input, response);\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        isUser: false,\n        text: \"I'm having trouble right now. Please try again.\"\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  const updateSprintData = (input, response) => {\n    setSprintData(prev => {\n      const updatedData = {\n        ...prev\n      };\n      if (!updatedData[currentDay]) {\n        updatedData[currentDay] = {};\n      }\n      updatedData[currentDay][`Input ${Object.keys(updatedData[currentDay]).length + 1}`] = input;\n      updatedData[currentDay][`Response ${Object.keys(updatedData[currentDay]).length + 1}`] = response;\n      return updatedData;\n    });\n    checkDayCompletion();\n  };\n  const submitCrazyEight = async () => {\n    if (crazyEightIdeas.every(idea => idea.trim() !== '')) {\n      setIsTyping(true);\n      const ideasString = crazyEightIdeas.map((idea, index) => `Idea ${index + 1}: ${idea}`).join('\\n');\n      const prompt = `The user has completed the Crazy 8s exercise with the following ideas:\\n${ideasString}\\nPlease provide a brief analysis and feedback on these ideas, highlighting any particularly promising concepts or areas for further exploration.`;\n      try {\n        const response = await getGPTResponse(prompt);\n        setMessages(prev => [...prev, {\n          isUser: false,\n          text: response\n        }]);\n        setSprintData(prev => ({\n          ...prev,\n          2: {\n            \"Crazy 8s\": crazyEightIdeas,\n            \"Feedback\": response\n          }\n        }));\n        setIsReadyForNextDay(true);\n      } catch (error) {\n        setMessages(prev => [...prev, {\n          isUser: false,\n          text: \"I'm having trouble providing feedback on your Crazy 8 ideas. Please try submitting again.\"\n        }]);\n      } finally {\n        setIsTyping(false);\n      }\n    } else {\n      alert(\"Please complete all 8 ideas before submitting.\");\n    }\n  };\n  const updateCrazyEightIdea = (index, value) => {\n    const newIdeas = [...crazyEightIdeas];\n    newIdeas[index] = value;\n    setCrazyEightIdeas(newIdeas);\n  };\n  const updateStoryboardSection = (index, value) => {\n    const newSections = [...storyboardSections];\n    newSections[index] = value;\n    setStoryboardSections(newSections);\n    checkDayCompletion();\n  };\n  const updatePrototypeData = (key, value) => {\n    setPrototypeData(prev => ({\n      ...prev,\n      [key]: value\n    }));\n    checkDayCompletion();\n  };\n  const startTimer = () => {\n    setIsTimerRunning(true);\n    setTimerSeconds(480);\n  };\n  const conductSimulatedInteraction = async () => {\n    setIsTyping(true);\n    const prompt = `You are a potential user interacting with the following product prototype: ${JSON.stringify(prototypeData)}. Please provide realistic responses and actions based on this testing scenario: ${testingScenario}`;\n    try {\n      const response = await getGPTResponse(prompt);\n      setUserInteraction(response);\n      setMessages(prev => [...prev, {\n        isUser: false,\n        text: response\n      }]);\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        isUser: false,\n        text: \"Error: Unable to conduct simulated interaction.\"\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  return /*#__PURE__*/React.createElement(SprintContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MainContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 17\n    }\n  }, `Day ${currentDay}: ${sprintGuidance[currentDay].goal}`), /*#__PURE__*/React.createElement(ConversationBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 17\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(Message, {\n    key: index,\n    isUser: message.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 25\n    }\n  }, message.isUser ? 'You: ' : 'Relay: ', message.text)), isTyping && /*#__PURE__*/React.createElement(TypingIndicator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 34\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 51\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 64\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 77\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    ref: conversationEndRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: input,\n    onChange: e => setInput(e.target.value),\n    placeholder: \"Type your message here...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 21\n    }\n  })), currentDay === 2 && /*#__PURE__*/React.createElement(CrazyEightContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CrazyEightInstructions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 25\n    }\n  }, \"Crazy 8s is a fast sketching exercise where you'll create 8 distinct ideas in 8 minutes. The goal is to push beyond your first idea and generate a wide range of possibilities. Don't worry about quality or feasibility at this stage - focus on quantity and variety!\"), /*#__PURE__*/React.createElement(CopyButton, {\n    onClick: startTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 25\n    }\n  }, \"Start Crazy 8s Timer\"), /*#__PURE__*/React.createElement(Timer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 25\n    }\n  }, Math.floor(timerSeconds / 60), \":\", (timerSeconds % 60).toString().padStart(2, '0')), crazyEightIdeas.map((idea, index) => /*#__PURE__*/React.createElement(CrazyEightInput, {\n    key: index,\n    value: idea,\n    onChange: e => updateCrazyEightIdea(index, e.target.value),\n    placeholder: `Crazy 8s Idea ${index + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(SubmitButton, {\n    onClick: submitCrazyEight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 25\n    }\n  }, \"Submit Crazy 8s Ideas for Feedback\")), currentDay === 3 && /*#__PURE__*/React.createElement(StoryboardContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(StoryboardInstructions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 25\n    }\n  }, \"Create a three-panel storyboard that outlines your chosen solution. Each panel should represent a key step or moment in your solution: 1. The problem or starting point 2. The main action or change 3. The result or outcome Describe each panel in detail, focusing on what the user sees and does.\"), storyboardSections.map((section, index) => /*#__PURE__*/React.createElement(StoryboardSection, {\n    key: index,\n    value: section,\n    onChange: e => updateStoryboardSection(index, e.target.value),\n    placeholder: `Panel ${index + 1}: ${index === 0 ? \"Describe the problem or starting point\" : index === 1 ? \"Detail the main action or change\" : \"Illustrate the result or outcome\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 29\n    }\n  }))), currentDay === 4 && /*#__PURE__*/React.createElement(PrototypeSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 25\n    }\n  }, \"Design Your Conceptual Prototype\"), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: prototypeData.coreElements,\n    onChange: e => updatePrototypeData('coreElements', e.target.value),\n    placeholder: \"Describe core elements...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: prototypeData.structureFlow,\n    onChange: e => updatePrototypeData('structureFlow', e.target.value),\n    placeholder: \"Outline structure or flow...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: prototypeData.interactionsProcesses,\n    onChange: e => updatePrototypeData('interactionsProcesses', e.target.value),\n    placeholder: \"Detail interactions or processes...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 25\n    }\n  })), currentDay === 5 && /*#__PURE__*/React.createElement(InteractionSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 25\n    }\n  }, \"Simulated User/Stakeholder Testing\"), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: testingScenario,\n    onChange: e => setTestingScenario(e.target.value),\n    placeholder: \"Describe a testing scenario for your prototype...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(CopyButton, {\n    onClick: conductSimulatedInteraction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 25\n    }\n  }, \"Simulate User Interaction\"), userInteraction && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 33\n    }\n  }, \"Simulated User Interaction:\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 33\n    }\n  }, userInteraction)), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: analysisNotes,\n    onChange: e => setAnalysisNotes(e.target.value),\n    placeholder: \"Analyze the simulated feedback and consider potential iterations...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 25\n    }\n  })), isReadyForNextDay && currentDay < 5 && /*#__PURE__*/React.createElement(NextDayButton, {\n    onClick: moveToNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 21\n    }\n  }, \"Move to Day \", currentDay + 1)), isSidebarOpen && /*#__PURE__*/React.createElement(OutputSidebar, {\n    sprintData: sprintData,\n    currentDay: currentDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ToggleSidebarButton, {\n    onClick: () => setIsSidebarOpen(!isSidebarOpen),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 21\n    }\n  }, \"\\u2715\")));\n};\nexport default DaySprint;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","styled","keyframes","getGPTResponse","sprintGuidance","OutputSidebar","SprintContainer","div","MainContent","Header","h1","ConversationBox","Message","props","isUser","Input","input","typing","TypingIndicator","NextDayButton","button","CopyButton","Timer","CrazyEightContainer","CrazyEightInstructions","p","CrazyEightInput","StoryboardContainer","StoryboardInstructions","StoryboardSection","textarea","SubmitButton","PrototypeSection","InteractionSection","ToggleSidebarButton","DaySprint","currentDay","setCurrentDay","messages","setMessages","setInput","sprintData","setSprintData","isTyping","setIsTyping","isReadyForNextDay","setIsReadyForNextDay","timerSeconds","setTimerSeconds","isTimerRunning","setIsTimerRunning","crazyEightIdeas","setCrazyEightIdeas","Array","fill","storyboardSections","setStoryboardSections","prototypeData","setPrototypeData","coreElements","structureFlow","interactionsProcesses","testingScenario","setTestingScenario","userInteraction","setUserInteraction","analysisNotes","setAnalysisNotes","isSidebarOpen","setIsSidebarOpen","conversationEndRef","scrollToBottom","_conversationEndRef$c","current","scrollIntoView","behavior","addMessage","message","prev","addSprintData","key","value","getCurrentPrompt","prompt","getCurrentObjectives","objectives","moveToNextDay","nextDay","Math","min","checkDayCompletion","_sprintData$","_sprintData$2","isComplete","every","idea","trim","section","Object","values","interval","setInterval","seconds","clearInterval","getInitialPrompt","loadInitialPrompt","Promise","resolve","setTimeout","initialPrompt","text","handleSubmit","e","preventDefault","userMessage","context","map","m","join","response","aiMessage","updateSprintData","error","console","updatedData","keys","length","submitCrazyEight","ideasString","index","alert","updateCrazyEightIdea","newIdeas","updateStoryboardSection","newSections","updatePrototypeData","startTimer","conductSimulatedInteraction","JSON","stringify","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","goal","ref","onSubmit","onChange","target","placeholder","onClick","floor","toString","padStart","Fragment"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\n\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\n\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\n\nconst ConversationBox = styled.div`\n  height: 70vh;\n  overflow-y: auto;\n  border: 1px solid #3c8ce7;\n  padding: 10px;\n  margin-bottom: 20px;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#2a2a2a'};\n  color: #e0e0e0;\n  padding: 10px;\n  border-radius: 15px;\n  margin-bottom: 10px;\n  max-width: 70%;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-radius: 5px;\n  background-color: #3a3a3a;\n  color: #e0e0e0;\n  margin-top: 10px;\n`;\n\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\n\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\n\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\n\nconst CopyButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n`;\n\nconst Timer = styled.div`\n  font-size: 2rem;\n  text-align: center;\n  margin: 1rem 0;\n`;\n\nconst CrazyEightContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst CrazyEightInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\n\nconst CrazyEightInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  margin-bottom: 0.5rem;\n  border: 1px solid #3c8ce7;\n  border-radius: 5px;\n`;\n\nconst StoryboardContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst StoryboardInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\n\nconst StoryboardSection = styled.textarea`\n  width: 100%;\n  height: 150px;\n  margin-top: 1rem;\n  padding: 0.5rem;\n  border-radius: 5px;\n`;\n\nconst SubmitButton = styled(CopyButton)`\n  margin-top: 1rem;\n  font-size: 1.2rem;\n  padding: 1rem 2rem;\n`;\n\nconst PrototypeSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst InteractionSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst ToggleSidebarButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  position: absolute;\n  top: 10px;\n  right: 10px;\n`;\n\nconst DaySprint = () => {\n    const [currentDay, setCurrentDay] = useState(1);\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState('');\n    const [sprintData, setSprintData] = useState({});\n    const [isTyping, setIsTyping] = useState(false);\n    const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n    const [timerSeconds, setTimerSeconds] = useState(480);\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\n    const [crazyEightIdeas, setCrazyEightIdeas] = useState(Array(8).fill(''));\n    const [storyboardSections, setStoryboardSections] = useState(['', '', '']);\n    const [prototypeData, setPrototypeData] = useState({ coreElements: '', structureFlow: '', interactionsProcesses: '' });\n    const [testingScenario, setTestingScenario] = useState('');\n    const [userInteraction, setUserInteraction] = useState('');\n    const [analysisNotes, setAnalysisNotes] = useState('');\n    const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n\n    const conversationEndRef = useRef(null);\n\n    const scrollToBottom = useCallback(() => {\n        conversationEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }, []);\n    \n    useEffect(() => {\n        scrollToBottom();\n    }, [messages, scrollToBottom]);\n    \n    const addMessage = useCallback((message) => {\n        setMessages(prev => [...prev, message]);\n    }, []);\n    \n    const addSprintData = useCallback((key, value) => {\n        setSprintData(prev => ({ ...prev, [key]: value }));\n    }, []);\n\n    const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n    const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n\n    const moveToNextDay = useCallback(() => {\n        setCurrentDay(prev => {\n            const nextDay = Math.min(prev + 1, 5);\n            setIsReadyForNextDay(false);\n            if (prev === 2) {\n                setCrazyEightIdeas(Array(8).fill(''));\n            } else if (prev === 3) {\n                setStoryboardSections(['', '', '']);\n            }\n            setIsTimerRunning(false);\n            setTimerSeconds(480);\n            return nextDay;\n        });\n    }, []);\n\n    const checkDayCompletion = useCallback(() => {\n        let isComplete = false;\n\n        switch (currentDay) {\n            case 1:\n                isComplete = sprintData[1]?.[\"Long-term Goal\"] && sprintData[1]?.[\"Critical Questions\"];\n                break;\n            case 2:\n                isComplete = crazyEightIdeas.every(idea => idea.trim() !== '');\n                break;\n            case 3:\n                isComplete = storyboardSections.every(section => section.trim() !== '');\n                break;\n            case 4:\n                isComplete = Object.values(prototypeData).every(value => value.trim() !== '');\n                break;\n            case 5:\n                isComplete = testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '';\n                break;\n            default:\n                isComplete = false;\n        }\n\n        setIsReadyForNextDay(isComplete);\n    }, [currentDay, sprintData, crazyEightIdeas, storyboardSections, prototypeData, testingScenario, userInteraction, analysisNotes]);\n\n    useEffect(() => {\n        let interval;\n        if (isTimerRunning && timerSeconds > 0) {\n            interval = setInterval(() => {\n                setTimerSeconds(seconds => seconds - 1);\n            }, 1000);\n        } else if (timerSeconds === 0) {\n            setIsTimerRunning(false);\n        }\n        return () => clearInterval(interval);\n    }, [isTimerRunning, timerSeconds]);\n\n    const getInitialPrompt = useCallback(() => {\n        if (currentDay === 1) {\n            return `Welcome to our Mini Design Sprint! This compressed version of Jake Knapp and John Zeratsky's methodology will guide you through a rapid innovation process. We'll cover the essentials of a full sprint in just five short sessions.\n  \n  Let's kick off Day 1 by defining your long-term goal. This goal should be ambitious yet achievable, setting the direction for our entire sprint. What specific outcome are you aiming to achieve with this project? Think big and be as clear as possible.`;\n        }\n        return `Welcome to Day ${currentDay} of the Design Sprint. ${sprintGuidance[currentDay].prompt}`;\n    }, [currentDay]);\n\n    useEffect(() => {\n        const loadInitialPrompt = async () => {\n            setIsTyping(true);\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            setIsTyping(false);\n            const initialPrompt = getInitialPrompt();\n            setMessages([{ isUser: false, text: initialPrompt }]);\n        };\n\n        loadInitialPrompt();\n    }, [currentDay, getInitialPrompt]);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (!input.trim()) return;\n\n        const userMessage = { isUser: true, text: input };\n        setMessages(prev => [...prev, userMessage]);\n        setInput('');\n        setIsTyping(true);\n\n        try {\n            const context = messages.map(m => `${m.isUser ? 'User' : 'Relay'}: ${m.text}`).join('\\n');\n            const prompt = `Day ${currentDay} of Design Sprint. Context: ${context}\\nUser: ${input}\\n${getCurrentPrompt()}`;\n            const response = await getGPTResponse(prompt);\n            \n            const aiMessage = { isUser: false, text: response };\n            setMessages(prev => [...prev, aiMessage]);\n            \n            updateSprintData(input, response);\n        } catch (error) {\n            console.error('Error getting AI response:', error);\n            setMessages(prev => [...prev, { isUser: false, text: \"I'm having trouble right now. Please try again.\" }]);\n        } finally {\n            setIsTyping(false);\n        }\n    };\n\n    const updateSprintData = (input, response) => {\n        setSprintData(prev => {\n            const updatedData = { ...prev };\n            if (!updatedData[currentDay]) {\n                updatedData[currentDay] = {};\n            }\n            updatedData[currentDay][`Input ${Object.keys(updatedData[currentDay]).length + 1}`] = input;\n            updatedData[currentDay][`Response ${Object.keys(updatedData[currentDay]).length + 1}`] = response;\n            return updatedData;\n        });\n        checkDayCompletion();\n    };\n\n    const submitCrazyEight = async () => {\n        if (crazyEightIdeas.every(idea => idea.trim() !== '')) {\n            setIsTyping(true);\n            const ideasString = crazyEightIdeas.map((idea, index) => `Idea ${index + 1}: ${idea}`).join('\\n');\n            const prompt = `The user has completed the Crazy 8s exercise with the following ideas:\\n${ideasString}\\nPlease provide a brief analysis and feedback on these ideas, highlighting any particularly promising concepts or areas for further exploration.`;\n            \n            try {\n                const response = await getGPTResponse(prompt);\n                setMessages(prev => [...prev, { isUser: false, text: response }]);\n                setSprintData(prev => ({\n                    ...prev,\n                    2: {\n                        \"Crazy 8s\": crazyEightIdeas,\n                        \"Feedback\": response\n                    }\n                }));\n                setIsReadyForNextDay(true);\n            } catch (error) {\n                setMessages(prev => [...prev, { isUser: false, text: \"I'm having trouble providing feedback on your Crazy 8 ideas. Please try submitting again.\" }]);\n            } finally {\n                setIsTyping(false);\n            }\n        } else {\n            alert(\"Please complete all 8 ideas before submitting.\");\n        }\n    };\n\n    const updateCrazyEightIdea = (index, value) => {\n        const newIdeas = [...crazyEightIdeas];\n        newIdeas[index] = value;\n        setCrazyEightIdeas(newIdeas);\n    };\n\n    const updateStoryboardSection = (index, value) => {\n        const newSections = [...storyboardSections];\n        newSections[index] = value;\n        setStoryboardSections(newSections);\n        checkDayCompletion();\n    };\n\n    const updatePrototypeData = (key, value) => {\n        setPrototypeData(prev => ({ ...prev, [key]: value }));\n        checkDayCompletion();\n    };\n\n    const startTimer = () => {\n        setIsTimerRunning(true);\n        setTimerSeconds(480);\n    };\n\n    const conductSimulatedInteraction = async () => {\n        setIsTyping(true);\n        const prompt = `You are a potential user interacting with the following product prototype: ${JSON.stringify(prototypeData)}. Please provide realistic responses and actions based on this testing scenario: ${testingScenario}`;\n        try {\n            const response = await getGPTResponse(prompt);\n            setUserInteraction(response);\n            setMessages(prev => [...prev, { isUser: false, text: response }]);\n        } catch (error) {\n            setMessages(prev => [...prev, { isUser: false, text: \"Error: Unable to conduct simulated interaction.\" }]);\n        } finally {\n            setIsTyping(false);\n        }\n    };\n\n    return (\n        <SprintContainer>\n            <MainContent>\n                <Header>{`Day ${currentDay}: ${sprintGuidance[currentDay].goal}`}</Header>\n                <ConversationBox>\n                    {messages.map((message, index) => (\n                        <Message key={index} isUser={message.isUser}>\n                            {message.isUser ? 'You: ' : 'Relay: '}{message.text}\n                        </Message>\n                    ))}\n                    {isTyping && <TypingIndicator><span></span><span></span><span></span></TypingIndicator>}\n                    <div ref={conversationEndRef} />\n                </ConversationBox>\n                <form onSubmit={handleSubmit}>\n                    <Input\n                        value={input}\n                        onChange={(e) => setInput(e.target.value)}\n                        placeholder=\"Type your message here...\"\n                    />\n                </form>\n                {currentDay === 2 && (\n                    <CrazyEightContainer>\n                        <CrazyEightInstructions>\n                            Crazy 8s is a fast sketching exercise where you'll create 8 distinct ideas in 8 minutes. \n                            The goal is to push beyond your first idea and generate a wide range of possibilities. \n                            Don't worry about quality or feasibility at this stage - focus on quantity and variety!\n                        </CrazyEightInstructions>\n                        <CopyButton onClick={startTimer}>Start Crazy 8s Timer</CopyButton>\n                        <Timer>{Math.floor(timerSeconds / 60)}:{(timerSeconds % 60).toString().padStart(2, '0')}</Timer>\n                        {crazyEightIdeas.map((idea, index) => (\n                            <CrazyEightInput\n                                key={index}\n                                value={idea}\n                                onChange={(e) => updateCrazyEightIdea(index, e.target.value)}\n                                placeholder={`Crazy 8s Idea ${index + 1}`}\n                            />\n                        ))}\n                        <SubmitButton onClick={submitCrazyEight}>\n                            Submit Crazy 8s Ideas for Feedback\n                        </SubmitButton>\n                    </CrazyEightContainer>\n                )}\n                {currentDay === 3 && (\n                    <StoryboardContainer>\n                        <StoryboardInstructions>\n                            Create a three-panel storyboard that outlines your chosen solution. Each panel should represent a key step or moment in your solution:\n                            1. The problem or starting point\n                            2. The main action or change\n                            3. The result or outcome\n                            Describe each panel in detail, focusing on what the user sees and does.\n                        </StoryboardInstructions>\n                        {storyboardSections.map((section, index) => (\n                            <StoryboardSection\n                                key={index}\n                                value={section}\n                                onChange={(e) => updateStoryboardSection(index, e.target.value)}\n                                placeholder={`Panel ${index + 1}: ${index === 0 ? \"Describe the problem or starting point\" : index === 1 ? \"Detail the main action or change\" : \"Illustrate the result or outcome\"}`}\n                            />\n                        ))}\n                    </StoryboardContainer>\n                )}\n                {currentDay === 4 && (\n                    <PrototypeSection>\n                        <h3>Design Your Conceptual Prototype</h3>\n                        <StoryboardSection\n                            value={prototypeData.coreElements}\n                            onChange={(e) => updatePrototypeData('coreElements', e.target.value)}\n                            placeholder=\"Describe core elements...\"\n                        />\n                        <StoryboardSection\n                            value={prototypeData.structureFlow}\n                            onChange={(e) => updatePrototypeData('structureFlow', e.target.value)}\n                            placeholder=\"Outline structure or flow...\"\n                        />\n                        <StoryboardSection\n                            value={prototypeData.interactionsProcesses}\n                            onChange={(e) => updatePrototypeData('interactionsProcesses', e.target.value)}\n                            placeholder=\"Detail interactions or processes...\"\n                        />\n                    </PrototypeSection>\n                )}\n                {currentDay === 5 && (\n                    <InteractionSection>\n                        <h3>Simulated User/Stakeholder Testing</h3>\n                        <StoryboardSection\n                            value={testingScenario}\n                            onChange={(e) => setTestingScenario(e.target.value)}\n                            placeholder=\"Describe a testing scenario for your prototype...\"\n                        />\n                        <CopyButton onClick={conductSimulatedInteraction}>Simulate User Interaction</CopyButton>\n                        {userInteraction && (\n                            <>\n                                <h4>Simulated User Interaction:</h4>\n                                <p>{userInteraction}</p>\n                            </>\n                        )}\n                        <StoryboardSection\n                            value={analysisNotes}\n                            onChange={(e) => setAnalysisNotes(e.target.value)}\n                            placeholder=\"Analyze the simulated feedback and consider potential iterations...\"\n                        />\n                    </InteractionSection>\n                )}\n                {isReadyForNextDay && currentDay < 5 && (\n                    <NextDayButton onClick={moveToNextDay}>\n                        Move to Day {currentDay + 1}\n                    </NextDayButton>\n                )}\n            </MainContent>\n            {isSidebarOpen && (\n                <OutputSidebar\n                    sprintData={sprintData}\n                    currentDay={currentDay}\n                >\n                    <ToggleSidebarButton onClick={() => setIsSidebarOpen(!isSidebarOpen)}>\n                        ✕\n                    </ToggleSidebarButton>\n                </OutputSidebar>\n            )}\n        </SprintContainer>\n    );\n};\n\nexport default DaySprint;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}