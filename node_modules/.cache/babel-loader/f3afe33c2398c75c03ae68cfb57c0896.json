{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport InputWithSendIcon from './InputWithSendIcon';\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\nconst AIMessage = styled.div`\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n  padding: 15px;\n  border-radius: 15px;\n  margin-bottom: 20px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  position: relative;\n  max-width: 80%;\n  align-self: flex-start;\n`;\nconst RelayIcon = styled.span`\n  font-weight: bold;\n  color: #3c8ce7;\n  margin-right: 5px;\n`;\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\nconst StickyNotesSection = styled.div`\n  margin-top: 2rem;\n`;\nconst StickyNotesGrid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\nconst StickyNote = styled.div`\n  background-color: #feff9c;\n  padding: 0.75rem;\n  width: 150px;\n  height: 150px;\n  border-radius: 3px;\n  color: #000000;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  text-align: center;\n  position: relative;\n`;\nconst DeleteNote = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  background: none;\n  border: none;\n  color: #ff4136;\n  cursor: pointer;\n  font-size: 1.2rem;\n`;\nconst StickyNoteInput = styled.input`\n  width: 100%;\n  padding: 0.75rem;\n  margin-bottom: 0.75rem;\n  border: none;\n  border-radius: 3px;\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n`;\nconst StickyNotePrompt = styled.p`\n  color: #b0b0b0;\n  font-style: italic;\n  margin-bottom: 10px;\n`;\nconst ConversationLog = styled.div`\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n  max-height: 300px;\n  overflow-y: auto;\n`;\nconst LogEntry = styled.div`\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#1e1e1e'};\n  border-radius: 5px;\n  color: ${props => props.isUser ? '#ffffff' : '#e0e0e0'};\n`;\nconst CopyButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n`;\nconst Timer = styled.div`\n  font-size: 2rem;\n  text-align: center;\n  margin: 1rem 0;\n`;\nconst CrazyEightContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst CrazyEightInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\nconst CrazyEightInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  margin-bottom: 0.5rem;\n  border: 1px solid #3c8ce7;\n  border-radius: 5px;\n`;\nconst StoryboardContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst StoryboardInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\nconst StoryboardSection = styled.textarea`\n  width: 100%;\n  height: 150px;\n  margin-top: 1rem;\n  padding: 0.5rem;\n  border-radius: 5px;\n`;\nconst SubmitButton = styled(CopyButton)`\n  margin-top: 1rem;\n  font-size: 1.2rem;\n  padding: 1rem 2rem;\n`;\nconst PrototypeSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst InteractionSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [input, setInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [stickyNotes, setStickyNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [conversationLog, setConversationLog] = useState([]);\n  const [timerSeconds, setTimerSeconds] = useState(480); // 8 minutes\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [crazyEightIdeas, setCrazyEightIdeas] = useState(Array(8).fill(''));\n  const [storyboardSections, setStoryboardSections] = useState(['', '', '']);\n  const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n  const [prototypeData, setPrototypeData] = useState({\n    features: '',\n    interface: '',\n    interactions: ''\n  });\n  const [testingScenario, setTestingScenario] = useState('');\n  const [userInteraction, setUserInteraction] = useState('');\n  const [analysisNotes, setAnalysisNotes] = useState('');\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n  const handleSubmit = async () => {\n    if (!input.trim()) return;\n    setIsTyping(true);\n    const userInput = input;\n    setInput('');\n    setConversationLog(prev => [...prev, {\n      isUser: true,\n      text: userInput\n    }]);\n    const prompt = `Day ${currentDay} of Design Sprint. User input: \"${userInput}\". ${getCurrentPrompt()} Provide guidance and suggestions to help the user develop their own ideas. Do not provide direct answers or solutions. Encourage the user to think critically and come up with their own responses.`;\n    try {\n      const response = await getGPTResponse(prompt);\n      const cleanedResponse = response.replace('[SHOW_NEXT_DAY_BUTTON]', '').trim();\n      setFeedback(cleanedResponse);\n      setConversationLog(prev => [...prev, {\n        isUser: false,\n        text: cleanedResponse\n      }]);\n      const currentObjectives = getCurrentObjectives();\n      const currentObjective = currentObjectives[Object.keys(sprintData[currentDay] || {}).length];\n      if (currentObjective) {\n        let summary;\n        if (currentDay === 2) {\n          if (currentObjective === \"Crazy 8s\") {\n            summary = crazyEightIdeas.filter(idea => idea.trim() !== '');\n          } else if (currentObjective === \"Solution Sketch\") {\n            summary = storyboardSections.map((section, index) => `Panel ${index + 1}: ${section}`);\n          }\n        } else {\n          const summaryPrompt = `Summarize and refine the following user input for the Design Sprint Day ${currentDay}, objective: ${currentObjective}. User input: \"${userInput}\". Provide a concise, clear summary that captures the essence of the user's input.`;\n          summary = await getGPTResponse(summaryPrompt);\n        }\n        setSprintData(prev => ({\n          ...prev,\n          [currentDay]: {\n            ...prev[currentDay],\n            [currentObjective]: summary\n          }\n        }));\n      }\n      checkDayCompletion();\n    } catch (error) {\n      console.error(\"Error getting AI response:\", error);\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n      setConversationLog(prev => [...prev, {\n        isUser: false,\n        text: \"Error: Unable to process response.\"\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  const submitDay2 = useCallback(() => {\n    if (crazyEightIdeas.every(idea => idea.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        2: {\n          \"Crazy 8s\": crazyEightIdeas\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all 8 ideas before submitting.\");\n    }\n  }, [crazyEightIdeas, moveToNextDay]);\n  const submitDay3 = useCallback(() => {\n    if (storyboardSections.every(section => section.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        3: {\n          \"Solution Sketch\": storyboardSections.map((section, index) => `Panel ${index + 1}: ${section}`)\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all three storyboard panels before submitting.\");\n    }\n  }, [storyboardSections, moveToNextDay]);\n  const submitDay4 = useCallback(() => {\n    if (Object.values(prototypeData).every(value => value.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        4: prototypeData\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all prototype sections before submitting.\");\n    }\n  }, [prototypeData, moveToNextDay]);\n  const submitDay5 = useCallback(() => {\n    if (testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '') {\n      setSprintData(prev => ({\n        ...prev,\n        5: {\n          \"Testing Scenario\": testingScenario,\n          \"User Interaction\": userInteraction,\n          \"Analysis\": analysisNotes\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all sections before submitting.\");\n    }\n  }, [testingScenario, userInteraction, analysisNotes, moveToNextDay]);\n  const moveToNextDay = useCallback(() => {\n    setCurrentDay(prev => {\n      const nextDay = Math.min(prev + 1, 5);\n      setFeedback('');\n      setIsReadyForNextDay(false);\n      if (prev === 2) {\n        setCrazyEightIdeas(Array(8).fill(''));\n      } else if (prev === 3) {\n        setStoryboardSections(['', '', '']);\n      }\n      setIsTimerRunning(false);\n      setTimerSeconds(480);\n      return nextDay;\n    });\n  }, []);\n  const checkDayCompletion = useCallback(() => {\n    if (currentDay === 2) {\n      const isCrazyEightsComplete = crazyEightIdeas.every(idea => idea.trim() !== '');\n      setIsReadyForNextDay(isCrazyEightsComplete);\n    } else if (currentDay === 3) {\n      const isStoryboardComplete = storyboardSections.every(section => section.trim() !== '');\n      setIsReadyForNextDay(isStoryboardComplete);\n    } else if (currentDay === 4) {\n      const isPrototypeComplete = Object.values(prototypeData).every(value => value.trim() !== '');\n      setIsReadyForNextDay(isPrototypeComplete);\n    } else if (currentDay === 5) {\n      const isTestingComplete = testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '';\n      setIsReadyForNextDay(isTestingComplete);\n    } else {\n      const completedObjectives = Object.keys(sprintData[currentDay] || {}).length;\n      const totalObjectives = getCurrentObjectives().length;\n      setIsReadyForNextDay(completedObjectives === totalObjectives);\n    }\n  }, [currentDay, crazyEightIdeas, storyboardSections, prototypeData, testingScenario, userInteraction, analysisNotes, sprintData, getCurrentObjectives]);\n  useEffect(() => {\n    checkDayCompletion();\n  }, [crazyEightIdeas, storyboardSections, prototypeData, testingScenario, userInteraction, analysisNotes, sprintData, checkDayCompletion]);\n  useEffect(() => {\n    let interval;\n    if (isTimerRunning && timerSeconds > 0) {\n      interval = setInterval(() => {\n        setTimerSeconds(seconds => seconds - 1);\n      }, 1000);\n    } else if (timerSeconds === 0) {\n      setIsTimerRunning(false);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerRunning, timerSeconds]);\n  useEffect(() => {\n    const initialPrompt = getInitialPrompt();\n    setIsTyping(true);\n    getGPTResponse(initialPrompt).then(response => {\n      setFeedback(response);\n      setIsTyping(false);\n      setConversationLog([{\n        isUser: false,\n        text: response\n      }]);\n    });\n  }, [currentDay, getInitialPrompt]);\n  const getInitialPrompt = useCallback(() => {\n    if (currentDay === 4) {\n      return `Welcome to Day 4! Based on your long-term goal of creating an AI-powered mini Design Sprint tool to impress John Zeratsky, and your critical questions about MVP functionality, differentiation, use cases, and communication strategy, let's design an imaginary prototype. Focus on describing key features that address your goals and questions. How would you visualize the user interface for this tool? And how might users interact with it to experience a condensed Design Sprint? Remember to keep John Zeratsky's potential interest in mind as you design.`;\n    } else if (currentDay === 5) {\n      return `It's the final day of our sprint! Today, we'll simulate user testing for your AI-powered mini Design Sprint tool. Considering your goal to impress John Zeratsky, think about how he or a potential user might interact with your prototype. What scenario would best showcase the tool's value? As you prepare for the simulated interaction, keep in mind the critical questions you identified about MVP functionality, differentiation, and use cases. This will help ensure your testing provides valuable insights for potential iterations.`;\n    } else {\n      return `Welcome to Day ${currentDay} of the Design Sprint. ${sprintGuidance[currentDay].prompt}`;\n    }\n  }, [currentDay]);\n  const startTimer = () => {\n    setIsTimerRunning(true);\n    setTimerSeconds(480);\n  };\n  const addStickyNote = () => {\n    if (newNote.trim()) {\n      setStickyNotes(prev => [...prev, newNote]);\n      setNewNote('');\n    }\n  };\n  const deleteStickyNote = index => {\n    setStickyNotes(prev => prev.filter((_, i) => i !== index));\n  };\n  const updateStoryboardSection = (index, value) => {\n    setStoryboardSections(prev => {\n      const newSections = [...prev];\n      newSections[index] = value;\n      return newSections;\n    });\n    checkDayCompletion();\n  };\n  const copyConversationLog = () => {\n    const logText = conversationLog.map(entry => `**${entry.isUser ? 'User' : 'Relay'}**: ${entry.text}`).join('\\n');\n    navigator.clipboard.writeText(logText);\n  };\n  const conductSimulatedInteraction = async () => {\n    setIsTyping(true);\n    const prompt = `You are a potential user interacting with the following product prototype: ${JSON.stringify(prototypeData)}. Please provide realistic responses and actions based on this testing scenario: ${testingScenario}`;\n    try {\n      const response = await getGPTResponse(prompt);\n      setUserInteraction(response);\n    } catch (error) {\n      console.error(\"Error conducting simulated interaction:\", error);\n      setUserInteraction(\"Error: Unable to conduct simulated interaction.\");\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  return /*#__PURE__*/React.createElement(SprintContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MainContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 9\n    }\n  }, `Day ${currentDay}: ${sprintGuidance[currentDay].goal}`), isTyping ? /*#__PURE__*/React.createElement(TypingIndicator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 13\n    }\n  })) : feedback && /*#__PURE__*/React.createElement(AIMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RelayIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 15\n    }\n  }, \"Relay :)\"), \" \", feedback), /*#__PURE__*/React.createElement(InputWithSendIcon, {\n    value: input,\n    onChange: e => setInput(e.target.value),\n    onSubmit: handleSubmit,\n    onKeyPress: e => e.key === 'Enter' && !e.shiftKey && handleSubmit(),\n    placeholder: currentDay === 2 ? \"Need more instructions? Please ask!\" : \"Enter your response here...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 9\n    }\n  }), isReadyForNextDay && /*#__PURE__*/React.createElement(NextDayButton, {\n    onClick: moveToNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 11\n    }\n  }, \"Ready to move to Day \", currentDay + 1, \"?\"), currentDay === 2 && /*#__PURE__*/React.createElement(CrazyEightContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CrazyEightInstructions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 13\n    }\n  }, \"Crazy 8s is a fast sketching exercise where you'll create 8 distinct ideas in 8 minutes. The goal is to push beyond your first idea and generate a wide range of possibilities. Don't worry about quality or feasibility at this stage - focus on quantity and variety!\"), /*#__PURE__*/React.createElement(CopyButton, {\n    onClick: startTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 13\n    }\n  }, \"Start Crazy 8s Timer\"), /*#__PURE__*/React.createElement(Timer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 13\n    }\n  }, Math.floor(timerSeconds / 60), \":\", (timerSeconds % 60).toString().padStart(2, '0')), crazyEightIdeas.map((idea, index) => /*#__PURE__*/React.createElement(CrazyEightInput, {\n    key: index,\n    value: idea,\n    onChange: e => {\n      const newIdeas = [...crazyEightIdeas];\n      newIdeas[index] = e.target.value;\n      setCrazyEightIdeas(newIdeas);\n    },\n    placeholder: `Crazy 8s Idea ${index + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 15\n    }\n  })), isReadyForNextDay && /*#__PURE__*/React.createElement(SubmitButton, {\n    onClick: submitDay2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 15\n    }\n  }, \"Submit Crazy 8s and Move to Day 3\")), currentDay === 3 && /*#__PURE__*/React.createElement(StoryboardContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(StoryboardInstructions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 13\n    }\n  }, \"Create a three-panel storyboard that outlines your chosen solution. Each panel should represent a key step or moment in your solution: 1. The problem or starting point 2. The main action or change 3. The result or outcome Describe each panel in detail, focusing on what the user sees and does.\"), storyboardSections.map((section, index) => /*#__PURE__*/React.createElement(StoryboardSection, {\n    key: index,\n    value: section,\n    onChange: e => updateStoryboardSection(index, e.target.value),\n    placeholder: `Describe panel ${index + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 15\n    }\n  })), isReadyForNextDay && /*#__PURE__*/React.createElement(SubmitButton, {\n    onClick: submitDay3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 15\n    }\n  }, \"Submit Storyboard and Move to Day 4\")), currentDay === 4 && /*#__PURE__*/React.createElement(PrototypeSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 13\n    }\n  }, \"Design Your Imaginary Prototype\"), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: prototypeData.features,\n    onChange: e => setPrototypeData(prev => ({\n      ...prev,\n      features: e.target.value\n    })),\n    placeholder: \"Describe key features...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: prototypeData.interface,\n    onChange: e => setPrototypeData(prev => ({\n      ...prev,\n      interface: e.target.value\n    })),\n    placeholder: \"Outline user interface...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: prototypeData.interactions,\n    onChange: e => setPrototypeData(prev => ({\n      ...prev,\n      interactions: e.target.value\n    })),\n    placeholder: \"Detail user interactions...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 13\n    }\n  }), isReadyForNextDay && /*#__PURE__*/React.createElement(SubmitButton, {\n    onClick: submitDay4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 15\n    }\n  }, \"Submit Imaginary Prototype and Move to Day 5\")), currentDay === 5 && /*#__PURE__*/React.createElement(InteractionSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 13\n    }\n  }, \"Simulated User Testing\"), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: testingScenario,\n    onChange: e => setTestingScenario(e.target.value),\n    placeholder: \"Prepare user testing scenario...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CopyButton, {\n    onClick: conductSimulatedInteraction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 13\n    }\n  }, \"Conduct Simulated Interaction\"), userInteraction && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 17\n    }\n  }, \"User Interaction:\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 17\n    }\n  }, userInteraction)), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: analysisNotes,\n    onChange: e => setAnalysisNotes(e.target.value),\n    placeholder: \"Analyze feedback and consider iterations...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 13\n    }\n  }), isReadyForNextDay && /*#__PURE__*/React.createElement(SubmitButton, {\n    onClick: submitDay5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 15\n    }\n  }, \"Submit User Testing Results and Complete Sprint\")), /*#__PURE__*/React.createElement(StickyNotesSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StickyNotePrompt, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 11\n    }\n  }, \"Add your quick thoughts to the sticky note board:\"), /*#__PURE__*/React.createElement(StickyNotesGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 11\n    }\n  }, stickyNotes.map((note, index) => /*#__PURE__*/React.createElement(StickyNote, {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 15\n    }\n  }, note, /*#__PURE__*/React.createElement(DeleteNote, {\n    onClick: () => deleteStickyNote(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 17\n    }\n  }, \"\\xD7\")))), /*#__PURE__*/React.createElement(StickyNoteInput, {\n    value: newNote,\n    onChange: e => setNewNote(e.target.value),\n    placeholder: \"Add a new note...\",\n    onKeyPress: e => e.key === 'Enter' && addStickyNote(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(ConversationLog, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 11\n    }\n  }, \"Conversation Log (For Development)\"), /*#__PURE__*/React.createElement(CopyButton, {\n    onClick: copyConversationLog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 11\n    }\n  }, \"Copy Log\"), conversationLog.map((entry, index) => /*#__PURE__*/React.createElement(LogEntry, {\n    key: index,\n    isUser: entry.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 15\n    }\n  }, entry.isUser ? 'User' : 'Relay'), \": \", entry.text)))), /*#__PURE__*/React.createElement(OutputSidebar, {\n    sprintData: sprintData,\n    currentDay: currentDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 7\n    }\n  }));\n};\nexport default DaySprint;","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","keyframes","getGPTResponse","sprintGuidance","OutputSidebar","InputWithSendIcon","SprintContainer","div","MainContent","Header","h1","AIMessage","RelayIcon","span","typing","TypingIndicator","NextDayButton","button","StickyNotesSection","StickyNotesGrid","StickyNote","DeleteNote","StickyNoteInput","input","StickyNotePrompt","p","ConversationLog","LogEntry","props","isUser","CopyButton","Timer","CrazyEightContainer","CrazyEightInstructions","CrazyEightInput","StoryboardContainer","StoryboardInstructions","StoryboardSection","textarea","SubmitButton","PrototypeSection","InteractionSection","DaySprint","currentDay","setCurrentDay","setInput","feedback","setFeedback","sprintData","setSprintData","stickyNotes","setStickyNotes","newNote","setNewNote","isTyping","setIsTyping","conversationLog","setConversationLog","timerSeconds","setTimerSeconds","isTimerRunning","setIsTimerRunning","crazyEightIdeas","setCrazyEightIdeas","Array","fill","storyboardSections","setStoryboardSections","isReadyForNextDay","setIsReadyForNextDay","prototypeData","setPrototypeData","features","interface","interactions","testingScenario","setTestingScenario","userInteraction","setUserInteraction","analysisNotes","setAnalysisNotes","getCurrentPrompt","prompt","getCurrentObjectives","objectives","handleSubmit","trim","userInput","prev","text","response","cleanedResponse","replace","currentObjectives","currentObjective","Object","keys","length","summary","filter","idea","map","section","index","summaryPrompt","checkDayCompletion","error","console","submitDay2","every","moveToNextDay","alert","submitDay3","submitDay4","values","value","submitDay5","nextDay","Math","min","isCrazyEightsComplete","isStoryboardComplete","isPrototypeComplete","isTestingComplete","completedObjectives","totalObjectives","interval","setInterval","seconds","clearInterval","initialPrompt","getInitialPrompt","then","startTimer","addStickyNote","deleteStickyNote","_","i","updateStoryboardSection","newSections","copyConversationLog","logText","entry","join","navigator","clipboard","writeText","conductSimulatedInteraction","JSON","stringify","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","goal","onChange","e","target","onSubmit","onKeyPress","key","shiftKey","placeholder","onClick","floor","toString","padStart","newIdeas","Fragment","note"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport InputWithSendIcon from './InputWithSendIcon';\n\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\n\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\n\nconst AIMessage = styled.div`\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n  padding: 15px;\n  border-radius: 15px;\n  margin-bottom: 20px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  position: relative;\n  max-width: 80%;\n  align-self: flex-start;\n`;\n\nconst RelayIcon = styled.span`\n  font-weight: bold;\n  color: #3c8ce7;\n  margin-right: 5px;\n`;\n\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\n\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\n\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\n\nconst StickyNotesSection = styled.div`\n  margin-top: 2rem;\n`;\n\nconst StickyNotesGrid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nconst StickyNote = styled.div`\n  background-color: #feff9c;\n  padding: 0.75rem;\n  width: 150px;\n  height: 150px;\n  border-radius: 3px;\n  color: #000000;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  text-align: center;\n  position: relative;\n`;\n\nconst DeleteNote = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  background: none;\n  border: none;\n  color: #ff4136;\n  cursor: pointer;\n  font-size: 1.2rem;\n`;\n\nconst StickyNoteInput = styled.input`\n  width: 100%;\n  padding: 0.75rem;\n  margin-bottom: 0.75rem;\n  border: none;\n  border-radius: 3px;\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n`;\n\nconst StickyNotePrompt = styled.p`\n  color: #b0b0b0;\n  font-style: italic;\n  margin-bottom: 10px;\n`;\n\nconst ConversationLog = styled.div`\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n  max-height: 300px;\n  overflow-y: auto;\n`;\n\nconst LogEntry = styled.div`\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#1e1e1e'};\n  border-radius: 5px;\n  color: ${props => props.isUser ? '#ffffff' : '#e0e0e0'};\n`;\n\nconst CopyButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n`;\n\nconst Timer = styled.div`\n  font-size: 2rem;\n  text-align: center;\n  margin: 1rem 0;\n`;\n\nconst CrazyEightContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst CrazyEightInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\n\nconst CrazyEightInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  margin-bottom: 0.5rem;\n  border: 1px solid #3c8ce7;\n  border-radius: 5px;\n`;\n\nconst StoryboardContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst StoryboardInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\n\nconst StoryboardSection = styled.textarea`\n  width: 100%;\n  height: 150px;\n  margin-top: 1rem;\n  padding: 0.5rem;\n  border-radius: 5px;\n`;\n\nconst SubmitButton = styled(CopyButton)`\n  margin-top: 1rem;\n  font-size: 1.2rem;\n  padding: 1rem 2rem;\n`;\n\nconst PrototypeSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst InteractionSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [input, setInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [stickyNotes, setStickyNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [conversationLog, setConversationLog] = useState([]);\n  const [timerSeconds, setTimerSeconds] = useState(480); // 8 minutes\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [crazyEightIdeas, setCrazyEightIdeas] = useState(Array(8).fill(''));\n  const [storyboardSections, setStoryboardSections] = useState(['', '', '']);\n  const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n  const [prototypeData, setPrototypeData] = useState({ features: '', interface: '', interactions: '' });\n  const [testingScenario, setTestingScenario] = useState('');\n  const [userInteraction, setUserInteraction] = useState('');\n  const [analysisNotes, setAnalysisNotes] = useState('');\n\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n\n  const handleSubmit = async () => {\n    if (!input.trim()) return;\n\n    setIsTyping(true);\n    const userInput = input;\n    setInput('');\n\n    setConversationLog(prev => [...prev, { isUser: true, text: userInput }]);\n\n    const prompt = `Day ${currentDay} of Design Sprint. User input: \"${userInput}\". ${getCurrentPrompt()} Provide guidance and suggestions to help the user develop their own ideas. Do not provide direct answers or solutions. Encourage the user to think critically and come up with their own responses.`;\n\n    try {\n      const response = await getGPTResponse(prompt);\n      const cleanedResponse = response.replace('[SHOW_NEXT_DAY_BUTTON]', '').trim();\n      setFeedback(cleanedResponse);\n      setConversationLog(prev => [...prev, { isUser: false, text: cleanedResponse }]);\n\n      const currentObjectives = getCurrentObjectives();\n      const currentObjective = currentObjectives[Object.keys(sprintData[currentDay] || {}).length];\n\n      if (currentObjective) {\n        let summary;\n        if (currentDay === 2) {\n          if (currentObjective === \"Crazy 8s\") {\n            summary = crazyEightIdeas.filter(idea => idea.trim() !== '');\n          } else if (currentObjective === \"Solution Sketch\") {\n            summary = storyboardSections.map((section, index) => `Panel ${index + 1}: ${section}`);\n          }\n        } else {\n          const summaryPrompt = `Summarize and refine the following user input for the Design Sprint Day ${currentDay}, objective: ${currentObjective}. User input: \"${userInput}\". Provide a concise, clear summary that captures the essence of the user's input.`;\n          summary = await getGPTResponse(summaryPrompt);\n        }\n\n        setSprintData(prev => ({\n          ...prev,\n          [currentDay]: {\n            ...prev[currentDay],\n            [currentObjective]: summary\n          }\n        }));\n      }\n\n      checkDayCompletion();\n    } catch (error) {\n      console.error(\"Error getting AI response:\", error);\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n      setConversationLog(prev => [...prev, { isUser: false, text: \"Error: Unable to process response.\" }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  const submitDay2 = useCallback(() => {\n    if (crazyEightIdeas.every(idea => idea.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        2: {\n          \"Crazy 8s\": crazyEightIdeas\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all 8 ideas before submitting.\");\n    }\n  }, [crazyEightIdeas, moveToNextDay]);\n\n  const submitDay3 = useCallback(() => {\n    if (storyboardSections.every(section => section.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        3: {\n          \"Solution Sketch\": storyboardSections.map((section, index) => `Panel ${index + 1}: ${section}`)\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all three storyboard panels before submitting.\");\n    }\n  }, [storyboardSections, moveToNextDay]);\n\n  const submitDay4 = useCallback(() => {\n    if (Object.values(prototypeData).every(value => value.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        4: prototypeData\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all prototype sections before submitting.\");\n    }\n  }, [prototypeData, moveToNextDay]);\n\n  const submitDay5 = useCallback(() => {\n    if (testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '') {\n      setSprintData(prev => ({\n        ...prev,\n        5: {\n          \"Testing Scenario\": testingScenario,\n          \"User Interaction\": userInteraction,\n          \"Analysis\": analysisNotes\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all sections before submitting.\");\n    }\n  }, [testingScenario, userInteraction, analysisNotes, moveToNextDay]);\n\n  const moveToNextDay = useCallback(() => {\n    setCurrentDay(prev => {\n      const nextDay = Math.min(prev + 1, 5);\n      setFeedback('');\n      setIsReadyForNextDay(false);\n      if (prev === 2) {\n        setCrazyEightIdeas(Array(8).fill(''));\n      } else if (prev === 3) {\n        setStoryboardSections(['', '', '']);\n      }\n      setIsTimerRunning(false);\n      setTimerSeconds(480);\n      return nextDay;\n    });\n  }, []);\n\n  const checkDayCompletion = useCallback(() => {\n    if (currentDay === 2) {\n      const isCrazyEightsComplete = crazyEightIdeas.every(idea => idea.trim() !== '');\n      setIsReadyForNextDay(isCrazyEightsComplete);\n    } else if (currentDay === 3) {\n      const isStoryboardComplete = storyboardSections.every(section => section.trim() !== '');\n      setIsReadyForNextDay(isStoryboardComplete);\n    } else if (currentDay === 4) {\n      const isPrototypeComplete = Object.values(prototypeData).every(value => value.trim() !== '');\n      setIsReadyForNextDay(isPrototypeComplete);\n    } else if (currentDay === 5) {\n      const isTestingComplete = testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '';\n      setIsReadyForNextDay(isTestingComplete);\n    } else {\n      const completedObjectives = Object.keys(sprintData[currentDay] || {}).length;\n      const totalObjectives = getCurrentObjectives().length;\n      setIsReadyForNextDay(completedObjectives === totalObjectives);\n    }\n  }, [currentDay, crazyEightIdeas, storyboardSections, prototypeData, testingScenario, userInteraction, analysisNotes, sprintData, getCurrentObjectives]);\n\n  useEffect(() => {\n    checkDayCompletion();\n  }, [crazyEightIdeas, storyboardSections, prototypeData, testingScenario, userInteraction, analysisNotes, sprintData, checkDayCompletion]);\n\n  useEffect(() => {\n    let interval;\n    if (isTimerRunning && timerSeconds > 0) {\n      interval = setInterval(() => {\n        setTimerSeconds(seconds => seconds - 1);\n      }, 1000);\n    } else if (timerSeconds === 0) {\n      setIsTimerRunning(false);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerRunning, timerSeconds]);\n\n  useEffect(() => {\n    const initialPrompt = getInitialPrompt();\n    setIsTyping(true);\n    getGPTResponse(initialPrompt).then(response => {\n      setFeedback(response);\n      setIsTyping(false);\n      setConversationLog([{ isUser: false, text: response }]);\n    });\n  }, [currentDay, getInitialPrompt]);\n\n  const getInitialPrompt = useCallback(() => {\n    if (currentDay === 4) {\n      return `Welcome to Day 4! Based on your long-term goal of creating an AI-powered mini Design Sprint tool to impress John Zeratsky, and your critical questions about MVP functionality, differentiation, use cases, and communication strategy, let's design an imaginary prototype. Focus on describing key features that address your goals and questions. How would you visualize the user interface for this tool? And how might users interact with it to experience a condensed Design Sprint? Remember to keep John Zeratsky's potential interest in mind as you design.`;\n    } else if (currentDay === 5) {\n      return `It's the final day of our sprint! Today, we'll simulate user testing for your AI-powered mini Design Sprint tool. Considering your goal to impress John Zeratsky, think about how he or a potential user might interact with your prototype. What scenario would best showcase the tool's value? As you prepare for the simulated interaction, keep in mind the critical questions you identified about MVP functionality, differentiation, and use cases. This will help ensure your testing provides valuable insights for potential iterations.`;\n    } else {\n      return `Welcome to Day ${currentDay} of the Design Sprint. ${sprintGuidance[currentDay].prompt}`;\n    }\n  }, [currentDay]);\n\n  const startTimer = () => {\n    setIsTimerRunning(true);\n    setTimerSeconds(480);\n  };\n\n  const addStickyNote = () => {\n    if (newNote.trim()) {\n      setStickyNotes(prev => [...prev, newNote]);\n      setNewNote('');\n    }\n  };\n\n  const deleteStickyNote = (index) => {\n    setStickyNotes(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const updateStoryboardSection = (index, value) => {\n    setStoryboardSections(prev => {\n      const newSections = [...prev];\n      newSections[index] = value;\n      return newSections;\n    });\n    checkDayCompletion();\n  };\n\n  const copyConversationLog = () => {\n    const logText = conversationLog.map(entry => `**${entry.isUser ? 'User' : 'Relay'}**: ${entry.text}`).join('\\n');\n    navigator.clipboard.writeText(logText);\n  };\n\n  const conductSimulatedInteraction = async () => {\n    setIsTyping(true);\n    const prompt = `You are a potential user interacting with the following product prototype: ${JSON.stringify(prototypeData)}. Please provide realistic responses and actions based on this testing scenario: ${testingScenario}`;\n    try {\n      const response = await getGPTResponse(prompt);\n      setUserInteraction(response);\n    } catch (error) {\n      console.error(\"Error conducting simulated interaction:\", error);\n      setUserInteraction(\"Error: Unable to conduct simulated interaction.\");\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  return (\n    <SprintContainer>\n      <MainContent>\n        <Header>{`Day ${currentDay}: ${sprintGuidance[currentDay].goal}`}</Header>\n        {isTyping ? (\n          <TypingIndicator>\n            <span></span>\n            <span></span>\n            <span></span>\n          </TypingIndicator>\n        ) : (\n          feedback && (\n            <AIMessage>\n              <RelayIcon>Relay :)</RelayIcon> {feedback}\n            </AIMessage>\n          )\n        )}\n        <InputWithSendIcon\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onSubmit={handleSubmit}\n          onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSubmit()}\n          placeholder={currentDay === 2 ? \"Need more instructions? Please ask!\" : \"Enter your response here...\"}\n        />\n        {isReadyForNextDay && (\n          <NextDayButton onClick={moveToNextDay}>\n            Ready to move to Day {currentDay + 1}?\n          </NextDayButton>\n        )}\n        {currentDay === 2 && (\n          <CrazyEightContainer>\n            <CrazyEightInstructions>\n              Crazy 8s is a fast sketching exercise where you'll create 8 distinct ideas in 8 minutes. \n              The goal is to push beyond your first idea and generate a wide range of possibilities. \n              Don't worry about quality or feasibility at this stage - focus on quantity and variety!\n            </CrazyEightInstructions>\n            <CopyButton onClick={startTimer}>Start Crazy 8s Timer</CopyButton>\n            <Timer>{Math.floor(timerSeconds / 60)}:{(timerSeconds % 60).toString().padStart(2, '0')}</Timer>\n            {crazyEightIdeas.map((idea, index) => (\n              <CrazyEightInput\n                key={index}\n                value={idea}\n                onChange={(e) => {\n                  const newIdeas = [...crazyEightIdeas];\n                  newIdeas[index] = e.target.value;\n                  setCrazyEightIdeas(newIdeas);\n                }}\n                placeholder={`Crazy 8s Idea ${index + 1}`}\n              />\n            ))}\n            {isReadyForNextDay && (\n              <SubmitButton onClick={submitDay2}>\n                Submit Crazy 8s and Move to Day 3\n              </SubmitButton>\n            )}\n          </CrazyEightContainer>\n        )}\n        {currentDay === 3 && (\n          <StoryboardContainer>\n            <StoryboardInstructions>\n              Create a three-panel storyboard that outlines your chosen solution. Each panel should represent a key step or moment in your solution:\n              1. The problem or starting point\n              2. The main action or change\n              3. The result or outcome\n              Describe each panel in detail, focusing on what the user sees and does.\n            </StoryboardInstructions>\n            {storyboardSections.map((section, index) => (\n              <StoryboardSection\n                key={index}\n                value={section}\n                onChange={(e) => updateStoryboardSection(index, e.target.value)}\n                placeholder={`Describe panel ${index + 1}`}\n              />\n            ))}\n            {isReadyForNextDay && (\n              <SubmitButton onClick={submitDay3}>\n                Submit Storyboard and Move to Day 4\n              </SubmitButton>\n            )}\n          </StoryboardContainer>\n        )}\n        {currentDay === 4 && (\n          <PrototypeSection>\n            <h3>Design Your Imaginary Prototype</h3>\n            <StoryboardSection\n              value={prototypeData.features}\n              onChange={(e) => setPrototypeData(prev => ({ ...prev, features: e.target.value }))}\n              placeholder=\"Describe key features...\"\n            />\n            <StoryboardSection\n              value={prototypeData.interface}\n              onChange={(e) => setPrototypeData(prev => ({ ...prev, interface: e.target.value }))}\n              placeholder=\"Outline user interface...\"\n            />\n            <StoryboardSection\n              value={prototypeData.interactions}\n              onChange={(e) => setPrototypeData(prev => ({ ...prev, interactions: e.target.value }))}\n              placeholder=\"Detail user interactions...\"\n            />\n            {isReadyForNextDay && (\n              <SubmitButton onClick={submitDay4}>\n                Submit Imaginary Prototype and Move to Day 5\n              </SubmitButton>\n            )}\n          </PrototypeSection>\n        )}\n        {currentDay === 5 && (\n          <InteractionSection>\n            <h3>Simulated User Testing</h3>\n            <StoryboardSection\n              value={testingScenario}\n              onChange={(e) => setTestingScenario(e.target.value)}\n              placeholder=\"Prepare user testing scenario...\"\n            />\n            <CopyButton onClick={conductSimulatedInteraction}>Conduct Simulated Interaction</CopyButton>\n            {userInteraction && (\n              <>\n                <h4>User Interaction:</h4>\n                <p>{userInteraction}</p>\n              </>\n            )}\n            <StoryboardSection\n              value={analysisNotes}\n              onChange={(e) => setAnalysisNotes(e.target.value)}\n              placeholder=\"Analyze feedback and consider iterations...\"\n            />\n            {isReadyForNextDay && (\n              <SubmitButton onClick={submitDay5}>\n                Submit User Testing Results and Complete Sprint\n              </SubmitButton>\n            )}\n          </InteractionSection>\n        )}\n        <StickyNotesSection>\n          <StickyNotePrompt>Add your quick thoughts to the sticky note board:</StickyNotePrompt>\n          <StickyNotesGrid>\n            {stickyNotes.map((note, index) => (\n              <StickyNote key={index}>\n                {note}\n                <DeleteNote onClick={() => deleteStickyNote(index)}>×</DeleteNote>\n              </StickyNote>\n            ))}\n          </StickyNotesGrid>\n          <StickyNoteInput\n            value={newNote}\n            onChange={(e) => setNewNote(e.target.value)}\n            placeholder=\"Add a new note...\"\n            onKeyPress={(e) => e.key === 'Enter' && addStickyNote()}\n          />\n        </StickyNotesSection>\n        <ConversationLog>\n          <h3>Conversation Log (For Development)</h3>\n          <CopyButton onClick={copyConversationLog}>Copy Log</CopyButton>\n          {conversationLog.map((entry, index) => (\n            <LogEntry key={index} isUser={entry.isUser}>\n              <strong>{entry.isUser ? 'User' : 'Relay'}</strong>: {entry.text}\n            </LogEntry>\n          ))}\n        </ConversationLog>\n      </MainContent>\n      <OutputSidebar\n        sprintData={sprintData}\n        currentDay={currentDay}\n      />\n    </SprintContainer>\n  );\n};\n\nexport default DaySprint;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}