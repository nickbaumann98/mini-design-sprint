{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport { debounce } from 'lodash';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\n\n// ... (previous styled components remain unchanged)\n\nconst AIChat = ({\n  day,\n  onUpdateDeliverable\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const inputRef = useRef(null);\n  const getAIResponse = useCallback(async (prompt, currentDay, shouldUpdateDeliverable = false) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay));\n      const aiMessage = {\n        text: aiResponse,\n        isUser: false\n      };\n      setMessages(prev => [...prev, aiMessage]);\n      if (shouldUpdateDeliverable) {\n        const deliverable = await getGPTResponse(getDeliverablePrompt(prompt, currentDay));\n        onUpdateDeliverable(currentDay, deliverable);\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        text: \"I apologize, but I'm having trouble processing that request. Let's try a different approach. \" + getSprintTip(day),\n        isUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onUpdateDeliverable, day]);\n  useEffect(() => {\n    if (!hasInitialized) {\n      const initialPrompt = sprintGuidance[day].prompt;\n      setMessages([{\n        text: initialPrompt,\n        isUser: false\n      }]);\n      setHasInitialized(true);\n    }\n  }, [day, hasInitialized]);\n\n  // ... (handleInputChange, handleKeyPress, and return statement remain largely unchanged)\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChatContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(Message, {\n    key: index,\n    isUser: message.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, parseMarkdown(message.text)))), /*#__PURE__*/React.createElement(InputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: inputRef,\n    value: input,\n    onChange: handleInputChange,\n    onKeyPress: handleKeyPress,\n    placeholder: \"Type your message...\",\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SendButton, {\n    onClick: debouncedHandleSend,\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, isLoading ? 'Thinking...' : 'Send')));\n};\nconst getAIPrompt = (userInput, day) => {\n  const {\n    goal,\n    tasks\n  } = sprintGuidance[day];\n  return `You are an AI assistant helping with a mini design sprint. It's Day ${day} of the sprint. \n  The goal for today is: ${goal}. \n  Key tasks: ${tasks.join(', ')}. \n  The user input is: \"${userInput}\". \n  Provide guidance, ask relevant follow-up questions, and help the user progress through this day of the sprint. \n  Be concise, friendly, and focused on the day's objectives.`;\n};\nconst getDeliverablePrompt = (userInput, day) => {\n  const {\n    goal\n  } = sprintGuidance[day];\n  return `Based on this user input for Day ${day} of the mini design sprint: \"${userInput}\", \n  create a concise summary of the key decisions or outputs related to the day's goal: ${goal}. \n  Format the response as a brief, bullet-pointed list of no more than 3-5 items.`;\n};\nexport default AIChat;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","styled","debounce","SimpleMarkdown","getGPTResponse","sprintGuidance","getSprintTip","AIChat","day","onUpdateDeliverable","messages","setMessages","input","setInput","isLoading","setIsLoading","hasInitialized","setHasInitialized","inputRef","getAIResponse","prompt","currentDay","shouldUpdateDeliverable","aiResponse","getAIPrompt","aiMessage","text","isUser","prev","deliverable","getDeliverablePrompt","error","console","initialPrompt","createElement","Fragment","ChatContainer","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","Message","key","parseMarkdown","InputContainer","Input","ref","value","onChange","handleInputChange","onKeyPress","handleKeyPress","placeholder","disabled","SendButton","onClick","debouncedHandleSend","userInput","goal","tasks","join"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport { debounce } from 'lodash';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\n\n// ... (previous styled components remain unchanged)\n\nconst AIChat = ({ day, onUpdateDeliverable }) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const inputRef = useRef(null);\n\n  const getAIResponse = useCallback(async (prompt, currentDay, shouldUpdateDeliverable = false) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay));\n      const aiMessage = { text: aiResponse, isUser: false };\n      setMessages(prev => [...prev, aiMessage]);\n      if (shouldUpdateDeliverable) {\n        const deliverable = await getGPTResponse(getDeliverablePrompt(prompt, currentDay));\n        onUpdateDeliverable(currentDay, deliverable);\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, { \n        text: \"I apologize, but I'm having trouble processing that request. Let's try a different approach. \" + getSprintTip(day), \n        isUser: false \n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onUpdateDeliverable, day]);\n\n  useEffect(() => {\n    if (!hasInitialized) {\n      const initialPrompt = sprintGuidance[day].prompt;\n      setMessages([{ text: initialPrompt, isUser: false }]);\n      setHasInitialized(true);\n    }\n  }, [day, hasInitialized]);\n\n  // ... (handleInputChange, handleKeyPress, and return statement remain largely unchanged)\n\n  return (\n    <>\n      <ChatContainer>\n        {messages.map((message, index) => (\n          <Message key={index} isUser={message.isUser}>\n            {parseMarkdown(message.text)}\n          </Message>\n        ))}\n      </ChatContainer>\n      <InputContainer>\n        <Input\n          ref={inputRef}\n          value={input}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Type your message...\"\n          disabled={isLoading}\n        />\n        <SendButton onClick={debouncedHandleSend} disabled={isLoading}>\n          {isLoading ? 'Thinking...' : 'Send'}\n        </SendButton>\n      </InputContainer>\n    </>\n  );\n};\n\nconst getAIPrompt = (userInput, day) => {\n  const { goal, tasks } = sprintGuidance[day];\n  return `You are an AI assistant helping with a mini design sprint. It's Day ${day} of the sprint. \n  The goal for today is: ${goal}. \n  Key tasks: ${tasks.join(', ')}. \n  The user input is: \"${userInput}\". \n  Provide guidance, ask relevant follow-up questions, and help the user progress through this day of the sprint. \n  Be concise, friendly, and focused on the day's objectives.`;\n};\n\nconst getDeliverablePrompt = (userInput, day) => {\n  const { goal } = sprintGuidance[day];\n  return `Based on this user input for Day ${day} of the mini design sprint: \"${userInput}\", \n  create a concise summary of the key decisions or outputs related to the day's goal: ${goal}. \n  Format the response as a brief, bullet-pointed list of no more than 3-5 items.`;\n};\n\nexport default AIChat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}