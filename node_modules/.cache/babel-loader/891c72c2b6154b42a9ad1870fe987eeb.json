{"ast":null,"code":"/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('hast-util-sanitize').Schema} Schema\n * @typedef {import('mdast-util-to-hast').Options} ToHastOptions\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<unknown>} ReactElement\n *\n * @callback CreateElementLike\n * @param {any} name\n * @param {any} props\n * @param {...ReactNode} children\n * @returns {ReactNode}\n *\n * @typedef Options\n * @property {CreateElementLike} createElement\n *   How to create elements or components.\n *   You should typically pass `React.createElement`.\n * @property {((props: any) => ReactNode)|undefined} [Fragment]\n *   Create fragments instead of an outer `<div>` if available.\n *   You should typically pass `React.Fragment`.\n * @property {string|undefined} [prefix='h-']\n *   React key prefix\n * @property {boolean|Schema} [sanitize]\n *   Options for `hast-util-sanitize`.\n * @property {ToHastOptions} [toHast={}]\n *   Options for `mdast-util-to-hast`.\n * @property {Partial<{[TagName in keyof JSX.IntrinsicElements]: string|((props: JSX.IntrinsicElements[TagName]) => ReactNode)}>} [remarkReactComponents]\n *   Override default elements (such as `<a>`, `<p>`, etcetera) by passing an\n *   object mapping tag names to components.\n */\n\nimport { toHast } from 'mdast-util-to-hast';\nimport { sanitize } from 'hast-util-sanitize';\nimport { toH } from 'hast-to-hyperscript';\n// @ts-expect-error: untyped.\nimport tableCellStyle from '@mapbox/hast-util-table-cell-style';\nconst own = {}.hasOwnProperty;\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr']);\n\n/**\n * Plugin to transform markdown to React.\n *\n * @type {import('unified').Plugin<[Options], Root, ReactElement>}\n */\nexport default function remarkReact(options) {\n  if (!options || !options.createElement) {\n    throw new Error('Missing `createElement` in `options`');\n  }\n  const createElement = options.createElement;\n  /** @type {Options['Fragment']} */\n  // @ts-expect-error: to do: deprecate `fragment`.\n  const Fragment = options.Fragment || options.fragment;\n  const clean = options.sanitize !== false;\n  const scheme = clean && typeof options.sanitize !== 'boolean' ? options.sanitize : null;\n  const toHastOptions = options.toHast || {};\n  const components = options.remarkReactComponents || {};\n  Object.assign(this, {\n    Compiler: compile\n  });\n\n  /**\n   * @param {keyof JSX.IntrinsicElements} name\n   * @param {Record<string, unknown>} props\n   * @param {unknown[]} [children]\n   * @returns {ReactNode}\n   */\n  function h(name, props, children) {\n    // Currently, React issues a warning for *any* white space in tables.\n    // So we remove the pretty lines for now.\n    // See: <https://github.com/facebook/react/pull/7081>.\n    // See: <https://github.com/facebook/react/pull/7515>.\n    // See: <https://github.com/remarkjs/remark-react/issues/64>.\n    /* istanbul ignore next - still works but need to publish `remark-gfm`\n     * first. */\n    if (children && tableElements.has(name)) {\n      children = children.filter(child => child !== '\\n');\n    }\n    return createElement(own.call(components, name) ? components[name] : name, props, children);\n  }\n\n  // Compile mdast to React.\n  /** @type {import('unified').CompilerFunction<Root, ReactNode>} */\n  function compile(node) {\n    let tree = toHast(node, toHastOptions);\n    if (clean && tree) {\n      tree = sanitize(tree, scheme || undefined);\n    }\n\n    /** @type {ReactNode} */\n    // @ts-expect-error: assume `name` is a known element.\n    let result = toH(h, tableCellStyle(tree), options.prefix);\n\n    // If this compiled to a `<div>`, but fragment are possible, use those.\n    if (result && typeof result === 'object' && 'type' in result && result.type === 'div' && 'props' in result && Fragment) {\n      // `children` does exist.\n      // type-coverage:ignore-next-line\n      result = createElement(Fragment, {}, result.props.children);\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["toHast","sanitize","toH","tableCellStyle","own","hasOwnProperty","tableElements","Set","remarkReact","options","createElement","Error","Fragment","fragment","clean","scheme","toHastOptions","components","remarkReactComponents","Object","assign","Compiler","compile","h","name","props","children","has","filter","child","call","node","tree","undefined","result","prefix","type"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/node_modules/remark-react/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('hast-util-sanitize').Schema} Schema\n * @typedef {import('mdast-util-to-hast').Options} ToHastOptions\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<unknown>} ReactElement\n *\n * @callback CreateElementLike\n * @param {any} name\n * @param {any} props\n * @param {...ReactNode} children\n * @returns {ReactNode}\n *\n * @typedef Options\n * @property {CreateElementLike} createElement\n *   How to create elements or components.\n *   You should typically pass `React.createElement`.\n * @property {((props: any) => ReactNode)|undefined} [Fragment]\n *   Create fragments instead of an outer `<div>` if available.\n *   You should typically pass `React.Fragment`.\n * @property {string|undefined} [prefix='h-']\n *   React key prefix\n * @property {boolean|Schema} [sanitize]\n *   Options for `hast-util-sanitize`.\n * @property {ToHastOptions} [toHast={}]\n *   Options for `mdast-util-to-hast`.\n * @property {Partial<{[TagName in keyof JSX.IntrinsicElements]: string|((props: JSX.IntrinsicElements[TagName]) => ReactNode)}>} [remarkReactComponents]\n *   Override default elements (such as `<a>`, `<p>`, etcetera) by passing an\n *   object mapping tag names to components.\n */\n\nimport {toHast} from 'mdast-util-to-hast'\nimport {sanitize} from 'hast-util-sanitize'\nimport {toH} from 'hast-to-hyperscript'\n// @ts-expect-error: untyped.\nimport tableCellStyle from '@mapbox/hast-util-table-cell-style'\n\nconst own = {}.hasOwnProperty\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * Plugin to transform markdown to React.\n *\n * @type {import('unified').Plugin<[Options], Root, ReactElement>}\n */\nexport default function remarkReact(options) {\n  if (!options || !options.createElement) {\n    throw new Error('Missing `createElement` in `options`')\n  }\n\n  const createElement = options.createElement\n  /** @type {Options['Fragment']} */\n  // @ts-expect-error: to do: deprecate `fragment`.\n  const Fragment = options.Fragment || options.fragment\n  const clean = options.sanitize !== false\n  const scheme =\n    clean && typeof options.sanitize !== 'boolean' ? options.sanitize : null\n  const toHastOptions = options.toHast || {}\n  const components = options.remarkReactComponents || {}\n\n  Object.assign(this, {Compiler: compile})\n\n  /**\n   * @param {keyof JSX.IntrinsicElements} name\n   * @param {Record<string, unknown>} props\n   * @param {unknown[]} [children]\n   * @returns {ReactNode}\n   */\n  function h(name, props, children) {\n    // Currently, React issues a warning for *any* white space in tables.\n    // So we remove the pretty lines for now.\n    // See: <https://github.com/facebook/react/pull/7081>.\n    // See: <https://github.com/facebook/react/pull/7515>.\n    // See: <https://github.com/remarkjs/remark-react/issues/64>.\n    /* istanbul ignore next - still works but need to publish `remark-gfm`\n     * first. */\n    if (children && tableElements.has(name)) {\n      children = children.filter((child) => child !== '\\n')\n    }\n\n    return createElement(\n      own.call(components, name) ? components[name] : name,\n      props,\n      children\n    )\n  }\n\n  // Compile mdast to React.\n  /** @type {import('unified').CompilerFunction<Root, ReactNode>} */\n  function compile(node) {\n    let tree = toHast(node, toHastOptions)\n\n    if (clean && tree) {\n      tree = sanitize(tree, scheme || undefined)\n    }\n\n    /** @type {ReactNode} */\n    // @ts-expect-error: assume `name` is a known element.\n    let result = toH(h, tableCellStyle(tree), options.prefix)\n\n    // If this compiled to a `<div>`, but fragment are possible, use those.\n    if (\n      result &&\n      typeof result === 'object' &&\n      'type' in result &&\n      result.type === 'div' &&\n      'props' in result &&\n      Fragment\n    ) {\n      // `children` does exist.\n      // type-coverage:ignore-next-line\n      result = createElement(Fragment, {}, result.props.children)\n    }\n\n    return result\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}