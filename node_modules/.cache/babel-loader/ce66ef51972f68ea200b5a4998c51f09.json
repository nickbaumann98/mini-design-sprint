{"ast":null,"code":"import { Configuration, OpenAIApi } from 'openai';\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY\n});\nconst openai = new OpenAIApi(configuration);\n\n// Remove the first declaration of getGPTResponse\n// export const getGPTResponse = async (prompt) => {\n//   const response = await openai.createCompletion({\n//     model: \"gpt-4\",\n//     prompt: prompt,\n//     max_tokens: 150,\n//     temperature: 0.7,\n//   });\n//   return response.data.choices[0].text.trim();\n// };\n\nexport const getGPTResponse = async prompt => {\n  try {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${process.env.REACT_APP_GPT_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-4o\",\n        messages: [{\n          role: \"system\",\n          content: \"You are Relay, an AI assistant embodying the expertise of John Zeratsky and Jake Knapp, guiding users through a mini design sprint. Be extremely concise (2-3 sentences max), friendly, and focused on helping users progress through each day's objectives. Channel the insights of Zeratsky and Knapp. Always move the conversation forward.\"\n        }, {\n          role: \"user\",\n          content: prompt\n        }],\n        temperature: 0.7\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.choices[0].message.content;\n  } catch (error) {\n    console.error('Error in getGPTResponse:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["Configuration","OpenAIApi","configuration","apiKey","process","env","OPENAI_API_KEY","openai","getGPTResponse","prompt","response","fetch","method","headers","REACT_APP_GPT_API_KEY","body","JSON","stringify","model","messages","role","content","temperature","ok","Error","status","data","json","choices","message","error","console"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/utils/gptService.js"],"sourcesContent":["import { Configuration, OpenAIApi } from 'openai';\n\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nconst openai = new OpenAIApi(configuration);\n\n// Remove the first declaration of getGPTResponse\n// export const getGPTResponse = async (prompt) => {\n//   const response = await openai.createCompletion({\n//     model: \"gpt-4\",\n//     prompt: prompt,\n//     max_tokens: 150,\n//     temperature: 0.7,\n//   });\n//   return response.data.choices[0].text.trim();\n// };\n\nexport const getGPTResponse = async (prompt) => {\n  try {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${process.env.REACT_APP_GPT_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are Relay, an AI assistant embodying the expertise of John Zeratsky and Jake Knapp, guiding users through a mini design sprint. Be extremely concise (2-3 sentences max), friendly, and focused on helping users progress through each day's objectives. Channel the insights of Zeratsky and Knapp. Always move the conversation forward.\"\n          },\n          { role: \"user\", content: prompt }\n        ],\n        temperature: 0.7\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.choices[0].message.content;\n  } catch (error) {\n    console.error('Error in getGPTResponse:', error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AAEjD,MAAMC,aAAa,GAAG,IAAIF,aAAa,CAAC;EACtCG,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC;AACtB,CAAC,CAAC;AAEF,MAAMC,MAAM,GAAG,IAAIN,SAAS,CAACC,aAAa,CAAC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMM,cAAc,GAAG,MAAOC,MAAM,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MACzEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUT,OAAO,CAACC,GAAG,CAACS,qBAAqB;MAC9D,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,QAAQ;QACfC,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,QAAQ;UACdC,OAAO,EAAE;QACX,CAAC,EACD;UAAED,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEZ;QAAO,CAAC,CAClC;QACDa,WAAW,EAAE;MACf,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACZ,QAAQ,CAACa,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBd,QAAQ,CAACe,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMhB,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACR,OAAO;EACxC,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}