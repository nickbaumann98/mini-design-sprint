{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js\";\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\nimport { createSprintDay, states } from './sprintStateMachine';\n\n// Styled components remain the same\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #1e1e1e;\n  border-radius: 8px;\n  padding: 1.5rem;\n  font-family: 'Roboto', sans-serif;\n  height: 60vh;\n  overflow-y: auto;\n`;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#2a2a2a'};\n  color: #ffffff;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 80%;\n`;\nconst RelayIcon = styled.span`\n  color: #3c8ce7;\n  margin-right: 0.5rem;\n`;\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n  align-items: flex-end;\n`;\nconst Input = styled.textarea`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #2a2a2a;\n  color: #ffffff;\n  resize: none;\n  min-height: 40px;\n  overflow-y: hidden;\n`;\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n  height: 40px;\n`;\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 1rem;\n`;\nconst MoreInfoButton = styled.button`\n  background-color: transparent;\n  color: #3c8ce7;\n  border: 1px solid #3c8ce7;\n  padding: 5px 10px;\n  font-size: 0.8rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-top: 0.5rem;\n`;\nconst parseMarkdown = markdown => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = source => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\nconst AIChat = ({\n  day,\n  onUpdateDeliverable,\n  onNextDay\n}) => {\n  const sprintDay = createSprintDay(day);\n  const [currentState, setCurrentState] = useState(sprintDay.initialState);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [dayData, setDayData] = useState({});\n  const inputRef = useRef(null);\n  useEffect(() => {\n    const initialPrompt = `Welcome to Day ${day} of the mini design sprint! Our goal today is to ${sprintGuidance[day].goal}. Let's start by ${sprintDay.prompts[currentState]}`;\n    setMessages([{\n      text: initialPrompt,\n      isUser: false\n    }]);\n  }, [day, currentState]);\n  const getAIResponse = useCallback(async (prompt, currentDay) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay, messages, currentState, dayData));\n      const aiMessage = {\n        text: aiResponse,\n        isUser: false\n      };\n      setMessages(prev => [...prev, aiMessage]);\n      const nextState = sprintDay.transitions[currentState];\n      if (nextState) {\n        setCurrentState(nextState);\n        if (nextState === states.COMPLETED) {\n          const deliverable = summarizeDay(dayData);\n          onUpdateDeliverable(currentDay, deliverable);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        text: \"I'm having trouble processing that. Let's try a different approach. \" + getSprintTip(day),\n        isUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentState, sprintDay, onUpdateDeliverable, day, messages, dayData]);\n  const handleSend = async () => {\n    if (input.trim() && !isLoading) {\n      const userMessage = {\n        text: input,\n        isUser: true\n      };\n      setMessages(prev => [...prev, userMessage]);\n      setDayData(prev => ({\n        ...prev,\n        [currentState]: input\n      }));\n      const currentInput = input;\n      setInput('');\n      await getAIResponse(currentInput, day);\n    }\n  };\n  const handleInputChange = e => {\n    setInput(e.target.value);\n    e.target.style.height = 'auto';\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n  const handleNextDay = () => {\n    onNextDay();\n  };\n  const handleMoreInfo = () => {\n    getAIResponse(\"Can you elaborate on that?\", day);\n  };\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.style.height = 'auto';\n      inputRef.current.style.height = `${inputRef.current.scrollHeight}px`;\n    }\n  }, [input]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChatContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(Message, {\n    key: index,\n    isUser: message.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, !message.isUser && /*#__PURE__*/React.createElement(RelayIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 33\n    }\n  }, \":-) Relay\"), parseMarkdown(message.text)))), /*#__PURE__*/React.createElement(InputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: inputRef,\n    value: input,\n    onChange: handleInputChange,\n    onKeyPress: handleKeyPress,\n    placeholder: \"Type your message...\",\n    disabled: isLoading || currentState === states.COMPLETED,\n    rows: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SendButton, {\n    onClick: handleSend,\n    disabled: isLoading || currentState === states.COMPLETED,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, isLoading ? 'Thinking...' : 'Send')), currentState === states.COMPLETED && /*#__PURE__*/React.createElement(NextDayButton, {\n    onClick: handleNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, \"Move to Day \", day + 1));\n};\nconst getAIPrompt = (userInput, day, context, currentState, dayData) => {\n  var _context;\n  const {\n    goal,\n    tasks\n  } = sprintGuidance[day];\n  const lastUserMessage = ((_context = context[context.length - 1]) === null || _context === void 0 ? void 0 : _context.text) || '';\n  return `Day ${day}, state: ${currentState}. Goal: ${goal}. \n  Current data: ${JSON.stringify(dayData)}. \n  User input: \"${lastUserMessage}\".\n  If the response is sufficient, move to the next state. If not, explain why and ask for specific information.\n  Be concise and direct. Respond in 1-2 sentences max.`;\n};\nconst summarizeDay = dayData => {\n  return Object.entries(dayData).map(([key, value]) => `${key}: ${value}`).join('\\n');\n};\nexport default AIChat;","map":{"version":3,"names":["React","useState","useCallback","useRef","useEffect","styled","SimpleMarkdown","getGPTResponse","sprintGuidance","getSprintTip","createSprintDay","states","ChatContainer","div","Message","props","isUser","RelayIcon","span","InputContainer","Input","textarea","SendButton","button","NextDayButton","MoreInfoButton","parseMarkdown","markdown","rawBuiltParser","parserFor","defaultRules","parser","source","blockSource","reactOutput","reactFor","ruleOutput","AIChat","day","onUpdateDeliverable","onNextDay","sprintDay","currentState","setCurrentState","initialState","messages","setMessages","input","setInput","isLoading","setIsLoading","dayData","setDayData","inputRef","initialPrompt","goal","prompts","text","getAIResponse","prompt","currentDay","aiResponse","getAIPrompt","aiMessage","prev","nextState","transitions","COMPLETED","deliverable","summarizeDay","error","console","handleSend","trim","userMessage","currentInput","handleInputChange","e","target","value","style","height","scrollHeight","handleKeyPress","key","shiftKey","preventDefault","handleNextDay","handleMoreInfo","current","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","ref","onChange","onKeyPress","placeholder","disabled","rows","onClick","userInput","context","_context","tasks","lastUserMessage","length","JSON","stringify","Object","entries","join"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js"],"sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\nimport { createSprintDay, states } from './sprintStateMachine';\n\n// Styled components remain the same\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #1e1e1e;\n  border-radius: 8px;\n  padding: 1.5rem;\n  font-family: 'Roboto', sans-serif;\n  height: 60vh;\n  overflow-y: auto;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#2a2a2a'};\n  color: #ffffff;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 80%;\n`;\n\nconst RelayIcon = styled.span`\n  color: #3c8ce7;\n  margin-right: 0.5rem;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n  align-items: flex-end;\n`;\n\nconst Input = styled.textarea`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #2a2a2a;\n  color: #ffffff;\n  resize: none;\n  min-height: 40px;\n  overflow-y: hidden;\n`;\n\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n  height: 40px;\n`;\n\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 1rem;\n`;\n\nconst MoreInfoButton = styled.button`\n  background-color: transparent;\n  color: #3c8ce7;\n  border: 1px solid #3c8ce7;\n  padding: 5px 10px;\n  font-size: 0.8rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-top: 0.5rem;\n`;\n\nconst parseMarkdown = (markdown) => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = (source) => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\n\nconst AIChat = ({ day, onUpdateDeliverable, onNextDay }) => {\n  const sprintDay = createSprintDay(day);\n  const [currentState, setCurrentState] = useState(sprintDay.initialState);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [dayData, setDayData] = useState({});\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    const initialPrompt = `Welcome to Day ${day} of the mini design sprint! Our goal today is to ${sprintGuidance[day].goal}. Let's start by ${sprintDay.prompts[currentState]}`;\n    setMessages([{ text: initialPrompt, isUser: false }]);\n  }, [day, currentState]);\n\n  const getAIResponse = useCallback(async (prompt, currentDay) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay, messages, currentState, dayData));\n      const aiMessage = { text: aiResponse, isUser: false };\n      setMessages(prev => [...prev, aiMessage]);\n\n      const nextState = sprintDay.transitions[currentState];\n      if (nextState) {\n        setCurrentState(nextState);\n        if (nextState === states.COMPLETED) {\n          const deliverable = summarizeDay(dayData);\n          onUpdateDeliverable(currentDay, deliverable);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, { \n        text: \"I'm having trouble processing that. Let's try a different approach. \" + getSprintTip(day), \n        isUser: false \n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentState, sprintDay, onUpdateDeliverable, day, messages, dayData]);\n\n  const handleSend = async () => {\n    if (input.trim() && !isLoading) {\n      const userMessage = { text: input, isUser: true };\n      setMessages(prev => [...prev, userMessage]);\n      setDayData(prev => ({...prev, [currentState]: input}));\n      const currentInput = input;\n      setInput('');\n      await getAIResponse(currentInput, day);\n    }\n  };\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n    e.target.style.height = 'auto';\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  const handleNextDay = () => {\n    onNextDay();\n  };\n\n  const handleMoreInfo = () => {\n    getAIResponse(\"Can you elaborate on that?\", day);\n  };\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.style.height = 'auto';\n      inputRef.current.style.height = `${inputRef.current.scrollHeight}px`;\n    }\n  }, [input]);\n\n  return (\n    <>\n      <ChatContainer>\n        {messages.map((message, index) => (\n          <Message key={index} isUser={message.isUser}>\n            {!message.isUser && <RelayIcon>:-) Relay</RelayIcon>}\n            {parseMarkdown(message.text)}\n          </Message>\n        ))}\n      </ChatContainer>\n      <InputContainer>\n        <Input\n          ref={inputRef}\n          value={input}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Type your message...\"\n          disabled={isLoading || currentState === states.COMPLETED}\n          rows={1}\n        />\n        <SendButton onClick={handleSend} disabled={isLoading || currentState === states.COMPLETED}>\n          {isLoading ? 'Thinking...' : 'Send'}\n        </SendButton>\n      </InputContainer>\n      {currentState === states.COMPLETED && (\n        <NextDayButton onClick={handleNextDay}>\n          Move to Day {day + 1}\n        </NextDayButton>\n      )}\n    </>\n  );\n};\n\nconst getAIPrompt = (userInput, day, context, currentState, dayData) => {\n  const { goal, tasks } = sprintGuidance[day];\n  const lastUserMessage = context[context.length - 1]?.text || '';\n  \n  return `Day ${day}, state: ${currentState}. Goal: ${goal}. \n  Current data: ${JSON.stringify(dayData)}. \n  User input: \"${lastUserMessage}\".\n  If the response is sufficient, move to the next state. If not, explain why and ask for specific information.\n  Be concise and direct. Respond in 1-2 sentences max.`;\n};\n\nconst summarizeDay = (dayData) => {\n  return Object.entries(dayData)\n    .map(([key, value]) => `${key}: ${value}`)\n    .join('\\n');\n};\n\nexport default AIChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}