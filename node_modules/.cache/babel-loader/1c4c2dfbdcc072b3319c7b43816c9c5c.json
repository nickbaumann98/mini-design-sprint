{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport { FaPaperPlane } from 'react-icons/fa'; // Ensure react-icons is installed\n\n// Styling for the container, conversation box, and input box\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\nconst ConversationBox = styled.div`\n  flex-grow: 1;\n  overflow-y: auto;\n  border: 1px solid #3c8ce7;\n  padding: 10px;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n`;\nconst Input = styled.textarea`\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-radius: 5px;\n  background-color: #3a3a3a;\n  color: #e0e0e0;\n  resize: none; /* Prevent resize by user */\n  overflow: hidden; /* Hide scroll bar */\n`;\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 10px;\n`;\nconst InputBox = styled.div`\n  display: flex;\n  padding: 10px;\n  border-top: 1px solid #3c8ce7;\n  background-color: #2a2a2a;\n  align-items: center;\n`;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#3a3a3a'};\n  color: #e0e0e0;\n  padding: 10px;\n  border-radius: 15px;\n  margin-bottom: 10px;\n  max-width: 70%;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n  word-wrap: break-word; /* Ensure long words break */\n`;\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\nconst CopyButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n`;\nconst Timer = styled.div`\n  font-size: 2rem;\n  text-align: center;\n  margin: 1rem 0;\n`;\nconst CrazyEightContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst CrazyEightInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\nconst CrazyEightInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  margin-bottom: 0.5rem;\n  border: 1px solid #3c8ce7;\n  border-radius: 5px;\n`;\nconst StoryboardContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst StoryboardInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\nconst StoryboardSection = styled.textarea`\n  width: 100%;\n  height: 150px;\n  margin-top: 1rem;\n  padding: 0.5rem;\n  border-radius: 5px;\n`;\nconst PrototypeSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst InteractionSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst ToggleSidebarButton = styled.button`\n  position: fixed;\n  top: 10px;\n  right: ${props => props.isSidebarOpen ? '310px' : '10px'};\n  background-color: transparent;\n  color: #3c8ce7;\n  border: none;\n  font-size: 1.5rem;\n  cursor: pointer;\n  z-index: 1000;\n`;\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [isTyping, setIsTyping] = useState(false);\n  const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n  const [timerSeconds, setTimerSeconds] = useState(480);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [crazyEightIdeas, setCrazyEightIdeas] = useState(Array(8).fill(''));\n  const [storyboardSections, setStoryboardSections] = useState(['', '', '']);\n  const [prototypeData, setPrototypeData] = useState({\n    coreElements: '',\n    structureFlow: '',\n    interactionsProcesses: ''\n  });\n  const [testingScenario, setTestingScenario] = useState('');\n  const [userInteraction, setUserInteraction] = useState('');\n  const [analysisNotes, setAnalysisNotes] = useState('');\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const conversationEndRef = useRef(null);\n  const scrollToBottom = useCallback(() => {\n    if (conversationEndRef.current) {\n      conversationEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, []);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n  const moveToNextDay = useCallback(() => {\n    setCurrentDay(prev => {\n      const nextDay = Math.min(prev + 1, 5);\n      setIsReadyForNextDay(false);\n      if (prev === 2) {\n        setCrazyEightIdeas(Array(8).fill(''));\n      } else if (prev === 3) {\n        setStoryboardSections(['', '', '']);\n      }\n      setIsTimerRunning(false);\n      setTimerSeconds(480);\n      return nextDay;\n    });\n  }, []);\n  const checkDayCompletion = useCallback(() => {\n    var _sprintData$, _sprintData$2;\n    let isComplete = false;\n    switch (currentDay) {\n      case 1:\n        isComplete = ((_sprintData$ = sprintData[1]) === null || _sprintData$ === void 0 ? void 0 : _sprintData$[\"Long-term Goal\"]) && ((_sprintData$2 = sprintData[1]) === null || _sprintData$2 === void 0 ? void 0 : _sprintData$2[\"Critical Questions\"]);\n        break;\n      case 2:\n        isComplete = crazyEightIdeas.every(idea => idea.trim() !== '');\n        break;\n      case 3:\n        isComplete = storyboardSections.every(section => section.trim() !== '');\n        break;\n      case 4:\n        isComplete = Object.values(prototypeData).every(value => value.trim() !== '');\n        break;\n      case 5:\n        isComplete = testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '';\n        break;\n      default:\n        isComplete = false;\n    }\n    setIsReadyForNextDay(isComplete);\n  }, [currentDay, sprintData, crazyEightIdeas, storyboardSections, prototypeData, testingScenario, userInteraction, analysisNotes]);\n  useEffect(() => {\n    let interval;\n    if (isTimerRunning && timerSeconds > 0) {\n      interval = setInterval(() => {\n        setTimerSeconds(seconds => seconds - 1);\n      }, 1000);\n    } else if (timerSeconds === 0) {\n      setIsTimerRunning(false);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerRunning, timerSeconds]);\n  const getInitialPrompt = useCallback(() => {\n    switch (currentDay) {\n      case 1:\n        return `Welcome to our AI-powered Mini Design Sprint! I'm Relay, your guide through this condensed version of Jake Knapp and John Zeratsky's methodology. Over the next five short sessions, we'll rapidly innovate and prototype your idea. You can ask me questions at any time during the sprint.\n\n    Let's begin Day 1 by addressing three key points:\n    1. What problem are you trying to solve?\n    2. What's your long-term goal for this project?\n    3. What are the critical questions we need to answer?\n\n    First, tell me about the problem you're addressing. What challenges are you facing?`;\n      case 2:\n        return `Welcome to Day 2! Today, we'll generate ideas using the Crazy 8s method. Are you ready to start the timer and brainstorm 8 ideas in 8 minutes?`;\n      case 3:\n        return `It's Day 3! Let's create a three-panel storyboard for your chosen solution. Start by describing the problem or starting point in the first panel.`;\n      case 4:\n        return `Welcome to Day 4. Today, we'll design a conceptual prototype. Begin by describing the core elements of your solution.`;\n      case 5:\n        return `It's the final day! We'll conduct simulated user testing. Start by describing a testing scenario for your prototype.`;\n      default:\n        return `Welcome to Day ${currentDay} of the Design Sprint.`;\n    }\n  }, [currentDay]);\n  useEffect(() => {\n    const loadInitialPrompt = async () => {\n      setIsTyping(true);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setIsTyping(false);\n      const initialPrompt = getInitialPrompt();\n      setMessages([{\n        isUser: false,\n        text: initialPrompt\n      }]);\n    };\n    loadInitialPrompt();\n  }, [currentDay, getInitialPrompt]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const userMessage = {\n      isUser: true,\n      text: input\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsTyping(true);\n    try {\n      const context = messages.map(m => `${m.isUser ? 'User' : 'Relay'}: ${m.text}`).join('\\n');\n      let prompt;\n      if (currentDay === 1) {\n        var _sprintData$3, _sprintData$4;\n        if (!((_sprintData$3 = sprintData[1]) === null || _sprintData$3 === void 0 ? void 0 : _sprintData$3.problem)) {\n          prompt = `The user described this problem: \"${input}\". Acknowledge it and ask for their long-term goal.`;\n        } else if (!((_sprintData$4 = sprintData[1]) === null || _sprintData$4 === void 0 ? void 0 : _sprintData$4[\"Long-term Goal\"])) {\n          prompt = `The user's long-term goal is: \"${input}\". Acknowledge this goal and ask for 2-3 critical questions related to achieving this goal.`;\n        } else {\n          prompt = `The user's critical questions are: \"${input}\". Summarize the day's progress and ask if they're ready to move to Day 2.`;\n        }\n      } else {\n        prompt = `Day ${currentDay} of Design Sprint. Context: ${context}\\nUser: ${input}\\n${getCurrentPrompt()}`;\n      }\n      const response = await getGPTResponse(prompt);\n      const aiMessage = {\n        isUser: false,\n        text: response\n      };\n      setMessages(prev => [...prev, aiMessage]);\n      updateSprintData(input, response);\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        isUser: false,\n        text: \"I'm having trouble right now. Please try again.\"\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      handleSubmit(e);\n    }\n  };\n  const updateSprintData = (input, response) => {\n    setSprintData(prev => {\n      const updatedData = {\n        ...prev\n      };\n      if (!updatedData[currentDay]) {\n        updatedData[currentDay] = {};\n      }\n      if (currentDay === 1) {\n        if (!updatedData[1][\"Long-term Goal\"]) {\n          updatedData[1][\"Long-term Goal\"] = input;\n        } else if (!updatedData[1][\"Critical Questions\"]) {\n          updatedData[1][\"Critical Questions\"] = input;\n        }\n      } else {\n        updatedData[currentDay][`Input ${Object.keys(updatedData[currentDay]).length + 1}`] = input;\n        updatedData[currentDay][`Response ${Object.keys(updatedData[currentDay]).length + 1}`] = response;\n      }\n      return updatedData;\n    });\n    checkDayCompletion();\n  };\n  const submitCrazyEight = async () => {\n    if (crazyEightIdeas.every(idea => idea.trim() !== '')) {\n      setIsTyping(true);\n      const ideasString = crazyEightIdeas.map((idea, index) => `Idea ${index + 1}: ${idea}`).join('\\n');\n      const prompt = `The user has completed the Crazy 8s exercise with the following ideas:\\n${ideasString}\\nPlease provide a brief analysis and feedback on these ideas, highlighting any particularly promising concepts or areas for further exploration.`;\n      try {\n        const response = await getGPTResponse(prompt);\n        setMessages(prev => [...prev, {\n          isUser: false,\n          text: response\n        }]);\n        setSprintData(prev => ({\n          ...prev,\n          2: {\n            \"Crazy 8s\": crazyEightIdeas,\n            \"Feedback\": response\n          }\n        }));\n        setIsReadyForNextDay(true);\n      } catch (error) {\n        setMessages(prev => [...prev, {\n          isUser: false,\n          text: \"I'm having trouble providing feedback on your Crazy 8 ideas. Please try submitting again.\"\n        }]);\n      } finally {\n        setIsTyping(false);\n      }\n    } else {\n      alert(\"Please complete all 8 ideas before submitting.\");\n    }\n  };\n  const updateCrazyEightIdea = (index, value) => {\n    const newIdeas = [...crazyEightIdeas];\n    newIdeas[index] = value;\n    setCrazyEightIdeas(newIdeas);\n  };\n  const updateStoryboardSection = (index, value) => {\n    const newSections = [...storyboardSections];\n    newSections[index] = value;\n    setStoryboardSections(newSections);\n    checkDayCompletion();\n  };\n  const updatePrototypeData = (key, value) => {\n    setPrototypeData(prev => ({\n      ...prev,\n      [key]: value\n    }));\n    checkDayCompletion();\n  };\n  const startTimer = () => {\n    setIsTimerRunning(true);\n    setTimerSeconds(480);\n  };\n  const conductSimulatedInteraction = async () => {\n    setIsTyping(true);\n    const prompt = `You are a potential user interacting with the following product prototype: ${JSON.stringify(prototypeData)}. Please provide realistic responses and actions based on this testing scenario: ${testingScenario}`;\n    try {\n      const response = await getGPTResponse(prompt);\n      setUserInteraction(response);\n      setMessages(prev => [...prev, {\n        isUser: false,\n        text: response\n      }]);\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        isUser: false,\n        text: \"Error: Unable to conduct simulated interaction.\"\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  return /*#__PURE__*/React.createElement(SprintContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MainContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 17\n    }\n  }, `Day ${currentDay}: ${sprintGuidance[currentDay].goal}`), /*#__PURE__*/React.createElement(ConversationBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 17\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(Message, {\n    key: index,\n    isUser: message.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 25\n    }\n  }, message.isUser ? 'You: ' : 'Relay: ', message.text)), isTyping && /*#__PURE__*/React.createElement(TypingIndicator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 34\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 51\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 64\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 77\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    ref: conversationEndRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(InputBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: input,\n    onChange: e => setInput(e.target.value),\n    onKeyDown: handleKeyDown,\n    placeholder: \"Type your message here...\",\n    rows: 1,\n    onInput: e => {\n      e.target.style.height = 'auto';\n      e.target.style.height = `${e.target.scrollHeight}px`;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(SendButton, {\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FaPaperPlane, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 25\n    }\n  }))), currentDay === 2 && /*#__PURE__*/React.createElement(CrazyEightContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CrazyEightInstructions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 25\n    }\n  }, \"Crazy 8s is a fast sketching exercise where you'll create 8 distinct ideas in 8 minutes. The goal is to push beyond your first idea and generate a wide range of possibilities. Don't worry about quality or feasibility at this stage - focus on quantity and variety!\"), /*#__PURE__*/React.createElement(CopyButton, {\n    onClick: startTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 25\n    }\n  }, \"Start Crazy 8s Timer\"), /*#__PURE__*/React.createElement(Timer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 25\n    }\n  }, Math.floor(timerSeconds / 60), \":\", (timerSeconds % 60).toString().padStart(2, '0')), crazyEightIdeas.map((idea, index) => /*#__PURE__*/React.createElement(CrazyEightInput, {\n    key: index,\n    value: idea,\n    onChange: e => updateCrazyEightIdea(index, e.target.value),\n    placeholder: `Crazy 8s Idea ${index + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(SendButton, {\n    onClick: submitCrazyEight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 25\n    }\n  }, \"Submit Crazy 8s Ideas for Feedback\")), currentDay === 3 && /*#__PURE__*/React.createElement(StoryboardContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(StoryboardInstructions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 25\n    }\n  }, \"Create a three-panel storyboard that outlines your chosen solution. Each panel should represent a key step or moment in your solution: 1. The problem or starting point 2. The main action or change 3. The result or outcome Describe each panel in detail, focusing on what the user sees and does.\"), storyboardSections.map((section, index) => /*#__PURE__*/React.createElement(StoryboardSection, {\n    key: index,\n    value: section,\n    onChange: e => updateStoryboardSection(index, e.target.value),\n    placeholder: `Panel ${index + 1}: ${index === 0 ? \"Describe the problem or starting point\" : index === 1 ? \"Detail the main action or change\" : \"Illustrate the result or outcome\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 29\n    }\n  }))), currentDay === 4 && /*#__PURE__*/React.createElement(PrototypeSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 25\n    }\n  }, \"Design Your Conceptual Prototype\"), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: prototypeData.coreElements,\n    onChange: e => updatePrototypeData('coreElements', e.target.value),\n    placeholder: \"Describe core elements...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: prototypeData.structureFlow,\n    onChange: e => updatePrototypeData('structureFlow', e.target.value),\n    placeholder: \"Outline structure or flow...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: prototypeData.interactionsProcesses,\n    onChange: e => updatePrototypeData('interactionsProcesses', e.target.value),\n    placeholder: \"Detail interactions or processes...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 25\n    }\n  })), currentDay === 5 && /*#__PURE__*/React.createElement(InteractionSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 25\n    }\n  }, \"Simulated User/Stakeholder Testing\"), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: testingScenario,\n    onChange: e => setTestingScenario(e.target.value),\n    placeholder: \"Describe a testing scenario for your prototype...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(CopyButton, {\n    onClick: conductSimulatedInteraction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 25\n    }\n  }, \"Simulate User Interaction\"), userInteraction && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 33\n    }\n  }, \"Simulated User Interaction:\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 33\n    }\n  }, userInteraction)), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: analysisNotes,\n    onChange: e => setAnalysisNotes(e.target.value),\n    placeholder: \"Analyze the simulated feedback and consider potential iterations...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 25\n    }\n  })), isReadyForNextDay && currentDay < 5 && /*#__PURE__*/React.createElement(NextDayButton, {\n    onClick: moveToNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 21\n    }\n  }, \"Move to Day \", currentDay + 1)), isSidebarOpen && /*#__PURE__*/React.createElement(OutputSidebar, {\n    sprintData: sprintData,\n    currentDay: currentDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ToggleSidebarButton, {\n    onClick: () => setIsSidebarOpen(!isSidebarOpen),\n    isSidebarOpen: isSidebarOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 13\n    }\n  }, isSidebarOpen ? '×' : '☰'));\n};\nexport default DaySprint;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","styled","keyframes","getGPTResponse","sprintGuidance","OutputSidebar","FaPaperPlane","SprintContainer","div","MainContent","Header","h1","ConversationBox","Input","textarea","SendButton","button","InputBox","Message","props","isUser","typing","TypingIndicator","NextDayButton","CopyButton","Timer","CrazyEightContainer","CrazyEightInstructions","p","CrazyEightInput","input","StoryboardContainer","StoryboardInstructions","StoryboardSection","PrototypeSection","InteractionSection","ToggleSidebarButton","isSidebarOpen","DaySprint","currentDay","setCurrentDay","messages","setMessages","setInput","sprintData","setSprintData","isTyping","setIsTyping","isReadyForNextDay","setIsReadyForNextDay","timerSeconds","setTimerSeconds","isTimerRunning","setIsTimerRunning","crazyEightIdeas","setCrazyEightIdeas","Array","fill","storyboardSections","setStoryboardSections","prototypeData","setPrototypeData","coreElements","structureFlow","interactionsProcesses","testingScenario","setTestingScenario","userInteraction","setUserInteraction","analysisNotes","setAnalysisNotes","setIsSidebarOpen","conversationEndRef","scrollToBottom","current","scrollIntoView","behavior","getCurrentPrompt","prompt","getCurrentObjectives","objectives","moveToNextDay","prev","nextDay","Math","min","checkDayCompletion","_sprintData$","_sprintData$2","isComplete","every","idea","trim","section","Object","values","value","interval","setInterval","seconds","clearInterval","getInitialPrompt","loadInitialPrompt","Promise","resolve","setTimeout","initialPrompt","text","handleSubmit","e","preventDefault","userMessage","context","map","m","join","_sprintData$3","_sprintData$4","problem","response","aiMessage","updateSprintData","error","console","handleKeyDown","key","shiftKey","updatedData","keys","length","submitCrazyEight","ideasString","index","alert","updateCrazyEightIdea","newIdeas","updateStoryboardSection","newSections","updatePrototypeData","startTimer","conductSimulatedInteraction","JSON","stringify","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","goal","message","ref","onChange","target","onKeyDown","placeholder","rows","onInput","style","height","scrollHeight","onClick","floor","toString","padStart","Fragment"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport { FaPaperPlane } from 'react-icons/fa'; // Ensure react-icons is installed\n\n// Styling for the container, conversation box, and input box\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\n\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\n\nconst ConversationBox = styled.div`\n  flex-grow: 1;\n  overflow-y: auto;\n  border: 1px solid #3c8ce7;\n  padding: 10px;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Input = styled.textarea`\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-radius: 5px;\n  background-color: #3a3a3a;\n  color: #e0e0e0;\n  resize: none; /* Prevent resize by user */\n  overflow: hidden; /* Hide scroll bar */\n`;\n\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 10px;\n`;\n\nconst InputBox = styled.div`\n  display: flex;\n  padding: 10px;\n  border-top: 1px solid #3c8ce7;\n  background-color: #2a2a2a;\n  align-items: center;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#3a3a3a'};\n  color: #e0e0e0;\n  padding: 10px;\n  border-radius: 15px;\n  margin-bottom: 10px;\n  max-width: 70%;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n  word-wrap: break-word; /* Ensure long words break */\n`;\n\n\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\n\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\n\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\n\nconst CopyButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n`;\n\nconst Timer = styled.div`\n  font-size: 2rem;\n  text-align: center;\n  margin: 1rem 0;\n`;\n\nconst CrazyEightContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst CrazyEightInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\n\nconst CrazyEightInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  margin-bottom: 0.5rem;\n  border: 1px solid #3c8ce7;\n  border-radius: 5px;\n`;\n\nconst StoryboardContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst StoryboardInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\n\nconst StoryboardSection = styled.textarea`\n  width: 100%;\n  height: 150px;\n  margin-top: 1rem;\n  padding: 0.5rem;\n  border-radius: 5px;\n`;\n\nconst PrototypeSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst InteractionSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst ToggleSidebarButton = styled.button`\n  position: fixed;\n  top: 10px;\n  right: ${props => props.isSidebarOpen ? '310px' : '10px'};\n  background-color: transparent;\n  color: #3c8ce7;\n  border: none;\n  font-size: 1.5rem;\n  cursor: pointer;\n  z-index: 1000;\n`;\n\nconst DaySprint = () => {\n    const [currentDay, setCurrentDay] = useState(1);\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState('');\n    const [sprintData, setSprintData] = useState({});\n    const [isTyping, setIsTyping] = useState(false);\n    const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n    const [timerSeconds, setTimerSeconds] = useState(480);\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\n    const [crazyEightIdeas, setCrazyEightIdeas] = useState(Array(8).fill(''));\n    const [storyboardSections, setStoryboardSections] = useState(['', '', '']);\n    const [prototypeData, setPrototypeData] = useState({ coreElements: '', structureFlow: '', interactionsProcesses: '' });\n    const [testingScenario, setTestingScenario] = useState('');\n    const [userInteraction, setUserInteraction] = useState('');\n    const [analysisNotes, setAnalysisNotes] = useState('');\n    const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n\n    const conversationEndRef = useRef(null);\n\n    const scrollToBottom = useCallback(() => {\n        if (conversationEndRef.current) {\n            conversationEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n        }\n    }, []);\n\n    useEffect(() => {\n        scrollToBottom();\n    }, [messages, scrollToBottom]);\n\n    const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n    const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n\n    const moveToNextDay = useCallback(() => {\n        setCurrentDay(prev => {\n            const nextDay = Math.min(prev + 1, 5);\n            setIsReadyForNextDay(false);\n            if (prev === 2) {\n                setCrazyEightIdeas(Array(8).fill(''));\n            } else if (prev === 3) {\n                setStoryboardSections(['', '', '']);\n            }\n            setIsTimerRunning(false);\n            setTimerSeconds(480);\n            return nextDay;\n        });\n    }, []);\n\n    const checkDayCompletion = useCallback(() => {\n        let isComplete = false;\n\n        switch (currentDay) {\n            case 1:\n                isComplete = sprintData[1]?.[\"Long-term Goal\"] && sprintData[1]?.[\"Critical Questions\"];\n                break;\n            case 2:\n                isComplete = crazyEightIdeas.every(idea => idea.trim() !== '');\n                break;\n            case 3:\n                isComplete = storyboardSections.every(section => section.trim() !== '');\n                break;\n            case 4:\n                isComplete = Object.values(prototypeData).every(value => value.trim() !== '');\n                break;\n            case 5:\n                isComplete = testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '';\n                break;\n            default:\n                isComplete = false;\n        }\n\n        setIsReadyForNextDay(isComplete);\n    }, [currentDay, sprintData, crazyEightIdeas, storyboardSections, prototypeData, testingScenario, userInteraction, analysisNotes]);\n\n    useEffect(() => {\n        let interval;\n        if (isTimerRunning && timerSeconds > 0) {\n            interval = setInterval(() => {\n                setTimerSeconds(seconds => seconds - 1);\n            }, 1000);\n        } else if (timerSeconds === 0) {\n            setIsTimerRunning(false);\n        }\n        return () => clearInterval(interval);\n    }, [isTimerRunning, timerSeconds]);\n\n    const getInitialPrompt = useCallback(() => {\n        switch(currentDay) {\n            case 1:\n                return `Welcome to our AI-powered Mini Design Sprint! I'm Relay, your guide through this condensed version of Jake Knapp and John Zeratsky's methodology. Over the next five short sessions, we'll rapidly innovate and prototype your idea. You can ask me questions at any time during the sprint.\n\n    Let's begin Day 1 by addressing three key points:\n    1. What problem are you trying to solve?\n    2. What's your long-term goal for this project?\n    3. What are the critical questions we need to answer?\n\n    First, tell me about the problem you're addressing. What challenges are you facing?`;\n            case 2:\n                return `Welcome to Day 2! Today, we'll generate ideas using the Crazy 8s method. Are you ready to start the timer and brainstorm 8 ideas in 8 minutes?`;\n            case 3:\n                return `It's Day 3! Let's create a three-panel storyboard for your chosen solution. Start by describing the problem or starting point in the first panel.`;\n            case 4:\n                return `Welcome to Day 4. Today, we'll design a conceptual prototype. Begin by describing the core elements of your solution.`;\n            case 5:\n                return `It's the final day! We'll conduct simulated user testing. Start by describing a testing scenario for your prototype.`;\n            default:\n                return `Welcome to Day ${currentDay} of the Design Sprint.`;\n        }\n    }, [currentDay]);\n\n    useEffect(() => {\n        const loadInitialPrompt = async () => {\n            setIsTyping(true);\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            setIsTyping(false);\n            const initialPrompt = getInitialPrompt();\n            setMessages([{ isUser: false, text: initialPrompt }]);\n        };\n\n        loadInitialPrompt();\n    }, [currentDay, getInitialPrompt]);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (!input.trim()) return;\n      \n        const userMessage = { isUser: true, text: input };\n        setMessages(prev => [...prev, userMessage]);\n        setInput('');\n        setIsTyping(true);\n      \n        try {\n          const context = messages.map(m => `${m.isUser ? 'User' : 'Relay'}: ${m.text}`).join('\\n');\n          let prompt;\n          if (currentDay === 1) {\n            if (!sprintData[1]?.problem) {\n              prompt = `The user described this problem: \"${input}\". Acknowledge it and ask for their long-term goal.`;\n            } else if (!sprintData[1]?.[\"Long-term Goal\"]) {\n              prompt = `The user's long-term goal is: \"${input}\". Acknowledge this goal and ask for 2-3 critical questions related to achieving this goal.`;\n            } else {\n              prompt = `The user's critical questions are: \"${input}\". Summarize the day's progress and ask if they're ready to move to Day 2.`;\n            }\n          } else {\n            prompt = `Day ${currentDay} of Design Sprint. Context: ${context}\\nUser: ${input}\\n${getCurrentPrompt()}`;\n          }\n          const response = await getGPTResponse(prompt);\n          \n          const aiMessage = { isUser: false, text: response };\n          setMessages(prev => [...prev, aiMessage]);\n          \n          updateSprintData(input, response);\n        } catch (error) {\n          console.error('Error getting AI response:', error);\n          setMessages(prev => [...prev, { isUser: false, text: \"I'm having trouble right now. Please try again.\" }]);\n        } finally {\n          setIsTyping(false);\n        }\n      };\n\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            handleSubmit(e);\n        }\n    };\n\n    const updateSprintData = (input, response) => {\n        setSprintData(prev => {\n            const updatedData = { ...prev };\n            if (!updatedData[currentDay]) {\n                updatedData[currentDay] = {};\n            }\n            if (currentDay === 1) {\n                if (!updatedData[1][\"Long-term Goal\"]) {\n                    updatedData[1][\"Long-term Goal\"] = input;\n                } else if (!updatedData[1][\"Critical Questions\"]) {\n                    updatedData[1][\"Critical Questions\"] = input;\n                }\n            } else {\n                updatedData[currentDay][`Input ${Object.keys(updatedData[currentDay]).length + 1}`] = input;\n                updatedData[currentDay][`Response ${Object.keys(updatedData[currentDay]).length + 1}`] = response;\n            }\n            return updatedData;\n        });\n        checkDayCompletion();\n    };\n\n    const submitCrazyEight = async () => {\n        if (crazyEightIdeas.every(idea => idea.trim() !== '')) {\n            setIsTyping(true);\n            const ideasString = crazyEightIdeas.map((idea, index) => `Idea ${index + 1}: ${idea}`).join('\\n');\n            const prompt = `The user has completed the Crazy 8s exercise with the following ideas:\\n${ideasString}\\nPlease provide a brief analysis and feedback on these ideas, highlighting any particularly promising concepts or areas for further exploration.`;\n\n            try {\n                const response = await getGPTResponse(prompt);\n                setMessages(prev => [...prev, { isUser: false, text: response }]);\n                setSprintData(prev => ({\n                    ...prev,\n                    2: {\n                        \"Crazy 8s\": crazyEightIdeas,\n                        \"Feedback\": response\n                    }\n                }));\n                setIsReadyForNextDay(true);\n            } catch (error) {\n                setMessages(prev => [...prev, { isUser: false, text: \"I'm having trouble providing feedback on your Crazy 8 ideas. Please try submitting again.\" }]);\n            } finally {\n                setIsTyping(false);\n            }\n        } else {\n            alert(\"Please complete all 8 ideas before submitting.\");\n        }\n    };\n\n    const updateCrazyEightIdea = (index, value) => {\n        const newIdeas = [...crazyEightIdeas];\n        newIdeas[index] = value;\n        setCrazyEightIdeas(newIdeas);\n    };\n\n    const updateStoryboardSection = (index, value) => {\n        const newSections = [...storyboardSections];\n        newSections[index] = value;\n        setStoryboardSections(newSections);\n        checkDayCompletion();\n    };\n\n    const updatePrototypeData = (key, value) => {\n        setPrototypeData(prev => ({ ...prev, [key]: value }));\n        checkDayCompletion();\n    };\n\n    const startTimer = () => {\n        setIsTimerRunning(true);\n        setTimerSeconds(480);\n    };\n\n    const conductSimulatedInteraction = async () => {\n        setIsTyping(true);\n        const prompt = `You are a potential user interacting with the following product prototype: ${JSON.stringify(prototypeData)}. Please provide realistic responses and actions based on this testing scenario: ${testingScenario}`;\n        try {\n            const response = await getGPTResponse(prompt);\n            setUserInteraction(response);\n            setMessages(prev => [...prev, { isUser: false, text: response }]);\n        } catch (error) {\n            setMessages(prev => [...prev, { isUser: false, text: \"Error: Unable to conduct simulated interaction.\" }]);\n        } finally {\n            setIsTyping(false);\n        }\n    };\n\n    return (\n        <SprintContainer>\n            <MainContent>\n                <Header>{`Day ${currentDay}: ${sprintGuidance[currentDay].goal}`}</Header>\n                <ConversationBox>\n                    {messages.map((message, index) => (\n                        <Message key={index} isUser={message.isUser}>\n                            {message.isUser ? 'You: ' : 'Relay: '}{message.text}\n                        </Message>\n                    ))}\n                    {isTyping && <TypingIndicator><span></span><span></span><span></span></TypingIndicator>}\n                    <div ref={conversationEndRef} />\n                </ConversationBox>\n                <InputBox>\n                    <Input\n                        value={input}\n                        onChange={(e) => setInput(e.target.value)}\n                        onKeyDown={handleKeyDown}\n                        placeholder=\"Type your message here...\"\n                        rows={1}\n                        onInput={(e) => {\n                            e.target.style.height = 'auto';\n                            e.target.style.height = `${e.target.scrollHeight}px`;\n                        }}\n                    />\n                    <SendButton onClick={handleSubmit}>\n                        <FaPaperPlane />\n                    </SendButton>\n                </InputBox>\n\n                {currentDay === 2 && (\n                    <CrazyEightContainer>\n                        <CrazyEightInstructions>\n                            Crazy 8s is a fast sketching exercise where you'll create 8 distinct ideas in 8 minutes.\n                            The goal is to push beyond your first idea and generate a wide range of possibilities.\n                            Don't worry about quality or feasibility at this stage - focus on quantity and variety!\n                        </CrazyEightInstructions>\n                        <CopyButton onClick={startTimer}>Start Crazy 8s Timer</CopyButton>\n                        <Timer>{Math.floor(timerSeconds / 60)}:{(timerSeconds % 60).toString().padStart(2, '0')}</Timer>\n                        {crazyEightIdeas.map((idea, index) => (\n                            <CrazyEightInput\n                                key={index}\n                                value={idea}\n                                onChange={(e) => updateCrazyEightIdea(index, e.target.value)}\n                                placeholder={`Crazy 8s Idea ${index + 1}`}\n                            />\n                        ))}\n                        <SendButton onClick={submitCrazyEight}>\n                            Submit Crazy 8s Ideas for Feedback\n                        </SendButton>\n                    </CrazyEightContainer>\n                )}\n                {currentDay === 3 && (\n                    <StoryboardContainer>\n                        <StoryboardInstructions>\n                            Create a three-panel storyboard that outlines your chosen solution. Each panel should represent a key step or moment in your solution:\n                            1. The problem or starting point\n                            2. The main action or change\n                            3. The result or outcome\n                            Describe each panel in detail, focusing on what the user sees and does.\n                        </StoryboardInstructions>\n                        {storyboardSections.map((section, index) => (\n                            <StoryboardSection\n                                key={index}\n                                value={section}\n                                onChange={(e) => updateStoryboardSection(index, e.target.value)}\n                                placeholder={`Panel ${index + 1}: ${index === 0 ? \"Describe the problem or starting point\" : index === 1 ? \"Detail the main action or change\" : \"Illustrate the result or outcome\"}`}\n                            />\n                        ))}\n                    </StoryboardContainer>\n                )}\n                {currentDay === 4 && (\n                    <PrototypeSection>\n                        <h3>Design Your Conceptual Prototype</h3>\n                        <StoryboardSection\n                            value={prototypeData.coreElements}\n                            onChange={(e) => updatePrototypeData('coreElements', e.target.value)}\n                            placeholder=\"Describe core elements...\"\n                        />\n                        <StoryboardSection\n                            value={prototypeData.structureFlow}\n                            onChange={(e) => updatePrototypeData('structureFlow', e.target.value)}\n                            placeholder=\"Outline structure or flow...\"\n                        />\n                        <StoryboardSection\n                            value={prototypeData.interactionsProcesses}\n                            onChange={(e) => updatePrototypeData('interactionsProcesses', e.target.value)}\n                            placeholder=\"Detail interactions or processes...\"\n                        />\n                    </PrototypeSection>\n                )}\n                {currentDay === 5 && (\n                    <InteractionSection>\n                        <h3>Simulated User/Stakeholder Testing</h3>\n                        <StoryboardSection\n                            value={testingScenario}\n                            onChange={(e) => setTestingScenario(e.target.value)}\n                            placeholder=\"Describe a testing scenario for your prototype...\"\n                        />\n                        <CopyButton onClick={conductSimulatedInteraction}>Simulate User Interaction</CopyButton>\n                        {userInteraction && (\n                            <>\n                                <h4>Simulated User Interaction:</h4>\n                                <p>{userInteraction}</p>\n                            </>\n                        )}\n                        <StoryboardSection\n                            value={analysisNotes}\n                            onChange={(e) => setAnalysisNotes(e.target.value)}\n                            placeholder=\"Analyze the simulated feedback and consider potential iterations...\"\n                        />\n                    </InteractionSection>\n                )}\n                {isReadyForNextDay && currentDay < 5 && (\n                    <NextDayButton onClick={moveToNextDay}>\n                        Move to Day {currentDay + 1}\n                    </NextDayButton>\n                )}\n            </MainContent>\n            {isSidebarOpen && (\n                <OutputSidebar\n                    sprintData={sprintData}\n                    currentDay={currentDay}\n                />\n            )}\n            <ToggleSidebarButton onClick={() => setIsSidebarOpen(!isSidebarOpen)} isSidebarOpen={isSidebarOpen}>\n    {isSidebarOpen ? '×' : '☰'}\n</ToggleSidebarButton>\n        </SprintContainer>\n    );\n};\n\nexport default DaySprint;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}