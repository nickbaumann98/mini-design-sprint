{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport InputWithSendIcon from './InputWithSendIcon';\n\n// Styled components (unchanged)\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\nconst AIMessage = styled.div`\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n  padding: 15px;\n  border-radius: 15px;\n  margin-bottom: 20px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  position: relative;\n  max-width: 80%;\n  align-self: flex-start;\n`;\nconst RelayIcon = styled.span`\n  font-weight: bold;\n  color: #3c8ce7;\n  margin-right: 5px;\n`;\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [input, setInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [isTyping, setIsTyping] = useState(true);\n  const [conversationLog, setConversationLog] = useState([]);\n  const [timerSeconds, setTimerSeconds] = useState(480); // 8 minutes\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [crazyEightIdeas, setCrazyEightIdeas] = useState(Array(8).fill(''));\n  const [storyboardSections, setStoryboardSections] = useState(['', '', '']);\n  const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n  const [prototypeData, setPrototypeData] = useState({\n    coreElements: '',\n    structureFlow: '',\n    interactionsProcesses: ''\n  });\n  const [testingScenario, setTestingScenario] = useState('');\n  const [userInteraction, setUserInteraction] = useState('');\n  const [analysisNotes, setAnalysisNotes] = useState('');\n  const [showQuestionInput, setShowQuestionInput] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const [showInput, setShowInput] = useState(false);\n  const [initialLoading, setInitialLoading] = useState(true);\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n  const moveToNextDay = useCallback(() => {\n    setCurrentDay(prev => {\n      const nextDay = Math.min(prev + 1, 5);\n      setFeedback('');\n      setIsReadyForNextDay(false);\n      setShowInput(true);\n      if (prev === 2) {\n        setCrazyEightIdeas(Array(8).fill(''));\n      } else if (prev === 3) {\n        setStoryboardSections(['', '', '']);\n      }\n      setIsTimerRunning(false);\n      setTimerSeconds(480);\n      return nextDay;\n    });\n  }, []);\n  const checkDayCompletion = useCallback(() => {\n    var _sprintData$, _sprintData$2;\n    let isComplete = false;\n    switch (currentDay) {\n      case 1:\n        isComplete = ((_sprintData$ = sprintData[1]) === null || _sprintData$ === void 0 ? void 0 : _sprintData$[\"Long-term Goal\"]) && ((_sprintData$2 = sprintData[1]) === null || _sprintData$2 === void 0 ? void 0 : _sprintData$2[\"Critical Questions\"]);\n        break;\n      case 2:\n        isComplete = crazyEightIdeas.every(idea => idea.trim() !== '');\n        break;\n      case 3:\n        isComplete = storyboardSections.every(section => section.trim() !== '');\n        break;\n      case 4:\n        isComplete = Object.values(prototypeData).every(value => value.trim() !== '');\n        break;\n      case 5:\n        isComplete = testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '';\n        break;\n      default:\n        isComplete = false;\n    }\n    setIsReadyForNextDay(isComplete);\n    setShowInput(!isComplete);\n  }, [currentDay, sprintData, crazyEightIdeas, storyboardSections, prototypeData, testingScenario, userInteraction, analysisNotes]);\n  useEffect(() => {\n    let interval;\n    if (isTimerRunning && timerSeconds > 0) {\n      interval = setInterval(() => {\n        setTimerSeconds(seconds => seconds - 1);\n      }, 1000);\n    } else if (timerSeconds === 0) {\n      setIsTimerRunning(false);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerRunning, timerSeconds]);\n  const getInitialPrompt = useCallback(() => {\n    if (currentDay === 1) {\n      return `Welcome to our Mini Design Sprint! This compressed version of Jake Knapp and John Zeratsky's methodology will guide you through a rapid innovation process. We'll cover the essentials of a full sprint in just five short sessions.\n  \n  Let's kick off Day 1 by defining your long-term goal. This goal should be ambitious yet achievable, setting the direction for our entire sprint. What specific outcome are you aiming to achieve with this project? Think big and be as clear as possible.`;\n    }\n    return `Welcome to Day ${currentDay} of the Design Sprint. ${sprintGuidance[currentDay].prompt}`;\n  }, [currentDay]);\n  useEffect(() => {\n    const loadInitialPrompt = async () => {\n      // Show loading bubbles for 1 second\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setInitialLoading(false);\n      const initialPrompt = getInitialPrompt();\n      setIsTyping(false);\n      setFeedback(initialPrompt);\n      setConversationLog([{\n        isUser: false,\n        text: initialPrompt\n      }]);\n      setShowInput(true);\n    };\n    loadInitialPrompt();\n  }, [currentDay, getInitialPrompt]);\n  const getAIFeedback = async (input, context) => {\n    setIsTyping(true);\n    const prompt = `Day ${currentDay} of Design Sprint. Context: ${context}. User input: \"${input}\". ${getCurrentPrompt()} Provide encouraging feedback and guidance based on the user's input. Suggest improvements or ask thought-provoking questions to help the user develop their ideas further.`;\n    try {\n      const response = await getGPTResponse(prompt, currentDay);\n      setFeedback(response);\n      setConversationLog(prev => [...prev, {\n        isUser: false,\n        text: response\n      }]);\n    } catch (error) {\n      console.error(\"Error getting AI feedback:\", error);\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  const handleSubmit = async () => {\n    if (!input.trim()) return;\n    const userInput = input;\n    setInput('');\n    setIsTyping(true);\n    setConversationLog(prev => [...prev, {\n      isUser: true,\n      text: userInput\n    }]);\n    let updatedSprintData = {\n      ...sprintData\n    };\n    if (currentDay === 1) {\n      var _updatedSprintData$, _updatedSprintData$2;\n      if (!((_updatedSprintData$ = updatedSprintData[1]) === null || _updatedSprintData$ === void 0 ? void 0 : _updatedSprintData$[\"Long-term Goal\"])) {\n        const summarizedGoal = await getGPTResponse(`Summarize this long-term goal concisely: ${userInput}`);\n        updatedSprintData[1] = {\n          ...updatedSprintData[1],\n          \"Long-term Goal\": summarizedGoal\n        };\n        setSprintData(updatedSprintData);\n        const response = await getGPTResponse(`The user's long-term goal is: \"${userInput}\". Acknowledge this goal and ask for 2-3 critical questions related to achieving this goal.`);\n        setFeedback(response);\n        setConversationLog(prev => [...prev, {\n          isUser: false,\n          text: response\n        }]);\n      } else if (!((_updatedSprintData$2 = updatedSprintData[1]) === null || _updatedSprintData$2 === void 0 ? void 0 : _updatedSprintData$2[\"Critical Questions\"])) {\n        const summarizedQuestions = await getGPTResponse(`Summarize these critical questions concisely: ${userInput}`);\n        updatedSprintData[1] = {\n          ...updatedSprintData[1],\n          \"Critical Questions\": summarizedQuestions\n        };\n        setSprintData(updatedSprintData);\n        const response = await getGPTResponse(`The user's critical questions are: \"${userInput}\". Acknowledge these questions, summarize the day's progress, and ask if they're ready to move to Day 2.`);\n        setFeedback(response);\n        setConversationLog(prev => [...prev, {\n          isUser: false,\n          text: response\n        }]);\n      }\n    } else {\n      const currentObjectives = getCurrentObjectives();\n      const currentObjective = currentObjectives[Object.keys(updatedSprintData[currentDay] || {}).length];\n      if (currentObjective) {\n        updatedSprintData[currentDay] = {\n          ...updatedSprintData[currentDay],\n          [currentObjective]: userInput\n        };\n        setSprintData(updatedSprintData);\n        const prompt = `Day ${currentDay} of Design Sprint. Context: ${JSON.stringify(updatedSprintData)}. User input: \"${userInput}\". ${getCurrentPrompt()} Provide concise guidance (2-3 sentences max) based on the user's input.`;\n        try {\n          const response = await getGPTResponse(prompt, currentDay);\n          setFeedback(response);\n          setConversationLog(prev => [...prev, {\n            isUser: false,\n            text: response\n          }]);\n        } catch (error) {\n          console.error(\"Error getting AI response:\", error);\n          setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n        } finally {\n          setIsTyping(false);\n        }\n      }\n    }\n    setIsTyping(false);\n    checkDayCompletion();\n  };\n  const updateCrazyEightIdea = async (index, value) => {\n    const newIdeas = [...crazyEightIdeas];\n    newIdeas[index] = value;\n    setCrazyEightIdeas(newIdeas);\n    await getAIFeedback(value, `Updating Crazy 8s idea ${index + 1}`);\n  };\n  const updateStoryboardSection = async (index, value) => {\n    const newSections = [...storyboardSections];\n    newSections[index] = value;\n    setStoryboardSections(newSections);\n    await getAIFeedback(value, `Updating storyboard panel ${index + 1}`);\n    checkDayCompletion();\n  };\n  const updatePrototypeData = async (key, value) => {\n    setPrototypeData(prev => ({\n      ...prev,\n      [key]: value\n    }));\n    await getAIFeedback(value, `Updating prototype ${key}`);\n    checkDayCompletion();\n  };\n  const submitDay2 = useCallback(() => {\n    if (crazyEightIdeas.every(idea => idea.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        2: {\n          \"Crazy 8s\": crazyEightIdeas\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all 8 ideas before submitting.\");\n    }\n  }, [crazyEightIdeas, moveToNextDay]);\n  const submitDay3 = useCallback(() => {\n    if (storyboardSections.every(section => section.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        3: {\n          \"Solution Sketch\": storyboardSections.map((section, index) => `Panel ${index + 1}: ${section}`)\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all three storyboard panels before submitting.\");\n    }\n  }, [storyboardSections, moveToNextDay]);\n  const submitDay4 = useCallback(() => {\n    if (Object.values(prototypeData).every(value => value.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        4: prototypeData\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all prototype sections before submitting.\");\n    }\n  }, [prototypeData, moveToNextDay]);\n  const submitDay5 = useCallback(() => {\n    if (testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '') {\n      setSprintData(prev => ({\n        ...prev,\n        5: {\n          \"Testing Scenario\": testingScenario,\n          \"User Interaction\": userInteraction,\n          \"Analysis\": analysisNotes\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all sections before submitting.\");\n    }\n  }, [testingScenario, userInteraction, analysisNotes, moveToNextDay]);\n  const startTimer = () => {\n    setIsTimerRunning(true);\n    setTimerSeconds(480);\n  };\n  const copyConversationLog = () => {\n    const logText = conversationLog.map(entry => `**${entry.isUser ? 'User' : 'Relay'}**: ${entry.text}`).join('\\n');\n    navigator.clipboard.writeText(logText);\n  };\n  const conductSimulatedInteraction = async () => {\n    setIsTyping(true);\n    const prompt = `You are a potential user interacting with the following product prototype: ${JSON.stringify(prototypeData)}. Please provide realistic responses and actions based on this testing scenario: ${testingScenario}`;\n    try {\n      const response = await getGPTResponse(prompt, currentDay);\n      setUserInteraction(response);\n      await getAIFeedback(response, \"Simulated user interaction\");\n    } catch (error) {\n      console.error(\"Error conducting simulated interaction:\", error);\n      setUserInteraction(\"Error: Unable to conduct simulated interaction.\");\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  return /*#__PURE__*/React.createElement(SprintContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MainContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }\n  }, `Day ${currentDay}: ${sprintGuidance[currentDay].goal}`), initialLoading ? /*#__PURE__*/React.createElement(TypingIndicator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 13\n    }\n  })) : isTyping ? /*#__PURE__*/React.createElement(TypingIndicator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }\n  })) : feedback ? /*#__PURE__*/React.createElement(AIMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(RelayIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 13\n    }\n  }, \"Relay :)\"), \" \", feedback) : null, showInput && /*#__PURE__*/React.createElement(InputWithSendIcon, {\n    value: input,\n    onChange: e => setInput(e.target.value),\n    onSubmit: handleSubmit,\n    onKeyPress: e => e.key === 'Enter' && !e.shiftKey && handleSubmit(),\n    placeholder: \"Enter your response here...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 11\n    }\n  })), isSidebarOpen && /*#__PURE__*/React.createElement(OutputSidebar, {\n    sprintData: sprintData,\n    currentDay: currentDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 9\n    }\n  }));\n};\nexport default DaySprint;","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","keyframes","getGPTResponse","sprintGuidance","OutputSidebar","InputWithSendIcon","SprintContainer","div","MainContent","Header","h1","AIMessage","RelayIcon","span","typing","TypingIndicator","NextDayButton","button","DaySprint","currentDay","setCurrentDay","input","setInput","feedback","setFeedback","sprintData","setSprintData","isTyping","setIsTyping","conversationLog","setConversationLog","timerSeconds","setTimerSeconds","isTimerRunning","setIsTimerRunning","crazyEightIdeas","setCrazyEightIdeas","Array","fill","storyboardSections","setStoryboardSections","isReadyForNextDay","setIsReadyForNextDay","prototypeData","setPrototypeData","coreElements","structureFlow","interactionsProcesses","testingScenario","setTestingScenario","userInteraction","setUserInteraction","analysisNotes","setAnalysisNotes","showQuestionInput","setShowQuestionInput","isSidebarOpen","setIsSidebarOpen","showInput","setShowInput","initialLoading","setInitialLoading","getCurrentPrompt","prompt","getCurrentObjectives","objectives","moveToNextDay","prev","nextDay","Math","min","checkDayCompletion","_sprintData$","_sprintData$2","isComplete","every","idea","trim","section","Object","values","value","interval","setInterval","seconds","clearInterval","getInitialPrompt","loadInitialPrompt","Promise","resolve","setTimeout","initialPrompt","isUser","text","getAIFeedback","context","response","error","console","handleSubmit","userInput","updatedSprintData","_updatedSprintData$","_updatedSprintData$2","summarizedGoal","summarizedQuestions","currentObjectives","currentObjective","keys","length","JSON","stringify","updateCrazyEightIdea","index","newIdeas","updateStoryboardSection","newSections","updatePrototypeData","key","submitDay2","alert","submitDay3","map","submitDay4","submitDay5","startTimer","copyConversationLog","logText","entry","join","navigator","clipboard","writeText","conductSimulatedInteraction","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","goal","onChange","e","target","onSubmit","onKeyPress","shiftKey","placeholder"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport InputWithSendIcon from './InputWithSendIcon';\n\n// Styled components (unchanged)\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\n\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\n\nconst AIMessage = styled.div`\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n  padding: 15px;\n  border-radius: 15px;\n  margin-bottom: 20px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  position: relative;\n  max-width: 80%;\n  align-self: flex-start;\n`;\n\nconst RelayIcon = styled.span`\n  font-weight: bold;\n  color: #3c8ce7;\n  margin-right: 5px;\n`;\n\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\n\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\n\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\n\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [input, setInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [isTyping, setIsTyping] = useState(true);\n  const [conversationLog, setConversationLog] = useState([]);\n  const [timerSeconds, setTimerSeconds] = useState(480); // 8 minutes\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [crazyEightIdeas, setCrazyEightIdeas] = useState(Array(8).fill(''));\n  const [storyboardSections, setStoryboardSections] = useState(['', '', '']);\n  const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n  const [prototypeData, setPrototypeData] = useState({ coreElements: '', structureFlow: '', interactionsProcesses: '' });\n  const [testingScenario, setTestingScenario] = useState('');\n  const [userInteraction, setUserInteraction] = useState('');\n  const [analysisNotes, setAnalysisNotes] = useState('');\n  const [showQuestionInput, setShowQuestionInput] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const [showInput, setShowInput] = useState(false);\n  const [initialLoading, setInitialLoading] = useState(true);\n\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n\n  const moveToNextDay = useCallback(() => {\n    setCurrentDay(prev => {\n      const nextDay = Math.min(prev + 1, 5);\n      setFeedback('');\n      setIsReadyForNextDay(false);\n      setShowInput(true);\n      if (prev === 2) {\n        setCrazyEightIdeas(Array(8).fill(''));\n      } else if (prev === 3) {\n        setStoryboardSections(['', '', '']);\n      }\n      setIsTimerRunning(false);\n      setTimerSeconds(480);\n      return nextDay;\n    });\n  }, []);\n\n  const checkDayCompletion = useCallback(() => {\n    let isComplete = false;\n\n    switch (currentDay) {\n      case 1:\n        isComplete = sprintData[1]?.[\"Long-term Goal\"] && sprintData[1]?.[\"Critical Questions\"];\n        break;\n      case 2:\n        isComplete = crazyEightIdeas.every(idea => idea.trim() !== '');\n        break;\n      case 3:\n        isComplete = storyboardSections.every(section => section.trim() !== '');\n        break;\n      case 4:\n        isComplete = Object.values(prototypeData).every(value => value.trim() !== '');\n        break;\n      case 5:\n        isComplete = testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '';\n        break;\n      default:\n        isComplete = false;\n    }\n\n    setIsReadyForNextDay(isComplete);\n    setShowInput(!isComplete);\n  }, [currentDay, sprintData, crazyEightIdeas, storyboardSections, prototypeData, testingScenario, userInteraction, analysisNotes]);\n\n  useEffect(() => {\n    let interval;\n    if (isTimerRunning && timerSeconds > 0) {\n      interval = setInterval(() => {\n        setTimerSeconds(seconds => seconds - 1);\n      }, 1000);\n    } else if (timerSeconds === 0) {\n      setIsTimerRunning(false);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerRunning, timerSeconds]);\n\n  const getInitialPrompt = useCallback(() => {\n    if (currentDay === 1) {\n      return `Welcome to our Mini Design Sprint! This compressed version of Jake Knapp and John Zeratsky's methodology will guide you through a rapid innovation process. We'll cover the essentials of a full sprint in just five short sessions.\n  \n  Let's kick off Day 1 by defining your long-term goal. This goal should be ambitious yet achievable, setting the direction for our entire sprint. What specific outcome are you aiming to achieve with this project? Think big and be as clear as possible.`;\n    }\n    return `Welcome to Day ${currentDay} of the Design Sprint. ${sprintGuidance[currentDay].prompt}`;\n  }, [currentDay]);\n\n  useEffect(() => {\n    const loadInitialPrompt = async () => {\n      // Show loading bubbles for 1 second\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setInitialLoading(false);\n\n      const initialPrompt = getInitialPrompt();\n      setIsTyping(false);\n      setFeedback(initialPrompt);\n      setConversationLog([{ isUser: false, text: initialPrompt }]);\n      setShowInput(true);\n    };\n  \n    loadInitialPrompt();\n  }, [currentDay, getInitialPrompt]);\n\n  const getAIFeedback = async (input, context) => {\n    setIsTyping(true);\n    const prompt = `Day ${currentDay} of Design Sprint. Context: ${context}. User input: \"${input}\". ${getCurrentPrompt()} Provide encouraging feedback and guidance based on the user's input. Suggest improvements or ask thought-provoking questions to help the user develop their ideas further.`;\n\n    try {\n      const response = await getGPTResponse(prompt, currentDay);\n      setFeedback(response);\n      setConversationLog(prev => [...prev, { isUser: false, text: response }]);\n    } catch (error) {\n      console.error(\"Error getting AI feedback:\", error);\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!input.trim()) return;\n\n    const userInput = input;\n    setInput('');\n    setIsTyping(true);\n    setConversationLog(prev => [...prev, { isUser: true, text: userInput }]);\n\n    let updatedSprintData = { ...sprintData };\n\n    if (currentDay === 1) {\n      if (!updatedSprintData[1]?.[\"Long-term Goal\"]) {\n        const summarizedGoal = await getGPTResponse(`Summarize this long-term goal concisely: ${userInput}`);\n        updatedSprintData[1] = { ...updatedSprintData[1], \"Long-term Goal\": summarizedGoal };\n        setSprintData(updatedSprintData);\n        \n        const response = await getGPTResponse(`The user's long-term goal is: \"${userInput}\". Acknowledge this goal and ask for 2-3 critical questions related to achieving this goal.`);\n        setFeedback(response);\n        setConversationLog(prev => [...prev, { isUser: false, text: response }]);\n      } else if (!updatedSprintData[1]?.[\"Critical Questions\"]) {\n        const summarizedQuestions = await getGPTResponse(`Summarize these critical questions concisely: ${userInput}`);\n        updatedSprintData[1] = { ...updatedSprintData[1], \"Critical Questions\": summarizedQuestions };\n        setSprintData(updatedSprintData);\n        \n        const response = await getGPTResponse(`The user's critical questions are: \"${userInput}\". Acknowledge these questions, summarize the day's progress, and ask if they're ready to move to Day 2.`);\n        setFeedback(response);\n        setConversationLog(prev => [...prev, { isUser: false, text: response }]);\n      }\n    } else {\n      const currentObjectives = getCurrentObjectives();\n      const currentObjective = currentObjectives[Object.keys(updatedSprintData[currentDay] || {}).length];\n      if (currentObjective) {\n        updatedSprintData[currentDay] = {\n          ...updatedSprintData[currentDay],\n          [currentObjective]: userInput\n        };\n        setSprintData(updatedSprintData);\n\n        const prompt = `Day ${currentDay} of Design Sprint. Context: ${JSON.stringify(updatedSprintData)}. User input: \"${userInput}\". ${getCurrentPrompt()} Provide concise guidance (2-3 sentences max) based on the user's input.`;\n\n        try {\n          const response = await getGPTResponse(prompt, currentDay);\n          setFeedback(response);\n          setConversationLog(prev => [...prev, { isUser: false, text: response }]);\n        } catch (error) {\n          console.error(\"Error getting AI response:\", error);\n          setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n        } finally {\n          setIsTyping(false);\n        }\n      }\n    }\n\n    setIsTyping(false);\n    checkDayCompletion();\n  };\n\n  const updateCrazyEightIdea = async (index, value) => {\n    const newIdeas = [...crazyEightIdeas];\n    newIdeas[index] = value;\n    setCrazyEightIdeas(newIdeas);\n    await getAIFeedback(value, `Updating Crazy 8s idea ${index + 1}`);\n  };\n\n  const updateStoryboardSection = async (index, value) => {\n    const newSections = [...storyboardSections];\n    newSections[index] = value;\n    setStoryboardSections(newSections);\n    await getAIFeedback(value, `Updating storyboard panel ${index + 1}`);\n    checkDayCompletion();\n  };\n\n  const updatePrototypeData = async (key, value) => {\n    setPrototypeData(prev => ({ ...prev, [key]: value }));\n    await getAIFeedback(value, `Updating prototype ${key}`);\n    checkDayCompletion();\n  };\n\n  const submitDay2 = useCallback(() => {\n    if (crazyEightIdeas.every(idea => idea.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        2: {\n          \"Crazy 8s\": crazyEightIdeas\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all 8 ideas before submitting.\");\n    }\n  }, [crazyEightIdeas, moveToNextDay]);\n\n  const submitDay3 = useCallback(() => {\n    if (storyboardSections.every(section => section.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        3: {\n          \"Solution Sketch\": storyboardSections.map((section, index) => `Panel ${index + 1}: ${section}`)\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all three storyboard panels before submitting.\");\n    }\n  }, [storyboardSections, moveToNextDay]);\n\n  const submitDay4 = useCallback(() => {\n    if (Object.values(prototypeData).every(value => value.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        4: prototypeData\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all prototype sections before submitting.\");\n    }\n  }, [prototypeData, moveToNextDay]);\n\n  const submitDay5 = useCallback(() => {\n    if (testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '') {\n      setSprintData(prev => ({\n        ...prev,\n        5: {\n          \"Testing Scenario\": testingScenario,\n          \"User Interaction\": userInteraction,\n          \"Analysis\": analysisNotes\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all sections before submitting.\");\n    }\n  }, [testingScenario, userInteraction, analysisNotes, moveToNextDay]);\n\n  const startTimer = () => {\n    setIsTimerRunning(true);\n    setTimerSeconds(480);\n  };\n\n  const copyConversationLog = () => {\n    const logText = conversationLog.map(entry => `**${entry.isUser ? 'User' : 'Relay'}**: ${entry.text}`).join('\\n');\n    navigator.clipboard.writeText(logText);\n  };\n\n  const conductSimulatedInteraction = async () => {\n    setIsTyping(true);\n    const prompt = `You are a potential user interacting with the following product prototype: ${JSON.stringify(prototypeData)}. Please provide realistic responses and actions based on this testing scenario: ${testingScenario}`;\n    try {\n      const response = await getGPTResponse(prompt, currentDay);\n      setUserInteraction(response);\n      await getAIFeedback(response, \"Simulated user interaction\");\n    } catch (error) {\n      console.error(\"Error conducting simulated interaction:\", error);\n      setUserInteraction(\"Error: Unable to conduct simulated interaction.\");\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  return (\n    <SprintContainer>\n      <MainContent>\n        <Header>{`Day ${currentDay}: ${sprintGuidance[currentDay].goal}`}</Header>\n        {initialLoading ? (\n          <TypingIndicator>\n            <span></span>\n            <span></span>\n            <span></span>\n          </TypingIndicator>\n        ) : isTyping ? (\n          <TypingIndicator>\n            <span></span>\n            <span></span>\n            <span></span>\n          </TypingIndicator>\n        ) : feedback ? (\n          <AIMessage>\n            <RelayIcon>Relay :)</RelayIcon> {feedback}\n          </AIMessage>\n        ) : null}\n        {showInput && (\n          <InputWithSendIcon\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onSubmit={handleSubmit}\n            onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSubmit()}\n            placeholder=\"Enter your response here...\"\n          />\n        )}\n        {/* ... (keep the rest of the JSX for other days) */}\n      </MainContent>\n      {isSidebarOpen && (\n        <OutputSidebar\n          sprintData={sprintData}\n          currentDay={currentDay}\n        />\n      )}\n    </SprintContainer>\n  );\n};\n\nexport default DaySprint;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}