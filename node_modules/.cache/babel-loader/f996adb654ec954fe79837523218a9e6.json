{"ast":null,"code":"export const getGPTResponse = async prompt => {\n  try {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${process.env.REACT_APP_GPT_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"system\",\n          content: \"You are Relay, an AI assistant guiding users through a mini design sprint. Be concise, friendly, and focused on helping users progress through each day's objectives. Avoid repetition and move the conversation forward. If you feel enough information has been gathered for the current day, include [SHOW_NEXT_DAY_BUTTON] in your response.\"\n        }, {\n          role: \"user\",\n          content: prompt\n        }],\n        temperature: 0.7\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.choices[0].message.content;\n  } catch (error) {\n    console.error('Error in getGPTResponse:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["getGPTResponse","prompt","response","fetch","method","headers","process","env","REACT_APP_GPT_API_KEY","body","JSON","stringify","model","messages","role","content","temperature","ok","Error","status","data","json","choices","message","error","console"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/utils/gptService.js"],"sourcesContent":["export const getGPTResponse = async (prompt) => {\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_GPT_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: [\n            {\n              role: \"system\",\n              content: \"You are Relay, an AI assistant guiding users through a mini design sprint. Be concise, friendly, and focused on helping users progress through each day's objectives. Avoid repetition and move the conversation forward. If you feel enough information has been gathered for the current day, include [SHOW_NEXT_DAY_BUTTON] in your response.\"\n            },\n            { role: \"user\", content: prompt }\n          ],\n          temperature: 0.7\n        })\n      });\n  \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n  \n      const data = await response.json();\n      return data.choices[0].message.content;\n    } catch (error) {\n      console.error('Error in getGPTResponse:', error);\n      throw error;\n    }\n  };"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAG,MAAOC,MAAM,IAAK;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MACzEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUC,OAAO,CAACC,GAAG,CAACC,qBAAqB;MAC9D,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,QAAQ;UACdC,OAAO,EAAE;QACX,CAAC,EACD;UAAED,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEd;QAAO,CAAC,CAClC;QACDe,WAAW,EAAE;MACf,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACd,QAAQ,CAACe,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBhB,QAAQ,CAACiB,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMlB,QAAQ,CAACmB,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACR,OAAO;EACxC,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}