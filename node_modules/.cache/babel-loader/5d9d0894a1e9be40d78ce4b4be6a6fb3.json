{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { debounce } from 'lodash';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #1e1e1e;\n  border-radius: 8px;\n  padding: 1.5rem;\n  font-family: 'Roboto', sans-serif;\n  height: 60vh;\n  overflow-y: auto;\n`;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#2a2a2a'};\n  color: #ffffff;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 80%;\n`;\nconst RelayIcon = styled.span`\n  color: #3c8ce7;\n  margin-right: 0.5rem;\n`;\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n`;\nconst Input = styled.input`\n  flex: 1;\n  padding: 0.75rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #2a2a2a;\n  color: #ffffff;\n`;\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n`;\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 1rem;\n`;\nconst parseMarkdown = markdown => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = source => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\nconst AIChat = ({\n  day,\n  onUpdateDeliverable,\n  onNextDay\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [showNextDayButton, setShowNextDayButton] = useState(false);\n  const getAIResponse = useCallback(async (prompt, currentDay, shouldUpdateDeliverable = false) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay, messages));\n      const aiMessage = {\n        text: aiResponse,\n        isUser: false\n      };\n      setMessages(prev => [...prev, aiMessage]);\n      if (shouldUpdateDeliverable) {\n        const deliverable = await getGPTResponse(getDeliverablePrompt(prompt, currentDay, messages));\n        onUpdateDeliverable(currentDay, deliverable);\n      }\n      if (aiResponse.includes(\"[SHOW_NEXT_DAY_BUTTON]\")) {\n        setShowNextDayButton(true);\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        text: \"I apologize, but I'm having trouble processing that request. Let's try a different approach. \" + getSprintTip(day),\n        isUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onUpdateDeliverable, day, messages]);\n  useEffect(() => {\n    if (!hasInitialized) {\n      const initialPrompt = `Hi, I'm Relay, your AI assistant for this mini design sprint. Welcome to Day ${day}! ${sprintGuidance[day].prompt}`;\n      setMessages([{\n        text: initialPrompt,\n        isUser: false\n      }]);\n      setHasInitialized(true);\n    }\n  }, [day, hasInitialized]);\n  useEffect(() => {\n    if (day > 1) {\n      getAIResponse(`Welcome to Day ${day}! ${sprintGuidance[day].prompt}`, day, false);\n    }\n  }, [day, getAIResponse]);\n  const debouncedHandleSend = useCallback(debounce(async () => {\n    if (input.trim() && !isLoading) {\n      const userMessage = {\n        text: input,\n        isUser: true\n      };\n      setMessages(prev => [...prev, userMessage]);\n      const currentInput = input;\n      setInput('');\n      await getAIResponse(currentInput, day, true);\n    }\n  }, 300), [input, isLoading, day, getAIResponse]);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      debouncedHandleSend();\n    }\n  };\n  const handleNextDay = () => {\n    setShowNextDayButton(false);\n    onNextDay();\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChatContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(Message, {\n    key: index,\n    isUser: message.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }, !message.isUser && /*#__PURE__*/React.createElement(RelayIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 33\n    }\n  }, \":-) Relay\"), parseMarkdown(message.text)))), /*#__PURE__*/React.createElement(InputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: input,\n    onChange: handleInputChange,\n    onKeyPress: handleKeyPress,\n    placeholder: \"Type your message...\",\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SendButton, {\n    onClick: debouncedHandleSend,\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, isLoading ? 'Thinking...' : 'Send')), showNextDayButton && /*#__PURE__*/React.createElement(NextDayButton, {\n    onClick: handleNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }, \"Move to Day \", day + 1));\n};\nconst getAIPrompt = (userInput, day, context) => {\n  const {\n    goal,\n    tasks\n  } = sprintGuidance[day];\n  const userMessages = context.filter(msg => msg.isUser).map(msg => msg.text);\n  const lastUserMessage = userMessages[userMessages.length - 1] || '';\n  const secondLastUserMessage = userMessages[userMessages.length - 2] || '';\n  return `You are Relay, an AI assistant helping with a mini design sprint. It's Day ${day} of the sprint. \n  The goal for today is: ${goal}. \n  Key tasks: ${tasks.join(', ')}. \n  The user's last message was: \"${lastUserMessage}\"\n  The user's second last message was: \"${secondLastUserMessage}\"\n  Provide concise, direct guidance to help the user progress through this day of the sprint. \n  Focus on actionable next steps and avoid repeating information or asking for information already provided.\n  If the user has addressed all tasks for the day or provided sufficient information, summarize the key points and include [SHOW_NEXT_DAY_BUTTON] in your response.\n  Always aim to move the conversation forward. If the user seems to be repeating information, summarize what's been discussed and move to the next task or suggest moving to the next day.\n  Limit your response to 2-3 sentences unless providing a summary.`;\n};\nconst getDeliverablePrompt = (userInput, day, context) => {\n  const {\n    goal\n  } = sprintGuidance[day];\n  const allUserInputs = context.filter(msg => msg.isUser).map(msg => msg.text).join(' ');\n  return `Based on the user inputs for Day ${day} of the mini design sprint: \"${allUserInputs}\", \n  create a concise summary of the key decisions or outputs related to the day's goal: ${goal}. \n  Format the response as a brief, bullet-pointed list of no more than 3-5 items.`;\n};\nexport default AIChat;","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","debounce","SimpleMarkdown","getGPTResponse","sprintGuidance","getSprintTip","ChatContainer","div","Message","props","isUser","RelayIcon","span","InputContainer","Input","input","SendButton","button","NextDayButton","parseMarkdown","markdown","rawBuiltParser","parserFor","defaultRules","parser","source","blockSource","reactOutput","reactFor","ruleOutput","AIChat","day","onUpdateDeliverable","onNextDay","messages","setMessages","setInput","isLoading","setIsLoading","hasInitialized","setHasInitialized","showNextDayButton","setShowNextDayButton","getAIResponse","prompt","currentDay","shouldUpdateDeliverable","aiResponse","getAIPrompt","aiMessage","text","prev","deliverable","getDeliverablePrompt","includes","error","console","initialPrompt","debouncedHandleSend","trim","userMessage","currentInput","handleInputChange","e","target","value","handleKeyPress","key","shiftKey","preventDefault","handleNextDay","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","onChange","onKeyPress","placeholder","disabled","onClick","userInput","context","goal","tasks","userMessages","filter","msg","lastUserMessage","length","secondLastUserMessage","join","allUserInputs"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { debounce } from 'lodash';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\n\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #1e1e1e;\n  border-radius: 8px;\n  padding: 1.5rem;\n  font-family: 'Roboto', sans-serif;\n  height: 60vh;\n  overflow-y: auto;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#2a2a2a'};\n  color: #ffffff;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 80%;\n`;\n\nconst RelayIcon = styled.span`\n  color: #3c8ce7;\n  margin-right: 0.5rem;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n`;\n\nconst Input = styled.input`\n  flex: 1;\n  padding: 0.75rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #2a2a2a;\n  color: #ffffff;\n`;\n\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n`;\n\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 1rem;\n`;\n\nconst parseMarkdown = (markdown) => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = (source) => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\n\nconst AIChat = ({ day, onUpdateDeliverable, onNextDay }) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [showNextDayButton, setShowNextDayButton] = useState(false);\n\n  const getAIResponse = useCallback(async (prompt, currentDay, shouldUpdateDeliverable = false) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay, messages));\n      const aiMessage = { text: aiResponse, isUser: false };\n      setMessages(prev => [...prev, aiMessage]);\n      if (shouldUpdateDeliverable) {\n        const deliverable = await getGPTResponse(getDeliverablePrompt(prompt, currentDay, messages));\n        onUpdateDeliverable(currentDay, deliverable);\n      }\n      \n      if (aiResponse.includes(\"[SHOW_NEXT_DAY_BUTTON]\")) {\n        setShowNextDayButton(true);\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, { \n        text: \"I apologize, but I'm having trouble processing that request. Let's try a different approach. \" + getSprintTip(day), \n        isUser: false \n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onUpdateDeliverable, day, messages]);\n\n  useEffect(() => {\n    if (!hasInitialized) {\n      const initialPrompt = `Hi, I'm Relay, your AI assistant for this mini design sprint. Welcome to Day ${day}! ${sprintGuidance[day].prompt}`;\n      setMessages([{ text: initialPrompt, isUser: false }]);\n      setHasInitialized(true);\n    }\n  }, [day, hasInitialized]);\n\n  useEffect(() => {\n    if (day > 1) {\n      getAIResponse(`Welcome to Day ${day}! ${sprintGuidance[day].prompt}`, day, false);\n    }\n  }, [day, getAIResponse]);\n\n  const debouncedHandleSend = useCallback(\n    debounce(async () => {\n      if (input.trim() && !isLoading) {\n        const userMessage = { text: input, isUser: true };\n        setMessages(prev => [...prev, userMessage]);\n        const currentInput = input;\n        setInput('');\n        await getAIResponse(currentInput, day, true);\n      }\n    }, 300),\n    [input, isLoading, day, getAIResponse]\n  );\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      debouncedHandleSend();\n    }\n  };\n\n  const handleNextDay = () => {\n    setShowNextDayButton(false);\n    onNextDay();\n  };\n\n  return (\n    <>\n      <ChatContainer>\n        {messages.map((message, index) => (\n          <Message key={index} isUser={message.isUser}>\n            {!message.isUser && <RelayIcon>:-) Relay</RelayIcon>}\n            {parseMarkdown(message.text)}\n          </Message>\n        ))}\n      </ChatContainer>\n      <InputContainer>\n        <Input\n          value={input}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Type your message...\"\n          disabled={isLoading}\n        />\n        <SendButton onClick={debouncedHandleSend} disabled={isLoading}>\n          {isLoading ? 'Thinking...' : 'Send'}\n        </SendButton>\n      </InputContainer>\n      {showNextDayButton && (\n        <NextDayButton onClick={handleNextDay}>\n          Move to Day {day + 1}\n        </NextDayButton>\n      )}\n    </>\n  );\n};\n\nconst getAIPrompt = (userInput, day, context) => {\n  const { goal, tasks } = sprintGuidance[day];\n  const userMessages = context.filter(msg => msg.isUser).map(msg => msg.text);\n  const lastUserMessage = userMessages[userMessages.length - 1] || '';\n  const secondLastUserMessage = userMessages[userMessages.length - 2] || '';\n  \n  return `You are Relay, an AI assistant helping with a mini design sprint. It's Day ${day} of the sprint. \n  The goal for today is: ${goal}. \n  Key tasks: ${tasks.join(', ')}. \n  The user's last message was: \"${lastUserMessage}\"\n  The user's second last message was: \"${secondLastUserMessage}\"\n  Provide concise, direct guidance to help the user progress through this day of the sprint. \n  Focus on actionable next steps and avoid repeating information or asking for information already provided.\n  If the user has addressed all tasks for the day or provided sufficient information, summarize the key points and include [SHOW_NEXT_DAY_BUTTON] in your response.\n  Always aim to move the conversation forward. If the user seems to be repeating information, summarize what's been discussed and move to the next task or suggest moving to the next day.\n  Limit your response to 2-3 sentences unless providing a summary.`;\n};\n\nconst getDeliverablePrompt = (userInput, day, context) => {\n  const { goal } = sprintGuidance[day];\n  const allUserInputs = context.filter(msg => msg.isUser).map(msg => msg.text).join(' ');\n  return `Based on the user inputs for Day ${day} of the mini design sprint: \"${allUserInputs}\", \n  create a concise summary of the key decisions or outputs related to the day's goal: ${goal}. \n  Format the response as a brief, bullet-pointed list of no more than 3-5 items.`;\n};\n\nexport default AIChat;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,QAAQ,QAAQ,QAAQ;AACjC,OAAOC,cAAc,MAAM,iBAAiB;AAC5C,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SAASC,cAAc,EAAEC,YAAY,QAAQ,0BAA0B;AAEvE,MAAMC,aAAa,GAAGN,MAAM,CAACO,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,OAAO,GAAGR,MAAM,CAACO,GAAG;AAC1B,sBAAsBE,KAAK,IAAIA,KAAK,CAACC,MAAM,GAAG,SAAS,GAAG,SAAS;AACnE;AACA;AACA;AACA;AACA,gBAAgBD,KAAK,IAAIA,KAAK,CAACC,MAAM,GAAG,UAAU,GAAG,YAAY;AACjE;AACA,CAAC;AAED,MAAMC,SAAS,GAAGX,MAAM,CAACY,IAAI;AAC7B;AACA;AACA,CAAC;AAED,MAAMC,cAAc,GAAGb,MAAM,CAACO,GAAG;AACjC;AACA;AACA,CAAC;AAED,MAAMO,KAAK,GAAGd,MAAM,CAACe,KAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,UAAU,GAAGhB,MAAM,CAACiB,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,aAAa,GAAGlB,MAAM,CAACiB,MAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAME,aAAa,GAAIC,QAAQ,IAAK;EAClC,MAAMC,cAAc,GAAGnB,cAAc,CAACoB,SAAS,CAACpB,cAAc,CAACqB,YAAY,CAAC;EAC5E,MAAMC,MAAM,GAAIC,MAAM,IAAK;IACzB,MAAMC,WAAW,GAAGD,MAAM,GAAG,MAAM;IACnC,OAAOJ,cAAc,CAACK,WAAW,CAAC;EACpC,CAAC;EACD,MAAMC,WAAW,GAAGzB,cAAc,CAAC0B,QAAQ,CAAC1B,cAAc,CAAC2B,UAAU,CAAC3B,cAAc,CAACqB,YAAY,EAAE,OAAO,CAAC,CAAC;EAC5G,OAAOI,WAAW,CAACH,MAAM,CAACJ,QAAQ,CAAC,CAAC;AACtC,CAAC;AAED,MAAMU,MAAM,GAAGA,CAAC;EAAEC,GAAG;EAAEC,mBAAmB;EAAEC;AAAU,CAAC,KAAK;EAC1D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGtC,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,KAAK,EAAEqB,QAAQ,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACwC,SAAS,EAAEC,YAAY,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC0C,cAAc,EAAEC,iBAAiB,CAAC,GAAG3C,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAAC4C,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG7C,QAAQ,CAAC,KAAK,CAAC;EAEjE,MAAM8C,aAAa,GAAG5C,WAAW,CAAC,OAAO6C,MAAM,EAAEC,UAAU,EAAEC,uBAAuB,GAAG,KAAK,KAAK;IAC/FR,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF,MAAMS,UAAU,GAAG,MAAM5C,cAAc,CAAC6C,WAAW,CAACJ,MAAM,EAAEC,UAAU,EAAEX,QAAQ,CAAC,CAAC;MAClF,MAAMe,SAAS,GAAG;QAAEC,IAAI,EAAEH,UAAU;QAAErC,MAAM,EAAE;MAAM,CAAC;MACrDyB,WAAW,CAACgB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEF,SAAS,CAAC,CAAC;MACzC,IAAIH,uBAAuB,EAAE;QAC3B,MAAMM,WAAW,GAAG,MAAMjD,cAAc,CAACkD,oBAAoB,CAACT,MAAM,EAAEC,UAAU,EAAEX,QAAQ,CAAC,CAAC;QAC5FF,mBAAmB,CAACa,UAAU,EAAEO,WAAW,CAAC;MAC9C;MAEA,IAAIL,UAAU,CAACO,QAAQ,CAAC,wBAAwB,CAAC,EAAE;QACjDZ,oBAAoB,CAAC,IAAI,CAAC;MAC5B;IACF,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDpB,WAAW,CAACgB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;QAC5BD,IAAI,EAAE,+FAA+F,GAAG7C,YAAY,CAAC0B,GAAG,CAAC;QACzHrB,MAAM,EAAE;MACV,CAAC,CAAC,CAAC;IACL,CAAC,SAAS;MACR4B,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACN,mBAAmB,EAAED,GAAG,EAAEG,QAAQ,CAAC,CAAC;EAExCpC,SAAS,CAAC,MAAM;IACd,IAAI,CAACyC,cAAc,EAAE;MACnB,MAAMkB,aAAa,GAAG,gFAAgF1B,GAAG,KAAK3B,cAAc,CAAC2B,GAAG,CAAC,CAACa,MAAM,EAAE;MAC1IT,WAAW,CAAC,CAAC;QAAEe,IAAI,EAAEO,aAAa;QAAE/C,MAAM,EAAE;MAAM,CAAC,CAAC,CAAC;MACrD8B,iBAAiB,CAAC,IAAI,CAAC;IACzB;EACF,CAAC,EAAE,CAACT,GAAG,EAAEQ,cAAc,CAAC,CAAC;EAEzBzC,SAAS,CAAC,MAAM;IACd,IAAIiC,GAAG,GAAG,CAAC,EAAE;MACXY,aAAa,CAAC,kBAAkBZ,GAAG,KAAK3B,cAAc,CAAC2B,GAAG,CAAC,CAACa,MAAM,EAAE,EAAEb,GAAG,EAAE,KAAK,CAAC;IACnF;EACF,CAAC,EAAE,CAACA,GAAG,EAAEY,aAAa,CAAC,CAAC;EAExB,MAAMe,mBAAmB,GAAG3D,WAAW,CACrCE,QAAQ,CAAC,YAAY;IACnB,IAAIc,KAAK,CAAC4C,IAAI,CAAC,CAAC,IAAI,CAACtB,SAAS,EAAE;MAC9B,MAAMuB,WAAW,GAAG;QAAEV,IAAI,EAAEnC,KAAK;QAAEL,MAAM,EAAE;MAAK,CAAC;MACjDyB,WAAW,CAACgB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAES,WAAW,CAAC,CAAC;MAC3C,MAAMC,YAAY,GAAG9C,KAAK;MAC1BqB,QAAQ,CAAC,EAAE,CAAC;MACZ,MAAMO,aAAa,CAACkB,YAAY,EAAE9B,GAAG,EAAE,IAAI,CAAC;IAC9C;EACF,CAAC,EAAE,GAAG,CAAC,EACP,CAAChB,KAAK,EAAEsB,SAAS,EAAEN,GAAG,EAAEY,aAAa,CACvC,CAAC;EAED,MAAMmB,iBAAiB,GAAIC,CAAC,IAAK;IAC/B3B,QAAQ,CAAC2B,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMC,cAAc,GAAIH,CAAC,IAAK;IAC5B,IAAIA,CAAC,CAACI,GAAG,KAAK,OAAO,IAAI,CAACJ,CAAC,CAACK,QAAQ,EAAE;MACpCL,CAAC,CAACM,cAAc,CAAC,CAAC;MAClBX,mBAAmB,CAAC,CAAC;IACvB;EACF,CAAC;EAED,MAAMY,aAAa,GAAGA,CAAA,KAAM;IAC1B5B,oBAAoB,CAAC,KAAK,CAAC;IAC3BT,SAAS,CAAC,CAAC;EACb,CAAC;EAED,oBACErC,KAAA,CAAA2E,aAAA,CAAA3E,KAAA,CAAA4E,QAAA,qBACE5E,KAAA,CAAA2E,aAAA,CAACjE,aAAa;IAAAmE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACX5C,QAAQ,CAAC6C,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BrF,KAAA,CAAA2E,aAAA,CAAC/D,OAAO;IAAC2D,GAAG,EAAEc,KAAM;IAACvE,MAAM,EAAEsE,OAAO,CAACtE,MAAO;IAAA+D,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACzC,CAACE,OAAO,CAACtE,MAAM,iBAAId,KAAA,CAAA2E,aAAA,CAAC5D,SAAS;IAAA8D,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,WAAoB,CAAC,EACnD3D,aAAa,CAAC6D,OAAO,CAAC9B,IAAI,CACpB,CACV,CACY,CAAC,eAChBtD,KAAA,CAAA2E,aAAA,CAAC1D,cAAc;IAAA4D,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACblF,KAAA,CAAA2E,aAAA,CAACzD,KAAK;IACJmD,KAAK,EAAElD,KAAM;IACbmE,QAAQ,EAAEpB,iBAAkB;IAC5BqB,UAAU,EAAEjB,cAAe;IAC3BkB,WAAW,EAAC,sBAAsB;IAClCC,QAAQ,EAAEhD,SAAU;IAAAoC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACrB,CAAC,eACFlF,KAAA,CAAA2E,aAAA,CAACvD,UAAU;IAACsE,OAAO,EAAE5B,mBAAoB;IAAC2B,QAAQ,EAAEhD,SAAU;IAAAoC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC3DzC,SAAS,GAAG,aAAa,GAAG,MACnB,CACE,CAAC,EAChBI,iBAAiB,iBAChB7C,KAAA,CAAA2E,aAAA,CAACrD,aAAa;IAACoE,OAAO,EAAEhB,aAAc;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,cACzB,EAAC/C,GAAG,GAAG,CACN,CAEjB,CAAC;AAEP,CAAC;AAED,MAAMiB,WAAW,GAAGA,CAACuC,SAAS,EAAExD,GAAG,EAAEyD,OAAO,KAAK;EAC/C,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAGtF,cAAc,CAAC2B,GAAG,CAAC;EAC3C,MAAM4D,YAAY,GAAGH,OAAO,CAACI,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACnF,MAAM,CAAC,CAACqE,GAAG,CAACc,GAAG,IAAIA,GAAG,CAAC3C,IAAI,CAAC;EAC3E,MAAM4C,eAAe,GAAGH,YAAY,CAACA,YAAY,CAACI,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE;EACnE,MAAMC,qBAAqB,GAAGL,YAAY,CAACA,YAAY,CAACI,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE;EAEzE,OAAO,8EAA8EhE,GAAG;AAC1F,2BAA2B0D,IAAI;AAC/B,eAAeC,KAAK,CAACO,IAAI,CAAC,IAAI,CAAC;AAC/B,kCAAkCH,eAAe;AACjD,yCAAyCE,qBAAqB;AAC9D;AACA;AACA;AACA;AACA,mEAAmE;AACnE,CAAC;AAED,MAAM3C,oBAAoB,GAAGA,CAACkC,SAAS,EAAExD,GAAG,EAAEyD,OAAO,KAAK;EACxD,MAAM;IAAEC;EAAK,CAAC,GAAGrF,cAAc,CAAC2B,GAAG,CAAC;EACpC,MAAMmE,aAAa,GAAGV,OAAO,CAACI,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACnF,MAAM,CAAC,CAACqE,GAAG,CAACc,GAAG,IAAIA,GAAG,CAAC3C,IAAI,CAAC,CAAC+C,IAAI,CAAC,GAAG,CAAC;EACtF,OAAO,oCAAoClE,GAAG,gCAAgCmE,aAAa;AAC7F,wFAAwFT,IAAI;AAC5F,iFAAiF;AACjF,CAAC;AAED,eAAe3D,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module"}