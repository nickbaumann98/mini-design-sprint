{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport { debounce } from 'lodash';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #1e1e1e;\n  border-radius: 8px;\n  padding: 1.5rem;\n  font-family: 'Roboto', sans-serif;\n  height: 60vh;\n  overflow-y: auto;\n`;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#2a2a2a'};\n  color: #ffffff;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 80%;\n`;\nconst RelayIcon = styled.span`\n  color: #3c8ce7;\n  margin-right: 0.5rem;\n`;\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n  align-items: flex-end;\n`;\nconst Input = styled.textarea`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #2a2a2a;\n  color: #ffffff;\n  resize: none;\n  min-height: 40px;\n  overflow-y: hidden;\n`;\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n  height: 40px;\n`;\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 1rem;\n`;\nconst MoreInfoButton = styled.button`\n  background-color: transparent;\n  color: #3c8ce7;\n  border: 1px solid #3c8ce7;\n  padding: 5px 10px;\n  font-size: 0.8rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-top: 0.5rem;\n`;\nconst parseMarkdown = markdown => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = source => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\nconst AIChat = ({\n  day,\n  tasks,\n  onUpdateDeliverable,\n  onNextDay\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [showNextDayButton, setShowNextDayButton] = useState(false);\n  const [checkpoints, setCheckpoints] = useState({\n    goalDefined: false,\n    challengeIdentified: false,\n    opportunityIdentified: false\n  });\n  const inputRef = useRef(null);\n  const getAIResponse = useCallback(async (prompt, currentDay) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay, messages));\n      const aiMessage = {\n        text: aiResponse,\n        isUser: false\n      };\n      setMessages(prev => [...prev, aiMessage]);\n\n      // After getting AI response, analyze it to update checkpoints\n      const newCheckpoints = analyzeResponseForCheckpoints(aiResponse, checkpoints);\n      setCheckpoints(newCheckpoints);\n\n      // If all checkpoints are met, show next day button\n      if (Object.values(newCheckpoints).every(Boolean)) {\n        setShowNextDayButton(true);\n        const deliverable = await getGPTResponse(getDeliverablePrompt(prompt, currentDay, messages));\n        onUpdateDeliverable(currentDay, deliverable);\n      }\n\n      // Choose next prompt based on unmet checkpoints\n      const nextPrompt = chooseNextPrompt(newCheckpoints);\n      if (nextPrompt) {\n        // Trigger next AI response with new prompt\n        await getAIResponse(nextPrompt, currentDay);\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        text: \"I apologize, but I'm having trouble processing that request. Let's try a different approach. \" + getSprintTip(day),\n        isUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [checkpoints, day, messages, onUpdateDeliverable]);\n  useEffect(() => {\n    if (!hasInitialized) {\n      const initialPrompt = `Hi, I'm Relay, your AI assistant for this mini design sprint. Welcome to Day ${day}! ${sprintGuidance[day].prompt}`;\n      setMessages([{\n        text: initialPrompt,\n        isUser: false\n      }]);\n      setHasInitialized(true);\n    }\n  }, [day, hasInitialized]);\n  useEffect(() => {\n    if (day > 1) {\n      getAIResponse(`Welcome to Day ${day}! ${sprintGuidance[day].prompt}`, day);\n    }\n  }, [day, getAIResponse]);\n  const debouncedHandleSend = useCallback(debounce(async () => {\n    if (input.trim() && !isLoading) {\n      const userMessage = {\n        text: input,\n        isUser: true\n      };\n      setMessages(prev => [...prev, userMessage]);\n      const currentInput = input;\n      setInput('');\n      await getAIResponse(currentInput, day);\n    }\n  }, 300), [input, isLoading, day, getAIResponse]);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n    e.target.style.height = 'auto';\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      debouncedHandleSend();\n    }\n  };\n  const handleNextDay = () => {\n    setShowNextDayButton(false);\n    onNextDay();\n  };\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.style.height = 'auto';\n      inputRef.current.style.height = `${inputRef.current.scrollHeight}px`;\n    }\n  }, [input]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChatContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(Message, {\n    key: index,\n    isUser: message.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }, !message.isUser && /*#__PURE__*/React.createElement(RelayIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 33\n    }\n  }, \":-) Relay\"), parseMarkdown(message.text)))), /*#__PURE__*/React.createElement(InputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: inputRef,\n    value: input,\n    onChange: handleInputChange,\n    onKeyPress: handleKeyPress,\n    placeholder: \"Type your message...\",\n    disabled: isLoading,\n    rows: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SendButton, {\n    onClick: debouncedHandleSend,\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, isLoading ? 'Thinking...' : 'Send')), showNextDayButton && /*#__PURE__*/React.createElement(NextDayButton, {\n    onClick: handleNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, \"Move to Day \", day + 1), !isLoading && /*#__PURE__*/React.createElement(MoreInfoButton, {\n    onClick: () => getAIResponse(\"Can you elaborate on that?\", day, false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }\n  }, \"More Info\"));\n};\nconst analyzeResponseForCheckpoints = (response, currentCheckpoints) => {\n  const newCheckpoints = {\n    ...currentCheckpoints\n  };\n  if (response.includes(\"long-term goal\")) newCheckpoints.goalDefined = true;\n  if (response.includes(\"challenge\")) newCheckpoints.challengeIdentified = true;\n  if (response.includes(\"opportunity\")) newCheckpoints.opportunityIdentified = true;\n  return newCheckpoints;\n};\nconst chooseNextPrompt = checkpoints => {\n  if (!checkpoints.goalDefined) return \"Let's focus on defining your long-term goal. What do you want to achieve?\";\n  if (!checkpoints.challengeIdentified) return \"Now, let's identify a key challenge you might face. What obstacle do you foresee?\";\n  if (!checkpoints.opportunityIdentified) return \"Lastly, can you think of an opportunity that might help you achieve your goal?\";\n  return null; // All checkpoints met\n};\nconst getAIPrompt = (userInput, day, context) => {\n  const {\n    goal,\n    tasks\n  } = sprintGuidance[day];\n  const userMessages = context.filter(msg => msg.isUser).map(msg => msg.text);\n  const lastUserMessage = userMessages[userMessages.length - 1] || '';\n  return `You are Relay, an AI assistant for a mini design sprint. It's Day ${day}. Be extremely concise and direct.\n  Goal: ${goal}\n  Tasks: ${tasks.join(', ')}\n  User's last message: \"${lastUserMessage}\"\n\n  Respond in 1-2 short sentences max. Focus on the most important next step or question.\n  If all tasks are addressed, include [SHOW_NEXT_DAY_BUTTON].\n  Avoid pleasantries or repeating information.`;\n};\nconst getDeliverablePrompt = (userInput, day, context) => {\n  const {\n    goal\n  } = sprintGuidance[day];\n  const allUserInputs = context.filter(msg => msg.isUser).map(msg => msg.text).join(' ');\n  return `Summarize key points for Day ${day} based on: \"${allUserInputs}\"\n  Goal: ${goal}\n  Provide 2-3 bullet points max. Be extremely concise and specific.`;\n};\nexport default AIChat;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","styled","debounce","SimpleMarkdown","getGPTResponse","sprintGuidance","getSprintTip","ChatContainer","div","Message","props","isUser","RelayIcon","span","InputContainer","Input","textarea","SendButton","button","NextDayButton","MoreInfoButton","parseMarkdown","markdown","rawBuiltParser","parserFor","defaultRules","parser","source","blockSource","reactOutput","reactFor","ruleOutput","AIChat","day","tasks","onUpdateDeliverable","onNextDay","messages","setMessages","input","setInput","isLoading","setIsLoading","hasInitialized","setHasInitialized","showNextDayButton","setShowNextDayButton","checkpoints","setCheckpoints","goalDefined","challengeIdentified","opportunityIdentified","inputRef","getAIResponse","prompt","currentDay","aiResponse","getAIPrompt","aiMessage","text","prev","newCheckpoints","analyzeResponseForCheckpoints","Object","values","every","Boolean","deliverable","getDeliverablePrompt","nextPrompt","chooseNextPrompt","error","console","initialPrompt","debouncedHandleSend","trim","userMessage","currentInput","handleInputChange","e","target","value","style","height","scrollHeight","handleKeyPress","key","shiftKey","preventDefault","handleNextDay","current","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","ref","onChange","onKeyPress","placeholder","disabled","rows","onClick","response","currentCheckpoints","includes","userInput","context","goal","userMessages","filter","msg","lastUserMessage","length","join","allUserInputs"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport { debounce } from 'lodash';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\n\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #1e1e1e;\n  border-radius: 8px;\n  padding: 1.5rem;\n  font-family: 'Roboto', sans-serif;\n  height: 60vh;\n  overflow-y: auto;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#2a2a2a'};\n  color: #ffffff;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 80%;\n`;\n\nconst RelayIcon = styled.span`\n  color: #3c8ce7;\n  margin-right: 0.5rem;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n  align-items: flex-end;\n`;\n\nconst Input = styled.textarea`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #2a2a2a;\n  color: #ffffff;\n  resize: none;\n  min-height: 40px;\n  overflow-y: hidden;\n`;\n\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n  height: 40px;\n`;\n\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 1rem;\n`;\n\nconst MoreInfoButton = styled.button`\n  background-color: transparent;\n  color: #3c8ce7;\n  border: 1px solid #3c8ce7;\n  padding: 5px 10px;\n  font-size: 0.8rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-top: 0.5rem;\n`;\n\nconst parseMarkdown = (markdown) => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = (source) => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\n\nconst AIChat = ({ day, tasks, onUpdateDeliverable, onNextDay }) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [showNextDayButton, setShowNextDayButton] = useState(false);\n  const [checkpoints, setCheckpoints] = useState({\n    goalDefined: false,\n    challengeIdentified: false,\n    opportunityIdentified: false\n  });\n  const inputRef = useRef(null);\n\n  const getAIResponse = useCallback(async (prompt, currentDay) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay, messages));\n      const aiMessage = { text: aiResponse, isUser: false };\n      setMessages(prev => [...prev, aiMessage]);\n\n      // After getting AI response, analyze it to update checkpoints\n      const newCheckpoints = analyzeResponseForCheckpoints(aiResponse, checkpoints);\n      setCheckpoints(newCheckpoints);\n\n      // If all checkpoints are met, show next day button\n      if (Object.values(newCheckpoints).every(Boolean)) {\n        setShowNextDayButton(true);\n        const deliverable = await getGPTResponse(getDeliverablePrompt(prompt, currentDay, messages));\n        onUpdateDeliverable(currentDay, deliverable);\n      }\n\n      // Choose next prompt based on unmet checkpoints\n      const nextPrompt = chooseNextPrompt(newCheckpoints);\n      if (nextPrompt) {\n        // Trigger next AI response with new prompt\n        await getAIResponse(nextPrompt, currentDay);\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, { \n        text: \"I apologize, but I'm having trouble processing that request. Let's try a different approach. \" + getSprintTip(day), \n        isUser: false \n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [checkpoints, day, messages, onUpdateDeliverable]);\n\n  useEffect(() => {\n    if (!hasInitialized) {\n      const initialPrompt = `Hi, I'm Relay, your AI assistant for this mini design sprint. Welcome to Day ${day}! ${sprintGuidance[day].prompt}`;\n      setMessages([{ text: initialPrompt, isUser: false }]);\n      setHasInitialized(true);\n    }\n  }, [day, hasInitialized]);\n\n  useEffect(() => {\n    if (day > 1) {\n      getAIResponse(`Welcome to Day ${day}! ${sprintGuidance[day].prompt}`, day);\n    }\n  }, [day, getAIResponse]);\n\n  const debouncedHandleSend = useCallback(\n    debounce(async () => {\n      if (input.trim() && !isLoading) {\n        const userMessage = { text: input, isUser: true };\n        setMessages(prev => [...prev, userMessage]);\n        const currentInput = input;\n        setInput('');\n        await getAIResponse(currentInput, day);\n      }\n    }, 300),\n    [input, isLoading, day, getAIResponse]\n  );\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n    e.target.style.height = 'auto';\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      debouncedHandleSend();\n    }\n  };\n\n  const handleNextDay = () => {\n    setShowNextDayButton(false);\n    onNextDay();\n  };\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.style.height = 'auto';\n      inputRef.current.style.height = `${inputRef.current.scrollHeight}px`;\n    }\n  }, [input]);\n\n  return (\n    <>\n      <ChatContainer>\n        {messages.map((message, index) => (\n          <Message key={index} isUser={message.isUser}>\n            {!message.isUser && <RelayIcon>:-) Relay</RelayIcon>}\n            {parseMarkdown(message.text)}\n          </Message>\n        ))}\n      </ChatContainer>\n      <InputContainer>\n        <Input\n          ref={inputRef}\n          value={input}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Type your message...\"\n          disabled={isLoading}\n          rows={1}\n        />\n        <SendButton onClick={debouncedHandleSend} disabled={isLoading}>\n          {isLoading ? 'Thinking...' : 'Send'}\n        </SendButton>\n      </InputContainer>\n      {showNextDayButton && (\n        <NextDayButton onClick={handleNextDay}>\n          Move to Day {day + 1}\n        </NextDayButton>\n      )}\n      {!isLoading && (\n        <MoreInfoButton onClick={() => getAIResponse(\"Can you elaborate on that?\", day, false)}>\n          More Info\n        </MoreInfoButton>\n      )}\n    </>\n  );\n};\n\nconst analyzeResponseForCheckpoints = (response, currentCheckpoints) => {\n  const newCheckpoints = { ...currentCheckpoints };\n  if (response.includes(\"long-term goal\")) newCheckpoints.goalDefined = true;\n  if (response.includes(\"challenge\")) newCheckpoints.challengeIdentified = true;\n  if (response.includes(\"opportunity\")) newCheckpoints.opportunityIdentified = true;\n  return newCheckpoints;\n};\n\nconst chooseNextPrompt = (checkpoints) => {\n  if (!checkpoints.goalDefined) return \"Let's focus on defining your long-term goal. What do you want to achieve?\";\n  if (!checkpoints.challengeIdentified) return \"Now, let's identify a key challenge you might face. What obstacle do you foresee?\";\n  if (!checkpoints.opportunityIdentified) return \"Lastly, can you think of an opportunity that might help you achieve your goal?\";\n  return null; // All checkpoints met\n};\n\nconst getAIPrompt = (userInput, day, context) => {\n  const { goal, tasks } = sprintGuidance[day];\n  const userMessages = context.filter(msg => msg.isUser).map(msg => msg.text);\n  const lastUserMessage = userMessages[userMessages.length - 1] || '';\n  \n  return `You are Relay, an AI assistant for a mini design sprint. It's Day ${day}. Be extremely concise and direct.\n  Goal: ${goal}\n  Tasks: ${tasks.join(', ')}\n  User's last message: \"${lastUserMessage}\"\n\n  Respond in 1-2 short sentences max. Focus on the most important next step or question.\n  If all tasks are addressed, include [SHOW_NEXT_DAY_BUTTON].\n  Avoid pleasantries or repeating information.`;\n};\n\nconst getDeliverablePrompt = (userInput, day, context) => {\n  const { goal } = sprintGuidance[day];\n  const allUserInputs = context.filter(msg => msg.isUser).map(msg => msg.text).join(' ');\n  return `Summarize key points for Day ${day} based on: \"${allUserInputs}\"\n  Goal: ${goal}\n  Provide 2-3 bullet points max. Be extremely concise and specific.`;\n};\n\nexport default AIChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}