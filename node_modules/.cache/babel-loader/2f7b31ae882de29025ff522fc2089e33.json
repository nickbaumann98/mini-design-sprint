{"ast":null,"code":"const API_KEY = process.env.REACT_APP_GPT_API_KEY;\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nexport async function getGPTResponse(prompt) {\n  if (!API_KEY) {\n    console.error('API key is missing. Please check your .env file.');\n    throw new Error('API key is missing');\n  }\n  try {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"user\",\n          content: prompt\n        }],\n        temperature: 0.7\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data.choices || data.choices.length === 0) {\n      throw new Error('No choices returned from API');\n    }\n    return data.choices[0].message.content;\n  } catch (error) {\n    console.error('Error calling GPT API:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_KEY","process","env","REACT_APP_GPT_API_KEY","API_URL","getGPTResponse","prompt","console","error","Error","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","temperature","ok","status","data","json","choices","length","message"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/utils/gptService.js"],"sourcesContent":["const API_KEY = process.env.REACT_APP_GPT_API_KEY;\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\n\nexport async function getGPTResponse(prompt) {\n  if (!API_KEY) {\n    console.error('API key is missing. Please check your .env file.');\n    throw new Error('API key is missing');\n  }\n\n  try {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [{ role: \"user\", content: prompt }],\n        temperature: 0.7\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    if (!data.choices || data.choices.length === 0) {\n      throw new Error('No choices returned from API');\n    }\n    return data.choices[0].message.content;\n  } catch (error) {\n    console.error('Error calling GPT API:', error);\n    throw error;\n  }\n}"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB;AACjD,MAAMC,OAAO,GAAG,4CAA4C;AAE5D,OAAO,eAAeC,cAAcA,CAACC,MAAM,EAAE;EAC3C,IAAI,CAACN,OAAO,EAAE;IACZO,OAAO,CAACC,KAAK,CAAC,kDAAkD,CAAC;IACjE,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;EACvC;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,OAAO,EAAE;MACpCQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUb,OAAO;MACpC,CAAC;MACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEd;QAAO,CAAC,CAAC;QAC7Ce,WAAW,EAAE;MACf,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACX,QAAQ,CAACY,EAAE,EAAE;MAChB,MAAM,IAAIb,KAAK,CAAC,uBAAuBC,QAAQ,CAACa,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;IAClC,IAAI,CAACD,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACE,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;MAC9C,MAAM,IAAIlB,KAAK,CAAC,8BAA8B,CAAC;IACjD;IACA,OAAOe,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,CAACR,OAAO;EACxC,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}