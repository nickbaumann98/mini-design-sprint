{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport InputWithSendIcon from './InputWithSendIcon';\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n`;\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\nconst Objectives = styled.ul`\n  margin-bottom: 20px;\n  color: #b0b0b0;\n`;\nconst Question = styled.h2`\n  font-size: 1.8rem;\n  margin-bottom: 20px;\n`;\nconst FeedbackArea = styled.div`\n  background-color: #f8f9fa;\n  color: #1e1e1e;\n  padding: 20px;\n  border-radius: 15px;\n  margin-top: 20px;\n`;\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n`;\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [input, setInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [stickyNotes, setStickyNotes] = useState([]);\n  const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n  const handleSubmit = async () => {\n    const prompt = `Day ${currentDay} of Design Sprint. User input: \"${input}\". ${getCurrentPrompt()} Provide specific, constructive feedback as an expert design sprint coach. If the input is sufficient to meet the day's objectives, suggest moving to the next day. If not, guide the user to improve their response.`;\n    try {\n      const response = await getGPTResponse(prompt);\n      setFeedback(response);\n      setSprintData(prev => ({\n        ...prev,\n        [currentDay]: [...(prev[currentDay] || []), {\n          question: getCurrentPrompt(),\n          answer: input\n        }]\n      }));\n      setInput('');\n      if (response.toLowerCase().includes(\"next day\") || response.toLowerCase().includes(\"move on\")) {\n        const summaryPrompt = `Summarize and clarify the following input for Day ${currentDay} of the Design Sprint: ${input}`;\n        const summary = await getGPTResponse(summaryPrompt);\n        setSprintData(prev => ({\n          ...prev,\n          [currentDay]: [...prev[currentDay], {\n            question: \"Summary\",\n            answer: summary\n          }]\n        }));\n        setIsReadyForNextDay(true);\n      }\n    } catch (error) {\n      console.error(\"Error getting AI response:\", error);\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n    }\n  };\n  const moveToNextDay = () => {\n    setCurrentDay(prev => Math.min(prev + 1, 5));\n    setFeedback('');\n    setIsReadyForNextDay(false);\n  };\n  const addStickyNote = note => {\n    setStickyNotes(prev => [...prev, note]);\n  };\n  useEffect(() => {\n    const initialPrompt = `Welcome to Day ${currentDay} of the Design Sprint. ${getCurrentPrompt()} As an expert design sprint coach, provide a brief, encouraging message to start the day.`;\n    getGPTResponse(initialPrompt).then(setFeedback);\n  }, [currentDay, getCurrentPrompt]);\n  return /*#__PURE__*/React.createElement(SprintContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MainContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, `Day ${currentDay}: ${sprintGuidance[currentDay].goal}`), /*#__PURE__*/React.createElement(Objectives, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, getCurrentObjectives().map((objective, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, objective))), /*#__PURE__*/React.createElement(Question, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, getCurrentPrompt()), /*#__PURE__*/React.createElement(InputWithSendIcon, {\n    value: input,\n    onChange: e => setInput(e.target.value),\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), feedback && /*#__PURE__*/React.createElement(FeedbackArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 22\n    }\n  }, feedback), isReadyForNextDay && /*#__PURE__*/React.createElement(NextDayButton, {\n    onClick: moveToNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 31\n    }\n  }, \"Move to Day \", currentDay + 1)), /*#__PURE__*/React.createElement(OutputSidebar, {\n    sprintData: sprintData,\n    currentDay: currentDay,\n    stickyNotes: stickyNotes,\n    onAddStickyNote: addStickyNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }));\n};\nexport default DaySprint;","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","getGPTResponse","sprintGuidance","OutputSidebar","InputWithSendIcon","SprintContainer","div","MainContent","Header","h1","Objectives","ul","Question","h2","FeedbackArea","NextDayButton","button","DaySprint","currentDay","setCurrentDay","input","setInput","feedback","setFeedback","sprintData","setSprintData","stickyNotes","setStickyNotes","isReadyForNextDay","setIsReadyForNextDay","getCurrentPrompt","prompt","getCurrentObjectives","objectives","handleSubmit","response","prev","question","answer","toLowerCase","includes","summaryPrompt","summary","error","console","moveToNextDay","Math","min","addStickyNote","note","initialPrompt","then","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","goal","map","objective","index","key","value","onChange","e","target","onSubmit","onClick","onAddStickyNote"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport InputWithSendIcon from './InputWithSendIcon';\n\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\n\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n`;\n\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\n\nconst Objectives = styled.ul`\n  margin-bottom: 20px;\n  color: #b0b0b0;\n`;\n\nconst Question = styled.h2`\n  font-size: 1.8rem;\n  margin-bottom: 20px;\n`;\n\nconst FeedbackArea = styled.div`\n  background-color: #f8f9fa;\n  color: #1e1e1e;\n  padding: 20px;\n  border-radius: 15px;\n  margin-top: 20px;\n`;\n\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n`;\n\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [input, setInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [stickyNotes, setStickyNotes] = useState([]);\n  const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n\n  const handleSubmit = async () => {\n    const prompt = `Day ${currentDay} of Design Sprint. User input: \"${input}\". ${getCurrentPrompt()} Provide specific, constructive feedback as an expert design sprint coach. If the input is sufficient to meet the day's objectives, suggest moving to the next day. If not, guide the user to improve their response.`;\n    \n    try {\n      const response = await getGPTResponse(prompt);\n      setFeedback(response);\n      \n      setSprintData(prev => ({\n        ...prev,\n        [currentDay]: [...(prev[currentDay] || []), { question: getCurrentPrompt(), answer: input }]\n      }));\n      setInput('');\n\n      if (response.toLowerCase().includes(\"next day\") || response.toLowerCase().includes(\"move on\")) {\n        const summaryPrompt = `Summarize and clarify the following input for Day ${currentDay} of the Design Sprint: ${input}`;\n        const summary = await getGPTResponse(summaryPrompt);\n        setSprintData(prev => ({\n          ...prev,\n          [currentDay]: [...prev[currentDay], { question: \"Summary\", answer: summary }]\n        }));\n        setIsReadyForNextDay(true);\n      }\n    } catch (error) {\n      console.error(\"Error getting AI response:\", error);\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n    }\n  };\n\n  const moveToNextDay = () => {\n    setCurrentDay(prev => Math.min(prev + 1, 5));\n    setFeedback('');\n    setIsReadyForNextDay(false);\n  };\n\n  const addStickyNote = (note) => {\n    setStickyNotes(prev => [...prev, note]);\n  };\n\n  useEffect(() => {\n    const initialPrompt = `Welcome to Day ${currentDay} of the Design Sprint. ${getCurrentPrompt()} As an expert design sprint coach, provide a brief, encouraging message to start the day.`;\n    getGPTResponse(initialPrompt).then(setFeedback);\n  }, [currentDay, getCurrentPrompt]);\n\n  return (\n    <SprintContainer>\n      <MainContent>\n        <Header>{`Day ${currentDay}: ${sprintGuidance[currentDay].goal}`}</Header>\n        <Objectives>\n          {getCurrentObjectives().map((objective, index) => (\n            <li key={index}>{objective}</li>\n          ))}\n        </Objectives>\n        <Question>{getCurrentPrompt()}</Question>\n        <InputWithSendIcon\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onSubmit={handleSubmit}\n        />\n        {feedback && <FeedbackArea>{feedback}</FeedbackArea>}\n        {isReadyForNextDay && <NextDayButton onClick={moveToNextDay}>Move to Day {currentDay + 1}</NextDayButton>}\n      </MainContent>\n      <OutputSidebar\n        sprintData={sprintData}\n        currentDay={currentDay}\n        stickyNotes={stickyNotes}\n        onAddStickyNote={addStickyNote}\n      />\n    </SprintContainer>\n  );\n};\n\nexport default DaySprint;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}