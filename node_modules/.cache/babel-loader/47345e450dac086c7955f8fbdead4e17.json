{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport InputWithSendIcon from './InputWithSendIcon';\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\nconst AIMessage = styled.div`\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n  padding: 15px;\n  border-radius: 15px;\n  margin-bottom: 20px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  position: relative;\n  max-width: 80%;\n  align-self: flex-start;\n`;\nconst RelayIcon = styled.span`\n  font-weight: bold;\n  color: #3c8ce7;\n  margin-right: 5px;\n`;\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\nconst StickyNotesSection = styled.div`\n  margin-top: 2rem;\n`;\nconst StickyNotesGrid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\nconst StickyNote = styled.div`\n  background-color: #feff9c;\n  padding: 0.75rem;\n  width: 150px;\n  height: 150px;\n  border-radius: 3px;\n  color: #000000;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  text-align: center;\n  position: relative;\n`;\nconst DeleteNote = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  background: none;\n  border: none;\n  color: #ff4136;\n  cursor: pointer;\n  font-size: 1.2rem;\n`;\nconst StickyNoteInput = styled.input`\n  width: 100%;\n  padding: 0.75rem;\n  margin-bottom: 0.75rem;\n  border: none;\n  border-radius: 3px;\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n`;\nconst StickyNotePrompt = styled.p`\n  color: #b0b0b0;\n  font-style: italic;\n  margin-bottom: 10px;\n`;\nconst ConversationLog = styled.div`\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n  max-height: 300px;\n  overflow-y: auto;\n`;\nconst LogEntry = styled.div`\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#1e1e1e'};\n  border-radius: 5px;\n  color: ${props => props.isUser ? '#ffffff' : '#e0e0e0'};\n`;\nconst CopyButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n`;\nconst Timer = styled.div`\n  font-size: 2rem;\n  text-align: center;\n  margin: 1rem 0;\n`;\nconst CrazyEightContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst CrazyEightInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\nconst CrazyEightInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  margin-bottom: 0.5rem;\n  border: 1px solid #3c8ce7;\n  border-radius: 5px;\n`;\nconst AddIdeaButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n`;\nconst StoryboardContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst StoryboardInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\nconst StoryboardSection = styled.textarea`\n  width: 100%;\n  height: 150px;\n  margin-top: 1rem;\n  padding: 0.5rem;\n  border-radius: 5px;\n`;\nconst EndTimerButton = styled(CopyButton)`\n  margin-top: 1rem;\n`;\nconst SubmitButton = styled(CopyButton)`\n  margin-top: 1rem;\n  font-size: 1.2rem;\n  padding: 1rem 2rem;\n`;\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [input, setInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [stickyNotes, setStickyNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [conversationLog, setConversationLog] = useState([]);\n  const [timerSeconds, setTimerSeconds] = useState(480); // 8 minutes\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [crazyEightIdeas, setCrazyEightIdeas] = useState(['']);\n  const [storyboardSections, setStoryboardSections] = useState(['', '', '']);\n  const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n  const handleSubmit = async () => {\n    if (!input.trim()) return;\n    setIsTyping(true);\n    const userInput = input;\n    setInput('');\n    setConversationLog(prev => [...prev, {\n      isUser: true,\n      text: userInput\n    }]);\n    const prompt = `Day ${currentDay} of Design Sprint. User input: \"${userInput}\". ${getCurrentPrompt()} Provide guidance and suggestions to help the user develop their own ideas. Do not provide direct answers or solutions. Encourage the user to think critically and come up with their own responses.`;\n    try {\n      const response = await getGPTResponse(prompt);\n      const cleanedResponse = response.replace('[SHOW_NEXT_DAY_BUTTON]', '').trim();\n      setFeedback(cleanedResponse);\n      setConversationLog(prev => [...prev, {\n        isUser: false,\n        text: cleanedResponse\n      }]);\n      const currentObjectives = getCurrentObjectives();\n      const currentObjective = currentObjectives[Object.keys(sprintData[currentDay] || {}).length];\n      if (currentObjective) {\n        let summary;\n        if (currentDay === 2) {\n          if (currentObjective === \"Crazy 8s\") {\n            summary = crazyEightIdeas.filter(idea => idea.trim() !== '');\n          } else if (currentObjective === \"Solution Sketch\") {\n            summary = storyboardSections.map((section, index) => `Panel ${index + 1}: ${section}`);\n          }\n        } else {\n          const summaryPrompt = `Summarize and refine the following user input for the Design Sprint Day ${currentDay}, objective: ${currentObjective}. User input: \"${userInput}\". Provide a concise, clear summary that captures the essence of the user's input.`;\n          summary = await getGPTResponse(summaryPrompt);\n        }\n        setSprintData(prev => ({\n          ...prev,\n          [currentDay]: {\n            ...prev[currentDay],\n            [currentObjective]: summary\n          }\n        }));\n      }\n      checkDayCompletion();\n    } catch (error) {\n      console.error(\"Error getting AI response:\", error);\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n      setConversationLog(prev => [...prev, {\n        isUser: false,\n        text: \"Error: Unable to process response.\"\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  const submitDay2 = () => {\n    if (crazyEightIdeas.filter(idea => idea.trim() !== '').length === 8) {\n      setSprintData(prev => ({\n        ...prev,\n        [currentDay]: {\n          \"Crazy 8s\": crazyEightIdeas\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all 8 ideas before submitting.\");\n    }\n  };\n  const submitDay3 = () => {\n    if (storyboardSections.every(section => section.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        [currentDay]: {\n          \"Solution Sketch\": storyboardSections.map((section, index) => `Panel ${index + 1}: ${section}`)\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all three storyboard panels before submitting.\");\n    }\n  };\n  const moveToNextDay = useCallback(() => {\n    setCurrentDay(prev => {\n      const nextDay = Math.min(prev + 1, 5);\n      // Reset states for the next day\n      setFeedback('');\n      setIsReadyForNextDay(false);\n      if (prev === 2) {\n        setCrazyEightIdeas(['']);\n      } else if (prev === 3) {\n        setStoryboardSections(['', '', '']);\n      }\n      setIsTimerRunning(false);\n      setTimerSeconds(480);\n      return nextDay;\n    });\n  }, []);\n  const checkDayCompletion = useCallback(() => {\n    if (currentDay === 2) {\n      const isCrazyEightsComplete = crazyEightIdeas.filter(idea => idea.trim() !== '').length === 8;\n      setIsReadyForNextDay(isCrazyEightsComplete);\n    } else if (currentDay === 3) {\n      const isStoryboardComplete = storyboardSections.every(section => section.trim() !== '');\n      setIsReadyForNextDay(isStoryboardComplete);\n    } else {\n      const completedObjectives = Object.keys(sprintData[currentDay] || {}).length;\n      const totalObjectives = getCurrentObjectives().length;\n      setIsReadyForNextDay(completedObjectives === totalObjectives);\n    }\n  }, [currentDay, crazyEightIdeas, storyboardSections, sprintData, getCurrentObjectives]);\n  useEffect(() => {\n    checkDayCompletion();\n  }, [crazyEightIdeas, storyboardSections, sprintData, checkDayCompletion]);\n  useEffect(() => {\n    let interval;\n    if (isTimerRunning && timerSeconds > 0) {\n      interval = setInterval(() => {\n        setTimerSeconds(seconds => seconds - 1);\n      }, 1000);\n    } else if (timerSeconds === 0) {\n      setIsTimerRunning(false);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerRunning, timerSeconds]);\n  useEffect(() => {\n    const initialPrompt = `Welcome to Day ${currentDay} of the Design Sprint. ${getCurrentPrompt()} As an expert design sprint coach, provide a brief, encouraging message to start the day. Remind the user of the objectives they need to complete.`;\n    setIsTyping(true);\n    getGPTResponse(initialPrompt).then(response => {\n      const cleanedResponse = response.replace('[SHOW_NEXT_DAY_BUTTON]', '').trim();\n      setFeedback(cleanedResponse);\n      setIsTyping(false);\n      setConversationLog([{\n        isUser: false,\n        text: cleanedResponse\n      }]);\n    });\n  }, [currentDay, getCurrentPrompt]);\n  const startTimer = () => {\n    setIsTimerRunning(true);\n    setTimerSeconds(480);\n  };\n  const endTimer = () => {\n    setIsTimerRunning(false);\n  };\n  const addStickyNote = () => {\n    if (newNote.trim()) {\n      setStickyNotes(prev => [...prev, newNote]);\n      setNewNote('');\n    }\n  };\n  const deleteStickyNote = index => {\n    setStickyNotes(prev => prev.filter((_, i) => i !== index));\n  };\n  const addCrazyEightIdea = () => {\n    if (crazyEightIdeas.length < 8) {\n      setCrazyEightIdeas(prev => [...prev, '']);\n    }\n  };\n  const updateCrazyEightIdea = (index, value) => {\n    setCrazyEightIdeas(prev => {\n      const newIdeas = [...prev];\n      newIdeas[index] = value;\n      return newIdeas;\n    });\n  };\n  const updateStoryboardSection = (index, value) => {\n    setStoryboardSections(prev => {\n      const newSections = [...prev];\n      newSections[index] = value;\n      return newSections;\n    });\n    checkDayCompletion();\n  };\n  const copyConversationLog = () => {\n    const logText = conversationLog.map(entry => `**${entry.isUser ? 'User' : 'Relay'}**: ${entry.text}`).join('\\n');\n    navigator.clipboard.writeText(logText);\n  };\n  return /*#__PURE__*/React.createElement(SprintContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MainContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 9\n    }\n  }, `Day ${currentDay}: ${sprintGuidance[currentDay].goal}`), isTyping ? /*#__PURE__*/React.createElement(TypingIndicator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 13\n    }\n  })) : feedback && /*#__PURE__*/React.createElement(AIMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RelayIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 15\n    }\n  }, \"Relay :)\"), \" \", feedback), /*#__PURE__*/React.createElement(InputWithSendIcon, {\n    value: input,\n    onChange: e => setInput(e.target.value),\n    onSubmit: handleSubmit,\n    onKeyPress: e => e.key === 'Enter' && !e.shiftKey && handleSubmit(),\n    placeholder: currentDay === 2 ? \"Need more instructions? Please ask!\" : \"Enter your response here...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 9\n    }\n  }), isReadyForNextDay && /*#__PURE__*/React.createElement(NextDayButton, {\n    onClick: moveToNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 11\n    }\n  }, \"Ready to move to Day \", currentDay + 1, \"?\"), currentDay === 2 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CrazyEightContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CrazyEightInstructions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 15\n    }\n  }, \"Crazy 8s is a fast sketching exercise where you'll create 8 distinct ideas in 8 minutes. The goal is to push beyond your first idea and generate a wide range of possibilities. Don't worry about quality or feasibility at this stage - focus on quantity and variety!\"), /*#__PURE__*/React.createElement(CopyButton, {\n    onClick: startTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 15\n    }\n  }, \"Start Crazy 8s Timer\"), /*#__PURE__*/React.createElement(Timer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 15\n    }\n  }, Math.floor(timerSeconds / 60), \":\", (timerSeconds % 60).toString().padStart(2, '0')), crazyEightIdeas.map((idea, index) => /*#__PURE__*/React.createElement(CrazyEightInput, {\n    key: index,\n    value: idea,\n    onChange: e => updateCrazyEightIdea(index, e.target.value),\n    placeholder: `Crazy 8s Idea ${index + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 17\n    }\n  })), crazyEightIdeas.length < 8 && /*#__PURE__*/React.createElement(AddIdeaButton, {\n    onClick: addCrazyEightIdea,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 17\n    }\n  }, \"Add Idea\"), isTimerRunning && /*#__PURE__*/React.createElement(EndTimerButton, {\n    onClick: endTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 17\n    }\n  }, \"End Timer and Move to Storyboard\")), /*#__PURE__*/React.createElement(StoryboardContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(StoryboardInstructions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 15\n    }\n  }, \"Create a three-panel storyboard that outlines your chosen solution. Each panel should represent a key step or moment in your solution: 1. The problem or starting point 2. The main action or change 3. The result or outcome Describe each panel in detail, focusing on what the user sees and does.\"), storyboardSections.map((section, index) => /*#__PURE__*/React.createElement(StoryboardSection, {\n    key: index,\n    value: section,\n    onChange: e => updateStoryboardSection(index, e.target.value),\n    placeholder: `Describe panel ${index + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 17\n    }\n  }))), isReadyForNextDay && /*#__PURE__*/React.createElement(SubmitButton, {\n    onClick: submitDay2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 15\n    }\n  }, \"Submit Crazy 8s and Move to Day 3\")), currentDay === 3 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StoryboardContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(StoryboardInstructions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 15\n    }\n  }, \"Create a three-panel storyboard that outlines your chosen solution. Each panel should represent a key step or moment in your solution: 1. The problem or starting point 2. The main action or change 3. The result or outcome Describe each panel in detail, focusing on what the user sees and does.\"), storyboardSections.map((section, index) => /*#__PURE__*/React.createElement(StoryboardSection, {\n    key: index,\n    value: section,\n    onChange: e => updateStoryboardSection(index, e.target.value),\n    placeholder: `Describe panel ${index + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 17\n    }\n  }))), isReadyForNextDay && /*#__PURE__*/React.createElement(SubmitButton, {\n    onClick: submitDay3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 15\n    }\n  }, \"Submit Storyboard and Move to Day 4\")), /*#__PURE__*/React.createElement(StickyNotesSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StickyNotePrompt, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 11\n    }\n  }, \"Add your quick thoughts to the sticky note board:\"), /*#__PURE__*/React.createElement(StickyNotesGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 11\n    }\n  }, stickyNotes.map((note, index) => /*#__PURE__*/React.createElement(StickyNote, {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 15\n    }\n  }, note, /*#__PURE__*/React.createElement(DeleteNote, {\n    onClick: () => deleteStickyNote(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 17\n    }\n  }, \"\\xD7\")))), /*#__PURE__*/React.createElement(StickyNoteInput, {\n    value: newNote,\n    onChange: e => setNewNote(e.target.value),\n    placeholder: \"Add a new note...\",\n    onKeyPress: e => e.key === 'Enter' && addStickyNote(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(ConversationLog, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 11\n    }\n  }, \"Conversation Log (For Development)\"), /*#__PURE__*/React.createElement(CopyButton, {\n    onClick: copyConversationLog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 11\n    }\n  }, \"Copy Log\"), conversationLog.map((entry, index) => /*#__PURE__*/React.createElement(LogEntry, {\n    key: index,\n    isUser: entry.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 15\n    }\n  }, entry.isUser ? 'User' : 'Relay'), \": \", entry.text)))), /*#__PURE__*/React.createElement(OutputSidebar, {\n    sprintData: sprintData,\n    currentDay: currentDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 7\n    }\n  }));\n};\nexport default DaySprint;","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","keyframes","getGPTResponse","sprintGuidance","OutputSidebar","InputWithSendIcon","SprintContainer","div","MainContent","Header","h1","AIMessage","RelayIcon","span","typing","TypingIndicator","NextDayButton","button","StickyNotesSection","StickyNotesGrid","StickyNote","DeleteNote","StickyNoteInput","input","StickyNotePrompt","p","ConversationLog","LogEntry","props","isUser","CopyButton","Timer","CrazyEightContainer","CrazyEightInstructions","CrazyEightInput","AddIdeaButton","StoryboardContainer","StoryboardInstructions","StoryboardSection","textarea","EndTimerButton","SubmitButton","DaySprint","currentDay","setCurrentDay","setInput","feedback","setFeedback","sprintData","setSprintData","stickyNotes","setStickyNotes","newNote","setNewNote","isTyping","setIsTyping","conversationLog","setConversationLog","timerSeconds","setTimerSeconds","isTimerRunning","setIsTimerRunning","crazyEightIdeas","setCrazyEightIdeas","storyboardSections","setStoryboardSections","isReadyForNextDay","setIsReadyForNextDay","getCurrentPrompt","prompt","getCurrentObjectives","objectives","handleSubmit","trim","userInput","prev","text","response","cleanedResponse","replace","currentObjectives","currentObjective","Object","keys","length","summary","filter","idea","map","section","index","summaryPrompt","checkDayCompletion","error","console","submitDay2","moveToNextDay","alert","submitDay3","every","nextDay","Math","min","isCrazyEightsComplete","isStoryboardComplete","completedObjectives","totalObjectives","interval","setInterval","seconds","clearInterval","initialPrompt","then","startTimer","endTimer","addStickyNote","deleteStickyNote","_","i","addCrazyEightIdea","updateCrazyEightIdea","value","newIdeas","updateStoryboardSection","newSections","copyConversationLog","logText","entry","join","navigator","clipboard","writeText","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","goal","onChange","e","target","onSubmit","onKeyPress","key","shiftKey","placeholder","onClick","Fragment","floor","toString","padStart","note"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport InputWithSendIcon from './InputWithSendIcon';\n\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\n\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\n\nconst AIMessage = styled.div`\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n  padding: 15px;\n  border-radius: 15px;\n  margin-bottom: 20px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  position: relative;\n  max-width: 80%;\n  align-self: flex-start;\n`;\n\nconst RelayIcon = styled.span`\n  font-weight: bold;\n  color: #3c8ce7;\n  margin-right: 5px;\n`;\n\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\n\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\n\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\n\nconst StickyNotesSection = styled.div`\n  margin-top: 2rem;\n`;\n\nconst StickyNotesGrid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nconst StickyNote = styled.div`\n  background-color: #feff9c;\n  padding: 0.75rem;\n  width: 150px;\n  height: 150px;\n  border-radius: 3px;\n  color: #000000;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  text-align: center;\n  position: relative;\n`;\n\nconst DeleteNote = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  background: none;\n  border: none;\n  color: #ff4136;\n  cursor: pointer;\n  font-size: 1.2rem;\n`;\n\nconst StickyNoteInput = styled.input`\n  width: 100%;\n  padding: 0.75rem;\n  margin-bottom: 0.75rem;\n  border: none;\n  border-radius: 3px;\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n`;\n\nconst StickyNotePrompt = styled.p`\n  color: #b0b0b0;\n  font-style: italic;\n  margin-bottom: 10px;\n`;\n\nconst ConversationLog = styled.div`\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n  max-height: 300px;\n  overflow-y: auto;\n`;\n\nconst LogEntry = styled.div`\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#1e1e1e'};\n  border-radius: 5px;\n  color: ${props => props.isUser ? '#ffffff' : '#e0e0e0'};\n`;\n\nconst CopyButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n`;\n\nconst Timer = styled.div`\n  font-size: 2rem;\n  text-align: center;\n  margin: 1rem 0;\n`;\n\nconst CrazyEightContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst CrazyEightInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\n\nconst CrazyEightInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  margin-bottom: 0.5rem;\n  border: 1px solid #3c8ce7;\n  border-radius: 5px;\n`;\n\nconst AddIdeaButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n`;\n\nconst StoryboardContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst StoryboardInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\n\nconst StoryboardSection = styled.textarea`\n  width: 100%;\n  height: 150px;\n  margin-top: 1rem;\n  padding: 0.5rem;\n  border-radius: 5px;\n`;\n\nconst EndTimerButton = styled(CopyButton)`\n  margin-top: 1rem;\n`;\n\nconst SubmitButton = styled(CopyButton)`\n  margin-top: 1rem;\n  font-size: 1.2rem;\n  padding: 1rem 2rem;\n`;\n\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [input, setInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [stickyNotes, setStickyNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [conversationLog, setConversationLog] = useState([]);\n  const [timerSeconds, setTimerSeconds] = useState(480); // 8 minutes\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [crazyEightIdeas, setCrazyEightIdeas] = useState(['']);\n  const [storyboardSections, setStoryboardSections] = useState(['', '', '']);\n  const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n\n  const handleSubmit = async () => {\n    if (!input.trim()) return;\n\n    setIsTyping(true);\n    const userInput = input;\n    setInput('');\n\n    setConversationLog(prev => [...prev, { isUser: true, text: userInput }]);\n\n    const prompt = `Day ${currentDay} of Design Sprint. User input: \"${userInput}\". ${getCurrentPrompt()} Provide guidance and suggestions to help the user develop their own ideas. Do not provide direct answers or solutions. Encourage the user to think critically and come up with their own responses.`;\n\n    try {\n      const response = await getGPTResponse(prompt);\n      const cleanedResponse = response.replace('[SHOW_NEXT_DAY_BUTTON]', '').trim();\n      setFeedback(cleanedResponse);\n      setConversationLog(prev => [...prev, { isUser: false, text: cleanedResponse }]);\n\n      const currentObjectives = getCurrentObjectives();\n      const currentObjective = currentObjectives[Object.keys(sprintData[currentDay] || {}).length];\n\n      if (currentObjective) {\n        let summary;\n        if (currentDay === 2) {\n          if (currentObjective === \"Crazy 8s\") {\n            summary = crazyEightIdeas.filter(idea => idea.trim() !== '');\n          } else if (currentObjective === \"Solution Sketch\") {\n            summary = storyboardSections.map((section, index) => `Panel ${index + 1}: ${section}`);\n          }\n        } else {\n          const summaryPrompt = `Summarize and refine the following user input for the Design Sprint Day ${currentDay}, objective: ${currentObjective}. User input: \"${userInput}\". Provide a concise, clear summary that captures the essence of the user's input.`;\n          summary = await getGPTResponse(summaryPrompt);\n        }\n\n        setSprintData(prev => ({\n          ...prev,\n          [currentDay]: {\n            ...prev[currentDay],\n            [currentObjective]: summary\n          }\n        }));\n      }\n\n      checkDayCompletion();\n    } catch (error) {\n      console.error(\"Error getting AI response:\", error);\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n      setConversationLog(prev => [...prev, { isUser: false, text: \"Error: Unable to process response.\" }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  const submitDay2 = () => {\n    if (crazyEightIdeas.filter(idea => idea.trim() !== '').length === 8) {\n      setSprintData(prev => ({\n        ...prev,\n        [currentDay]: {\n          \"Crazy 8s\": crazyEightIdeas\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all 8 ideas before submitting.\");\n    }\n  };\n\n  const submitDay3 = () => {\n    if (storyboardSections.every(section => section.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        [currentDay]: {\n          \"Solution Sketch\": storyboardSections.map((section, index) => `Panel ${index + 1}: ${section}`)\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all three storyboard panels before submitting.\");\n    }\n  };\n\n  const moveToNextDay = useCallback(() => {\n    setCurrentDay(prev => {\n      const nextDay = Math.min(prev + 1, 5);\n      // Reset states for the next day\n      setFeedback('');\n      setIsReadyForNextDay(false);\n      if (prev === 2) {\n        setCrazyEightIdeas(['']);\n      } else if (prev === 3) {\n        setStoryboardSections(['', '', '']);\n      }\n      setIsTimerRunning(false);\n      setTimerSeconds(480);\n      return nextDay;\n    });\n  }, []);\n\n  const checkDayCompletion = useCallback(() => {\n    if (currentDay === 2) {\n      const isCrazyEightsComplete = crazyEightIdeas.filter(idea => idea.trim() !== '').length === 8;\n      setIsReadyForNextDay(isCrazyEightsComplete);\n    } else if (currentDay === 3) {\n      const isStoryboardComplete = storyboardSections.every(section => section.trim() !== '');\n      setIsReadyForNextDay(isStoryboardComplete);\n    } else {\n      const completedObjectives = Object.keys(sprintData[currentDay] || {}).length;\n      const totalObjectives = getCurrentObjectives().length;\n      setIsReadyForNextDay(completedObjectives === totalObjectives);\n    }\n  }, [currentDay, crazyEightIdeas, storyboardSections, sprintData, getCurrentObjectives]);\n\n  useEffect(() => {\n    checkDayCompletion();\n  }, [crazyEightIdeas, storyboardSections, sprintData, checkDayCompletion]);\n\n  useEffect(() => {\n    let interval;\n    if (isTimerRunning && timerSeconds > 0) {\n      interval = setInterval(() => {\n        setTimerSeconds(seconds => seconds - 1);\n      }, 1000);\n    } else if (timerSeconds === 0) {\n      setIsTimerRunning(false);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerRunning, timerSeconds]);\n\n  useEffect(() => {\n    const initialPrompt = `Welcome to Day ${currentDay} of the Design Sprint. ${getCurrentPrompt()} As an expert design sprint coach, provide a brief, encouraging message to start the day. Remind the user of the objectives they need to complete.`;\n    setIsTyping(true);\n    getGPTResponse(initialPrompt).then(response => {\n      const cleanedResponse = response.replace('[SHOW_NEXT_DAY_BUTTON]', '').trim();\n      setFeedback(cleanedResponse);\n      setIsTyping(false);\n      setConversationLog([{ isUser: false, text: cleanedResponse }]);\n    });\n  }, [currentDay, getCurrentPrompt]);\n\n  const startTimer = () => {\n    setIsTimerRunning(true);\n    setTimerSeconds(480);\n  };\n\n  const endTimer = () => {\n    setIsTimerRunning(false);\n  };\n\n  const addStickyNote = () => {\n    if (newNote.trim()) {\n      setStickyNotes(prev => [...prev, newNote]);\n      setNewNote('');\n    }\n  };\n\n  const deleteStickyNote = (index) => {\n    setStickyNotes(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const addCrazyEightIdea = () => {\n    if (crazyEightIdeas.length < 8) {\n      setCrazyEightIdeas(prev => [...prev, '']);\n    }\n  };\n\n  const updateCrazyEightIdea = (index, value) => {\n    setCrazyEightIdeas(prev => {\n      const newIdeas = [...prev];\n      newIdeas[index] = value;\n      return newIdeas;\n    });\n  };\n\n  const updateStoryboardSection = (index, value) => {\n    setStoryboardSections(prev => {\n      const newSections = [...prev];\n      newSections[index] = value;\n      return newSections;\n    });\n    checkDayCompletion();\n  };\n\n  const copyConversationLog = () => {\n    const logText = conversationLog.map(entry => `**${entry.isUser ? 'User' : 'Relay'}**: ${entry.text}`).join('\\n');\n    navigator.clipboard.writeText(logText);\n  };\n\n  return (\n    <SprintContainer>\n      <MainContent>\n        <Header>{`Day ${currentDay}: ${sprintGuidance[currentDay].goal}`}</Header>\n        {isTyping ? (\n          <TypingIndicator>\n            <span></span>\n            <span></span>\n            <span></span>\n          </TypingIndicator>\n        ) : (\n          feedback && (\n            <AIMessage>\n              <RelayIcon>Relay :)</RelayIcon> {feedback}\n            </AIMessage>\n          )\n        )}\n        <InputWithSendIcon\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onSubmit={handleSubmit}\n          onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSubmit()}\n          placeholder={currentDay === 2 ? \"Need more instructions? Please ask!\" : \"Enter your response here...\"}\n        />\n        {isReadyForNextDay && (\n          <NextDayButton onClick={moveToNextDay}>\n            Ready to move to Day {currentDay + 1}?\n          </NextDayButton>\n        )}\n        {currentDay === 2 && (\n          <>\n            <CrazyEightContainer>\n              <CrazyEightInstructions>\n                Crazy 8s is a fast sketching exercise where you'll create 8 distinct ideas in 8 minutes. The goal is to push beyond your first idea and generate a wide range of possibilities. Don't worry about quality or feasibility at this stage - focus on quantity and variety!\n              </CrazyEightInstructions>\n              <CopyButton onClick={startTimer}>Start Crazy 8s Timer</CopyButton>\n              <Timer>{Math.floor(timerSeconds / 60)}:{(timerSeconds % 60).toString().padStart(2, '0')}</Timer>\n              {crazyEightIdeas.map((idea, index) => (\n                <CrazyEightInput\n                  key={index}\n                  value={idea}\n                  onChange={(e) => updateCrazyEightIdea(index, e.target.value)}\n                  placeholder={`Crazy 8s Idea ${index + 1}`}\n                />\n              ))}\n              {crazyEightIdeas.length < 8 && (\n                <AddIdeaButton onClick={addCrazyEightIdea}>Add Idea</AddIdeaButton>\n              )}\n              {isTimerRunning && (\n                <EndTimerButton onClick={endTimer}>End Timer and Move to Storyboard</EndTimerButton>\n              )}\n            </CrazyEightContainer>\n            <StoryboardContainer>\n              <StoryboardInstructions>\n                Create a three-panel storyboard that outlines your chosen solution. Each panel should represent a key step or moment in your solution:\n                1. The problem or starting point\n                2. The main action or change\n                3. The result or outcome\n                Describe each panel in detail, focusing on what the user sees and does.\n              </StoryboardInstructions>\n              {storyboardSections.map((section, index) => (\n                <StoryboardSection\n                  key={index}\n                  value={section}\n                  onChange={(e) => updateStoryboardSection(index, e.target.value)}\n                  placeholder={`Describe panel ${index + 1}`}\n                />\n              ))}\n            </StoryboardContainer>\n            {isReadyForNextDay && (\n              <SubmitButton onClick={submitDay2}>\n                Submit Crazy 8s and Move to Day 3\n              </SubmitButton>\n            )}\n          </>\n        )}\n        {currentDay === 3 && (\n          <>\n            <StoryboardContainer>\n              <StoryboardInstructions>\n                Create a three-panel storyboard that outlines your chosen solution. Each panel should represent a key step or moment in your solution:\n                1. The problem or starting point\n                2. The main action or change\n                3. The result or outcome\n                Describe each panel in detail, focusing on what the user sees and does.\n              </StoryboardInstructions>\n              {storyboardSections.map((section, index) => (\n                <StoryboardSection\n                  key={index}\n                  value={section}\n                  onChange={(e) => updateStoryboardSection(index, e.target.value)}\n                  placeholder={`Describe panel ${index + 1}`}\n                />\n              ))}\n            </StoryboardContainer>\n            {isReadyForNextDay && (\n              <SubmitButton onClick={submitDay3}>\n                Submit Storyboard and Move to Day 4\n              </SubmitButton>\n            )}\n          </>\n        )}\n        <StickyNotesSection>\n          <StickyNotePrompt>Add your quick thoughts to the sticky note board:</StickyNotePrompt>\n          <StickyNotesGrid>\n            {stickyNotes.map((note, index) => (\n              <StickyNote key={index}>\n                {note}\n                <DeleteNote onClick={() => deleteStickyNote(index)}>×</DeleteNote>\n              </StickyNote>\n            ))}\n          </StickyNotesGrid>\n          <StickyNoteInput\n            value={newNote}\n            onChange={(e) => setNewNote(e.target.value)}\n            placeholder=\"Add a new note...\"\n            onKeyPress={(e) => e.key === 'Enter' && addStickyNote()}\n          />\n        </StickyNotesSection>\n        <ConversationLog>\n          <h3>Conversation Log (For Development)</h3>\n          <CopyButton onClick={copyConversationLog}>Copy Log</CopyButton>\n          {conversationLog.map((entry, index) => (\n            <LogEntry key={index} isUser={entry.isUser}>\n              <strong>{entry.isUser ? 'User' : 'Relay'}</strong>: {entry.text}\n            </LogEntry>\n          ))}\n        </ConversationLog>\n      </MainContent>\n      <OutputSidebar\n        sprintData={sprintData}\n        currentDay={currentDay}\n      />\n    </SprintContainer>\n  );\n};\n\nexport default DaySprint;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}