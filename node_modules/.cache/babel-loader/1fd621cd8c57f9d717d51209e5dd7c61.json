{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport { debounce } from 'lodash';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 60vh;\n  overflow-y: auto;\n  background-color: #2a2a2a;\n  border-radius: 8px;\n  padding: 1rem;\n`;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#4a4a4a'};\n  color: #ffffff;\n  padding: 0.8rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 70%;\n  line-height: 1.5;\n\n  p {\n    margin-bottom: 0.5rem;\n  }\n\n  ul, ol {\n    padding-left: 1.5rem;\n    margin: 0.5rem 0;\n  }\n\n  li {\n    margin-bottom: 0.25rem;\n  }\n\n  strong {\n    font-weight: bold;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    margin-top: 1rem;\n    margin-bottom: 0.5rem;\n  }\n`;\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n`;\nconst Input = styled.textarea`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #3a3a3a;\n  color: #ffffff;\n  resize: none;\n  min-height: 40px;\n  max-height: 200px;\n  overflow-y: auto;\n`;\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n`;\nconst parseMarkdown = markdown => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = source => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\nconst AIChat = ({\n  day,\n  onUpdateDeliverable\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const inputRef = useRef(null);\n  const getAIResponse = useCallback(async (prompt, currentDay, shouldUpdateDeliverable = false) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay));\n      const aiMessage = {\n        text: aiResponse,\n        isUser: false\n      };\n      setMessages(prev => [...prev, aiMessage]);\n      if (shouldUpdateDeliverable) {\n        const deliverable = await getGPTResponse(getDeliverablePrompt(prompt, currentDay));\n        onUpdateDeliverable(currentDay, deliverable);\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        text: \"I apologize, but I'm having trouble processing that request. Let's try a different approach. \" + getSprintTip(day),\n        isUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onUpdateDeliverable, day]);\n  useEffect(() => {\n    if (!hasInitialized) {\n      const initialPrompt = sprintGuidance[day].prompt;\n      setMessages([{\n        text: initialPrompt,\n        isUser: false\n      }]);\n      setHasInitialized(true);\n    }\n  }, [day, hasInitialized]);\n  const debouncedHandleSend = useCallback(debounce(async () => {\n    if (input.trim() && !isLoading) {\n      const userMessage = {\n        text: input,\n        isUser: true\n      };\n      setMessages(prev => [...prev, userMessage]);\n      const currentInput = input;\n      setInput('');\n      await getAIResponse(currentInput, day, true);\n    }\n  }, 300), [input, isLoading, day, getAIResponse]);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n    e.target.style.height = 'inherit';\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      debouncedHandleSend();\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChatContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(Message, {\n    key: index,\n    isUser: message.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, parseMarkdown(message.text)))), /*#__PURE__*/React.createElement(InputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: inputRef,\n    value: input,\n    onChange: handleInputChange,\n    onKeyPress: handleKeyPress,\n    placeholder: \"Type your message...\",\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SendButton, {\n    onClick: debouncedHandleSend,\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, isLoading ? 'Thinking...' : 'Send')));\n};\nconst getAIPrompt = (userInput, day) => {\n  const {\n    goal,\n    tasks\n  } = sprintGuidance[day];\n  return `You are an AI assistant helping with a mini design sprint. It's Day ${day} of the sprint. \n  The goal for today is: ${goal}. \n  Key tasks: ${tasks.join(', ')}. \n  The user input is: \"${userInput}\". \n  Provide guidance, ask relevant follow-up questions, and help the user progress through this day of the sprint. \n  Be concise, friendly, and focused on the day's objectives.`;\n};\nconst getDeliverablePrompt = (userInput, day) => {\n  const {\n    goal\n  } = sprintGuidance[day];\n  return `Based on this user input for Day ${day} of the mini design sprint: \"${userInput}\", \n  create a concise summary of the key decisions or outputs related to the day's goal: ${goal}. \n  Format the response as a brief, bullet-pointed list of no more than 3-5 items.`;\n};\nexport default AIChat;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","styled","debounce","SimpleMarkdown","getGPTResponse","sprintGuidance","getSprintTip","ChatContainer","div","Message","props","isUser","InputContainer","Input","textarea","SendButton","button","parseMarkdown","markdown","rawBuiltParser","parserFor","defaultRules","parser","source","blockSource","reactOutput","reactFor","ruleOutput","AIChat","day","onUpdateDeliverable","messages","setMessages","input","setInput","isLoading","setIsLoading","hasInitialized","setHasInitialized","inputRef","getAIResponse","prompt","currentDay","shouldUpdateDeliverable","aiResponse","getAIPrompt","aiMessage","text","prev","deliverable","getDeliverablePrompt","error","console","initialPrompt","debouncedHandleSend","trim","userMessage","currentInput","handleInputChange","e","target","value","style","height","scrollHeight","handleKeyPress","key","shiftKey","preventDefault","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","ref","onChange","onKeyPress","placeholder","disabled","onClick","userInput","goal","tasks","join"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport { debounce } from 'lodash';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\n\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 60vh;\n  overflow-y: auto;\n  background-color: #2a2a2a;\n  border-radius: 8px;\n  padding: 1rem;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#4a4a4a'};\n  color: #ffffff;\n  padding: 0.8rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 70%;\n  line-height: 1.5;\n\n  p {\n    margin-bottom: 0.5rem;\n  }\n\n  ul, ol {\n    padding-left: 1.5rem;\n    margin: 0.5rem 0;\n  }\n\n  li {\n    margin-bottom: 0.25rem;\n  }\n\n  strong {\n    font-weight: bold;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    margin-top: 1rem;\n    margin-bottom: 0.5rem;\n  }\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n`;\n\nconst Input = styled.textarea`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #3a3a3a;\n  color: #ffffff;\n  resize: none;\n  min-height: 40px;\n  max-height: 200px;\n  overflow-y: auto;\n`;\n\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n`;\n\nconst parseMarkdown = (markdown) => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = (source) => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\n\nconst AIChat = ({ day, onUpdateDeliverable }) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const inputRef = useRef(null);\n\n  const getAIResponse = useCallback(async (prompt, currentDay, shouldUpdateDeliverable = false) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay));\n      const aiMessage = { text: aiResponse, isUser: false };\n      setMessages(prev => [...prev, aiMessage]);\n      if (shouldUpdateDeliverable) {\n        const deliverable = await getGPTResponse(getDeliverablePrompt(prompt, currentDay));\n        onUpdateDeliverable(currentDay, deliverable);\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, { \n        text: \"I apologize, but I'm having trouble processing that request. Let's try a different approach. \" + getSprintTip(day), \n        isUser: false \n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onUpdateDeliverable, day]);\n\n  useEffect(() => {\n    if (!hasInitialized) {\n      const initialPrompt = sprintGuidance[day].prompt;\n      setMessages([{ text: initialPrompt, isUser: false }]);\n      setHasInitialized(true);\n    }\n  }, [day, hasInitialized]);\n\n  const debouncedHandleSend = useCallback(\n    debounce(async () => {\n      if (input.trim() && !isLoading) {\n        const userMessage = { text: input, isUser: true };\n        setMessages(prev => [...prev, userMessage]);\n        const currentInput = input;\n        setInput('');\n        await getAIResponse(currentInput, day, true);\n      }\n    }, 300),\n    [input, isLoading, day, getAIResponse]\n  );\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n    e.target.style.height = 'inherit';\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      debouncedHandleSend();\n    }\n  };\n\n  return (\n    <>\n      <ChatContainer>\n        {messages.map((message, index) => (\n          <Message key={index} isUser={message.isUser}>\n            {parseMarkdown(message.text)}\n          </Message>\n        ))}\n      </ChatContainer>\n      <InputContainer>\n        <Input\n          ref={inputRef}\n          value={input}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Type your message...\"\n          disabled={isLoading}\n        />\n        <SendButton onClick={debouncedHandleSend} disabled={isLoading}>\n          {isLoading ? 'Thinking...' : 'Send'}\n        </SendButton>\n      </InputContainer>\n    </>\n  );\n};\n\nconst getAIPrompt = (userInput, day) => {\n  const { goal, tasks } = sprintGuidance[day];\n  return `You are an AI assistant helping with a mini design sprint. It's Day ${day} of the sprint. \n  The goal for today is: ${goal}. \n  Key tasks: ${tasks.join(', ')}. \n  The user input is: \"${userInput}\". \n  Provide guidance, ask relevant follow-up questions, and help the user progress through this day of the sprint. \n  Be concise, friendly, and focused on the day's objectives.`;\n};\n\nconst getDeliverablePrompt = (userInput, day) => {\n  const { goal } = sprintGuidance[day];\n  return `Based on this user input for Day ${day} of the mini design sprint: \"${userInput}\", \n  create a concise summary of the key decisions or outputs related to the day's goal: ${goal}. \n  Format the response as a brief, bullet-pointed list of no more than 3-5 items.`;\n};\n\nexport default AIChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}