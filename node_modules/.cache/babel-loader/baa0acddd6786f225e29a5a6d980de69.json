{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { debounce } from 'lodash';\nimport { unified } from 'unified';\nimport remarkParse from 'remark-parse';\nimport remarkReact from 'remark-react';\nimport { getGPTResponse } from '../utils/gptService';\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 60vh;\n  overflow-y: auto;\n  background-color: #2a2a2a;\n  border-radius: 8px;\n  padding: 1rem;\n`;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#4a4a4a'};\n  color: #ffffff;\n  padding: 0.8rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 70%;\n  white-space: pre-wrap;\n  line-height: 1.5;\n\n  ul, ol {\n    padding-left: 1.5rem;\n    margin: 0.5rem 0;\n  }\n\n  li {\n    margin-bottom: 0.25rem;\n  }\n\n  strong {\n    font-weight: bold;\n  }\n`;\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n`;\nconst Input = styled.input`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #3a3a3a;\n  color: #ffffff;\n`;\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n`;\nconst AIChat = ({\n  day,\n  onUpdateSummary\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const getAIResponse = useCallback(async (prompt, currentDay, shouldUpdateSummary = false) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay));\n      const aiMessage = {\n        text: aiResponse,\n        isUser: false\n      };\n      setMessages(prev => [...prev, aiMessage]);\n      if (shouldUpdateSummary) {\n        const summary = await getGPTResponse(getSummaryPrompt(prompt, currentDay));\n        onUpdateSummary(currentDay, summary);\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        text: \"I'm sorry, I encountered an error. Please try again.\",\n        isUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onUpdateSummary]);\n  useEffect(() => {\n    if (!hasInitialized) {\n      const initialPrompt = getInitialPrompt(day);\n      setMessages([{\n        text: initialPrompt,\n        isUser: false\n      }]);\n      setHasInitialized(true);\n    }\n  }, [day, hasInitialized]);\n  const debouncedHandleSend = useCallback(debounce(async () => {\n    if (input.trim() && !isLoading) {\n      const userMessage = {\n        text: input,\n        isUser: true\n      };\n      setMessages(prev => [...prev, userMessage]);\n      const currentInput = input;\n      setInput('');\n      await getAIResponse(currentInput, day, true);\n    }\n  }, 300), [input, isLoading, day, getAIResponse]);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      debouncedHandleSend();\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChatContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(Message, {\n    key: index,\n    isUser: message.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, unified().use(remarkParse).use(remarkReact).processSync(message.text).result))), /*#__PURE__*/React.createElement(InputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: input,\n    onChange: handleInputChange,\n    onKeyPress: handleKeyPress,\n    placeholder: \"Type your message...\",\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SendButton, {\n    onClick: debouncedHandleSend,\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, isLoading ? 'Sending...' : 'Send')));\n};\nconst getInitialPrompt = day => {\n  const prompts = {\n    1: \"Let's start by defining your long-term goal for this project. What are you aiming to achieve?\",\n    2: \"Great! Now let's sketch out some potential solutions. What ideas do you have?\",\n    3: \"It's time to decide on the best solutions. Which ideas stand out to you?\",\n    4: \"Now we'll build a prototype. What key features should we include?\",\n    5: \"Finally, let's test and learn. What aspects of the prototype do you want to focus on?\"\n  };\n  return prompts[day] || \"Let's continue with the sprint. What's on your mind?\";\n};\nconst getAIPrompt = (userInput, day) => {\n  return `You are an AI assistant helping with a design sprint. It's Day ${day} of the sprint. \n  The user input is: \"${userInput}\". \n  Provide guidance and ask follow-up questions to help the user progress through this day of the sprint. \n  Be concise but insightful. If appropriate, summarize key points or decisions made.\n  Use proper formatting:\n  - Use line breaks to separate paragraphs.\n  - Use bullet points or numbered lists for multiple items.\n  - Use bold for emphasis by surrounding text with asterisks like *this*.`;\n};\nconst getSummaryPrompt = (userInput, day) => {\n  return `Summarize the key points and decisions made so far on Day ${day} of the sprint. \n  The user input is: \"${userInput}\". \n  Provide a clear and concise summary that highlights the progress and any important insights.`;\n};\nexport default AIChat;","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","debounce","unified","remarkParse","remarkReact","getGPTResponse","ChatContainer","div","Message","props","isUser","InputContainer","Input","input","SendButton","button","AIChat","day","onUpdateSummary","messages","setMessages","setInput","isLoading","setIsLoading","hasInitialized","setHasInitialized","getAIResponse","prompt","currentDay","shouldUpdateSummary","aiResponse","getAIPrompt","aiMessage","text","prev","summary","getSummaryPrompt","error","console","initialPrompt","getInitialPrompt","debouncedHandleSend","trim","userMessage","currentInput","handleInputChange","e","target","value","handleKeyPress","key","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","use","processSync","result","onChange","onKeyPress","placeholder","disabled","onClick","prompts","userInput"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { debounce } from 'lodash';\nimport { unified } from 'unified';\nimport remarkParse from 'remark-parse';\nimport remarkReact from 'remark-react';\nimport { getGPTResponse } from '../utils/gptService';\n\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 60vh;\n  overflow-y: auto;\n  background-color: #2a2a2a;\n  border-radius: 8px;\n  padding: 1rem;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#4a4a4a'};\n  color: #ffffff;\n  padding: 0.8rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 70%;\n  white-space: pre-wrap;\n  line-height: 1.5;\n\n  ul, ol {\n    padding-left: 1.5rem;\n    margin: 0.5rem 0;\n  }\n\n  li {\n    margin-bottom: 0.25rem;\n  }\n\n  strong {\n    font-weight: bold;\n  }\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n`;\n\nconst Input = styled.input`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #3a3a3a;\n  color: #ffffff;\n`;\n\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n`;\n\nconst AIChat = ({ day, onUpdateSummary }) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasInitialized, setHasInitialized] = useState(false);\n\n  const getAIResponse = useCallback(async (prompt, currentDay, shouldUpdateSummary = false) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay));\n      const aiMessage = { text: aiResponse, isUser: false };\n      setMessages(prev => [...prev, aiMessage]);\n      if (shouldUpdateSummary) {\n        const summary = await getGPTResponse(getSummaryPrompt(prompt, currentDay));\n        onUpdateSummary(currentDay, summary);\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, { text: \"I'm sorry, I encountered an error. Please try again.\", isUser: false }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onUpdateSummary]);\n\n  useEffect(() => {\n    if (!hasInitialized) {\n      const initialPrompt = getInitialPrompt(day);\n      setMessages([{ text: initialPrompt, isUser: false }]);\n      setHasInitialized(true);\n    }\n  }, [day, hasInitialized]);\n\n  const debouncedHandleSend = useCallback(\n    debounce(async () => {\n      if (input.trim() && !isLoading) {\n        const userMessage = { text: input, isUser: true };\n        setMessages(prev => [...prev, userMessage]);\n        const currentInput = input;\n        setInput('');\n        await getAIResponse(currentInput, day, true);\n      }\n    }, 300),\n    [input, isLoading, day, getAIResponse]\n  );\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      debouncedHandleSend();\n    }\n  };\n\n  return (\n    <>\n      <ChatContainer>\n        {messages.map((message, index) => (\n          <Message key={index} isUser={message.isUser}>\n            {unified()\n              .use(remarkParse)\n              .use(remarkReact)\n              .processSync(message.text).result}\n          </Message>\n        ))}\n      </ChatContainer>\n      <InputContainer>\n        <Input\n          value={input}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Type your message...\"\n          disabled={isLoading}\n        />\n        <SendButton onClick={debouncedHandleSend} disabled={isLoading}>\n          {isLoading ? 'Sending...' : 'Send'}\n        </SendButton>\n      </InputContainer>\n    </>\n  );\n};\n\nconst getInitialPrompt = (day) => {\n  const prompts = {\n    1: \"Let's start by defining your long-term goal for this project. What are you aiming to achieve?\",\n    2: \"Great! Now let's sketch out some potential solutions. What ideas do you have?\",\n    3: \"It's time to decide on the best solutions. Which ideas stand out to you?\",\n    4: \"Now we'll build a prototype. What key features should we include?\",\n    5: \"Finally, let's test and learn. What aspects of the prototype do you want to focus on?\"\n  };\n  return prompts[day] || \"Let's continue with the sprint. What's on your mind?\";\n};\n\nconst getAIPrompt = (userInput, day) => {\n  return `You are an AI assistant helping with a design sprint. It's Day ${day} of the sprint. \n  The user input is: \"${userInput}\". \n  Provide guidance and ask follow-up questions to help the user progress through this day of the sprint. \n  Be concise but insightful. If appropriate, summarize key points or decisions made.\n  Use proper formatting:\n  - Use line breaks to separate paragraphs.\n  - Use bullet points or numbered lists for multiple items.\n  - Use bold for emphasis by surrounding text with asterisks like *this*.`;\n};\n\nconst getSummaryPrompt = (userInput, day) => {\n  return `Summarize the key points and decisions made so far on Day ${day} of the sprint. \n  The user input is: \"${userInput}\". \n  Provide a clear and concise summary that highlights the progress and any important insights.`;\n};\n\nexport default AIChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}