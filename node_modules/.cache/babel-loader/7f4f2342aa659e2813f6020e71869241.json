{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport { debounce } from 'lodash';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 60vh;\n  overflow-y: auto;\n  background-color: #2a2a2a;\n  border-radius: 8px;\n  padding: 1rem;\n`;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#4a4a4a'};\n  color: #ffffff;\n  padding: 0.8rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 70%;\n  line-height: 1.5;\n\n  p {\n    margin-bottom: 0.5rem;\n  }\n\n  ul, ol {\n    padding-left: 1.5rem;\n    margin: 0.5rem 0;\n  }\n\n  li {\n    margin-bottom: 0.25rem;\n  }\n\n  strong {\n    font-weight: bold;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    margin-top: 1rem;\n    margin-bottom: 0.5rem;\n  }\n`;\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n`;\nconst Input = styled.textarea`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #3a3a3a;\n  color: #ffffff;\n  resize: none;\n  min-height: 40px;\n  max-height: 200px;\n  overflow-y: auto;\n`;\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n`;\nconst parseMarkdown = markdown => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = source => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\nconst AIChat = ({\n  day,\n  onUpdateDeliverable,\n  onNextDay\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const inputRef = useRef(null);\n  const getAIResponse = useCallback(async (prompt, currentDay, shouldUpdateDeliverable = false) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay, messages));\n      const aiMessage = {\n        text: aiResponse,\n        isUser: false\n      };\n      setMessages(prev => [...prev, aiMessage]);\n      if (shouldUpdateDeliverable) {\n        const deliverable = await getGPTResponse(getDeliverablePrompt(prompt, currentDay, messages));\n        onUpdateDeliverable(currentDay, deliverable);\n      }\n\n      // Check if it's time to move to the next day\n      if (aiResponse.includes(\"[NEXT_DAY]\")) {\n        onNextDay();\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        text: \"I apologize, but I'm having trouble processing that request. Let's try a different approach. \" + getSprintTip(day),\n        isUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onUpdateDeliverable, onNextDay, day, messages]);\n  useEffect(() => {\n    if (!hasInitialized) {\n      const initialPrompt = \"Hi, I'm Relay, your AI assistant for this mini design sprint. I'll guide you through each day of the sprint, helping you capture the essence of a full Design Sprint process. Let's get started with Day 1! \" + sprintGuidance[day].prompt;\n      setMessages([{\n        text: initialPrompt,\n        isUser: false\n      }]);\n      setHasInitialized(true);\n    }\n  }, [day, hasInitialized]);\n  const debouncedHandleSend = useCallback(debounce(async () => {\n    if (input.trim() && !isLoading) {\n      const userMessage = {\n        text: input,\n        isUser: true\n      };\n      setMessages(prev => [...prev, userMessage]);\n      const currentInput = input;\n      setInput('');\n      await getAIResponse(currentInput, day, true);\n    }\n  }, 300), [input, isLoading, day, getAIResponse]);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n    e.target.style.height = 'inherit';\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      debouncedHandleSend();\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChatContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(Message, {\n    key: index,\n    isUser: message.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, parseMarkdown(message.text)))), /*#__PURE__*/React.createElement(InputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: inputRef,\n    value: input,\n    onChange: handleInputChange,\n    onKeyPress: handleKeyPress,\n    placeholder: \"Type your message...\",\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SendButton, {\n    onClick: debouncedHandleSend,\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, isLoading ? 'Thinking...' : 'Send')));\n};\nconst getAIPrompt = (userInput, day, context) => {\n  const {\n    goal,\n    tasks\n  } = sprintGuidance[day];\n  return `You are Relai, an AI assistant helping with a mini design sprint. It's Day ${day} of the sprint. \n  The goal for today is: ${goal}. \n  Key tasks: ${tasks.join(', ')}. \n  The user input is: \"${userInput}\". \n  Previous context: ${JSON.stringify(context)}\n  Provide guidance, ask relevant follow-up questions, and help the user progress through this day of the sprint. \n  Be concise, friendly, and focused on the day's objectives. If you feel the user has provided enough information for this day, include [NEXT_DAY] in your response to move to the next day.`;\n};\nconst getDeliverablePrompt = (userInput, day) => {\n  const {\n    goal\n  } = sprintGuidance[day];\n  return `Based on this user input for Day ${day} of the mini design sprint: \"${userInput}\", \n  create a concise summary of the key decisions or outputs related to the day's goal: ${goal}. \n  Format the response as a brief, bullet-pointed list of no more than 3-5 items.`;\n};\nexport default AIChat;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","styled","debounce","SimpleMarkdown","getGPTResponse","sprintGuidance","getSprintTip","ChatContainer","div","Message","props","isUser","InputContainer","Input","textarea","SendButton","button","parseMarkdown","markdown","rawBuiltParser","parserFor","defaultRules","parser","source","blockSource","reactOutput","reactFor","ruleOutput","AIChat","day","onUpdateDeliverable","onNextDay","messages","setMessages","input","setInput","isLoading","setIsLoading","hasInitialized","setHasInitialized","inputRef","getAIResponse","prompt","currentDay","shouldUpdateDeliverable","aiResponse","getAIPrompt","aiMessage","text","prev","deliverable","getDeliverablePrompt","includes","error","console","initialPrompt","debouncedHandleSend","trim","userMessage","currentInput","handleInputChange","e","target","value","style","height","scrollHeight","handleKeyPress","key","shiftKey","preventDefault","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","ref","onChange","onKeyPress","placeholder","disabled","onClick","userInput","context","goal","tasks","join","JSON","stringify"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport { debounce } from 'lodash';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\n\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 60vh;\n  overflow-y: auto;\n  background-color: #2a2a2a;\n  border-radius: 8px;\n  padding: 1rem;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#4a4a4a'};\n  color: #ffffff;\n  padding: 0.8rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 70%;\n  line-height: 1.5;\n\n  p {\n    margin-bottom: 0.5rem;\n  }\n\n  ul, ol {\n    padding-left: 1.5rem;\n    margin: 0.5rem 0;\n  }\n\n  li {\n    margin-bottom: 0.25rem;\n  }\n\n  strong {\n    font-weight: bold;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    margin-top: 1rem;\n    margin-bottom: 0.5rem;\n  }\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n`;\n\nconst Input = styled.textarea`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #3a3a3a;\n  color: #ffffff;\n  resize: none;\n  min-height: 40px;\n  max-height: 200px;\n  overflow-y: auto;\n`;\n\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n`;\n\nconst parseMarkdown = (markdown) => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = (source) => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\n\nconst AIChat = ({ day, onUpdateDeliverable, onNextDay }) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const inputRef = useRef(null);\n\n  const getAIResponse = useCallback(async (prompt, currentDay, shouldUpdateDeliverable = false) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay, messages));\n      const aiMessage = { text: aiResponse, isUser: false };\n      setMessages(prev => [...prev, aiMessage]);\n      if (shouldUpdateDeliverable) {\n        const deliverable = await getGPTResponse(getDeliverablePrompt(prompt, currentDay, messages));\n        onUpdateDeliverable(currentDay, deliverable);\n      }\n      \n      // Check if it's time to move to the next day\n      if (aiResponse.includes(\"[NEXT_DAY]\")) {\n        onNextDay();\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, { \n        text: \"I apologize, but I'm having trouble processing that request. Let's try a different approach. \" + getSprintTip(day), \n        isUser: false \n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onUpdateDeliverable, onNextDay, day, messages]);\n\n  useEffect(() => {\n    if (!hasInitialized) {\n      const initialPrompt = \"Hi, I'm Relay, your AI assistant for this mini design sprint. I'll guide you through each day of the sprint, helping you capture the essence of a full Design Sprint process. Let's get started with Day 1! \" + sprintGuidance[day].prompt;\n      setMessages([{ text: initialPrompt, isUser: false }]);\n      setHasInitialized(true);\n    }\n  }, [day, hasInitialized]);\n\n  const debouncedHandleSend = useCallback(\n    debounce(async () => {\n      if (input.trim() && !isLoading) {\n        const userMessage = { text: input, isUser: true };\n        setMessages(prev => [...prev, userMessage]);\n        const currentInput = input;\n        setInput('');\n        await getAIResponse(currentInput, day, true);\n      }\n    }, 300),\n    [input, isLoading, day, getAIResponse]\n  );\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n    e.target.style.height = 'inherit';\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      debouncedHandleSend();\n    }\n  };\n\n  return (\n    <>\n      <ChatContainer>\n        {messages.map((message, index) => (\n          <Message key={index} isUser={message.isUser}>\n            {parseMarkdown(message.text)}\n          </Message>\n        ))}\n      </ChatContainer>\n      <InputContainer>\n        <Input\n          ref={inputRef}\n          value={input}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Type your message...\"\n          disabled={isLoading}\n        />\n        <SendButton onClick={debouncedHandleSend} disabled={isLoading}>\n          {isLoading ? 'Thinking...' : 'Send'}\n        </SendButton>\n      </InputContainer>\n    </>\n  );\n};\n\nconst getAIPrompt = (userInput, day, context) => {\n  const { goal, tasks } = sprintGuidance[day];\n  return `You are Relai, an AI assistant helping with a mini design sprint. It's Day ${day} of the sprint. \n  The goal for today is: ${goal}. \n  Key tasks: ${tasks.join(', ')}. \n  The user input is: \"${userInput}\". \n  Previous context: ${JSON.stringify(context)}\n  Provide guidance, ask relevant follow-up questions, and help the user progress through this day of the sprint. \n  Be concise, friendly, and focused on the day's objectives. If you feel the user has provided enough information for this day, include [NEXT_DAY] in your response to move to the next day.`;\n};\n\nconst getDeliverablePrompt = (userInput, day) => {\n  const { goal } = sprintGuidance[day];\n  return `Based on this user input for Day ${day} of the mini design sprint: \"${userInput}\", \n  create a concise summary of the key decisions or outputs related to the day's goal: ${goal}. \n  Format the response as a brief, bullet-pointed list of no more than 3-5 items.`;\n};\n\nexport default AIChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}