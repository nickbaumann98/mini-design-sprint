{"ast":null,"code":"export const getGPTResponse = async (prompt, day, objectives) => {\n  console.log('Starting getGPTResponse');\n  console.log('Prompt:', prompt);\n  console.log('Day:', day);\n  console.log('Objectives:', objectives);\n  try {\n    console.time('API Call Time');\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${process.env.REACT_APP_GPT_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-4o\",\n        messages: [{\n          role: \"system\",\n          content: `You are Relay, an AI assistant embodying the expertise of John Zeratsky and Jake Knapp, guiding users through a mini design sprint. Be extremely concise (2-3 sentences max), friendly, and focused on helping users progress through each day's objectives. Channel the insights of Zeratsky and Knapp. Always move the conversation forward. When asked to summarize, provide a clear and concise summary. Current day: ${day}. Objectives: ${objectives.join(', ')}. After all objectives are met, ask if the user wants to continue the conversation or move to the next day.`\n        }, {\n          role: \"user\",\n          content: prompt\n        }],\n        temperature: 0.7,\n        max_tokens: 150\n      })\n    });\n    console.timeEnd('API Call Time');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    console.time('JSON Parse Time');\n    const data = await response.json();\n    console.timeEnd('JSON Parse Time');\n    console.log('API Response:', data);\n    return data.choices[0].message.content;\n  } catch (error) {\n    console.error('Error in getGPTResponse:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["getGPTResponse","prompt","day","objectives","console","log","time","response","fetch","method","headers","process","env","REACT_APP_GPT_API_KEY","body","JSON","stringify","model","messages","role","content","join","temperature","max_tokens","timeEnd","ok","Error","status","data","json","choices","message","error"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/utils/gptService.js"],"sourcesContent":["export const getGPTResponse = async (prompt, day, objectives) => {\n    console.log('Starting getGPTResponse');\n    console.log('Prompt:', prompt);\n    console.log('Day:', day);\n    console.log('Objectives:', objectives);\n\n    try {\n      console.time('API Call Time');\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_GPT_API_KEY}`\n        },\n        body: JSON.stringify({\n            model: \"gpt-4o\",\n            messages: [\n              {\n                role: \"system\",\n                content: `You are Relay, an AI assistant embodying the expertise of John Zeratsky and Jake Knapp, guiding users through a mini design sprint. Be extremely concise (2-3 sentences max), friendly, and focused on helping users progress through each day's objectives. Channel the insights of Zeratsky and Knapp. Always move the conversation forward. When asked to summarize, provide a clear and concise summary. Current day: ${day}. Objectives: ${objectives.join(', ')}. After all objectives are met, ask if the user wants to continue the conversation or move to the next day.`\n              },\n              { role: \"user\", content: prompt }\n            ],\n            temperature: 0.7,\n            max_tokens: 150\n          })\n      });\n      console.timeEnd('API Call Time');\n  \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n  \n      console.time('JSON Parse Time');\n      const data = await response.json();\n      console.timeEnd('JSON Parse Time');\n  \n      console.log('API Response:', data);\n  \n      return data.choices[0].message.content;\n    } catch (error) {\n      console.error('Error in getGPTResponse:', error);\n      throw error;\n    }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAG,MAAAA,CAAOC,MAAM,EAAEC,GAAG,EAAEC,UAAU,KAAK;EAC7DC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACtCD,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEJ,MAAM,CAAC;EAC9BG,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEH,GAAG,CAAC;EACxBE,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,UAAU,CAAC;EAEtC,IAAI;IACFC,OAAO,CAACE,IAAI,CAAC,eAAe,CAAC;IAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MACzEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUC,OAAO,CAACC,GAAG,CAACC,qBAAqB;MAC9D,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,KAAK,EAAE,QAAQ;QACfC,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,QAAQ;UACdC,OAAO,EAAE,6ZAA6ZlB,GAAG,iBAAiBC,UAAU,CAACkB,IAAI,CAAC,IAAI,CAAC;QACjd,CAAC,EACD;UAAEF,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEnB;QAAO,CAAC,CAClC;QACDqB,WAAW,EAAE,GAAG;QAChBC,UAAU,EAAE;MACd,CAAC;IACL,CAAC,CAAC;IACFnB,OAAO,CAACoB,OAAO,CAAC,eAAe,CAAC;IAEhC,IAAI,CAACjB,QAAQ,CAACkB,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBnB,QAAQ,CAACoB,MAAM,EAAE,CAAC;IAC3D;IAEAvB,OAAO,CAACE,IAAI,CAAC,iBAAiB,CAAC;IAC/B,MAAMsB,IAAI,GAAG,MAAMrB,QAAQ,CAACsB,IAAI,CAAC,CAAC;IAClCzB,OAAO,CAACoB,OAAO,CAAC,iBAAiB,CAAC;IAElCpB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEuB,IAAI,CAAC;IAElC,OAAOA,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACX,OAAO;EACxC,CAAC,CAAC,OAAOY,KAAK,EAAE;IACd5B,OAAO,CAAC4B,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}