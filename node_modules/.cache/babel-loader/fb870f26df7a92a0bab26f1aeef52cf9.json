{"ast":null,"code":"import env from './env';\nexport const getGPTResponse = async prompt => {\n  try {\n    var _env$REACT_APP_GPT_AP;\n    console.log('Environment variables:', env);\n    const apiKey = (_env$REACT_APP_GPT_AP = env.REACT_APP_GPT_API_KEY) === null || _env$REACT_APP_GPT_AP === void 0 ? void 0 : _env$REACT_APP_GPT_AP.trim();\n    console.log('API Key:', apiKey);\n    if (!apiKey) {\n      throw new Error('OpenAI API key is missing');\n    }\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"user\",\n          content: prompt\n        }],\n        temperature: 0.7\n      })\n    });\n    if (!response.ok) {\n      const errorBody = await response.text();\n      throw new Error(`HTTP error! status: ${response.status}, body: ${errorBody}`);\n    }\n    const data = await response.json();\n    if (!data.choices || data.choices.length === 0) {\n      throw new Error('No choices returned from API');\n    }\n    return data.choices[0].message.content;\n  } catch (error) {\n    console.error('Error in getGPTResponse:', error);\n    let errorMessage = \"There was an error processing your request. \";\n    if (error.message.includes('OpenAI API key is missing')) {\n      errorMessage += \"The API key is missing. Please check your configuration.\";\n    } else if (error.message.includes('HTTP error')) {\n      errorMessage += \"There was an issue connecting to the AI service. Please try again later.\";\n    } else if (error.message.includes('No choices returned from API')) {\n      errorMessage += \"The AI service did not return a valid response. Please try again.\";\n    } else {\n      errorMessage += \"Please try again.\";\n    }\n    throw new Error(errorMessage);\n  }\n};","map":{"version":3,"names":["env","getGPTResponse","prompt","_env$REACT_APP_GPT_AP","console","log","apiKey","REACT_APP_GPT_API_KEY","trim","Error","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","temperature","ok","errorBody","text","status","data","json","choices","length","message","error","errorMessage","includes"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/utils/gptService.js"],"sourcesContent":["import env from './env';\n\nexport const getGPTResponse = async (prompt) => {\n  try {\n    console.log('Environment variables:', env);\n    const apiKey = env.REACT_APP_GPT_API_KEY?.trim();\n    console.log('API Key:', apiKey);\n    if (!apiKey) {\n      throw new Error('OpenAI API key is missing');\n    }\n\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [{ role: \"user\", content: prompt }],\n        temperature: 0.7\n      })\n    });\n\n    if (!response.ok) {\n      const errorBody = await response.text();\n      throw new Error(`HTTP error! status: ${response.status}, body: ${errorBody}`);\n    }\n\n    const data = await response.json();\n    if (!data.choices || data.choices.length === 0) {\n      throw new Error('No choices returned from API');\n    }\n    return data.choices[0].message.content;\n  } catch (error) {\n    console.error('Error in getGPTResponse:', error);\n    let errorMessage = \"There was an error processing your request. \";\n    if (error.message.includes('OpenAI API key is missing')) {\n      errorMessage += \"The API key is missing. Please check your configuration.\";\n    } else if (error.message.includes('HTTP error')) {\n      errorMessage += \"There was an issue connecting to the AI service. Please try again later.\";\n    } else if (error.message.includes('No choices returned from API')) {\n      errorMessage += \"The AI service did not return a valid response. Please try again.\";\n    } else {\n      errorMessage += \"Please try again.\";\n    }\n    throw new Error(errorMessage);\n  }\n};\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,cAAc,GAAG,MAAOC,MAAM,IAAK;EAC9C,IAAI;IAAA,IAAAC,qBAAA;IACFC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEL,GAAG,CAAC;IAC1C,MAAMM,MAAM,IAAAH,qBAAA,GAAGH,GAAG,CAACO,qBAAqB,cAAAJ,qBAAA,uBAAzBA,qBAAA,CAA2BK,IAAI,CAAC,CAAC;IAChDJ,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEC,MAAM,CAAC;IAC/B,IAAI,CAACA,MAAM,EAAE;MACX,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;IAC9C;IAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MACzEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUP,MAAM;MACnC,CAAC;MACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAElB;QAAO,CAAC,CAAC;QAC7CmB,WAAW,EAAE;MACf,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACX,QAAQ,CAACY,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIf,KAAK,CAAC,uBAAuBC,QAAQ,CAACe,MAAM,WAAWF,SAAS,EAAE,CAAC;IAC/E;IAEA,MAAMG,IAAI,GAAG,MAAMhB,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAClC,IAAI,CAACD,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACE,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;MAC9C,MAAM,IAAIpB,KAAK,CAAC,8BAA8B,CAAC;IACjD;IACA,OAAOiB,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,CAACV,OAAO;EACxC,CAAC,CAAC,OAAOW,KAAK,EAAE;IACd3B,OAAO,CAAC2B,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,IAAIC,YAAY,GAAG,8CAA8C;IACjE,IAAID,KAAK,CAACD,OAAO,CAACG,QAAQ,CAAC,2BAA2B,CAAC,EAAE;MACvDD,YAAY,IAAI,0DAA0D;IAC5E,CAAC,MAAM,IAAID,KAAK,CAACD,OAAO,CAACG,QAAQ,CAAC,YAAY,CAAC,EAAE;MAC/CD,YAAY,IAAI,0EAA0E;IAC5F,CAAC,MAAM,IAAID,KAAK,CAACD,OAAO,CAACG,QAAQ,CAAC,8BAA8B,CAAC,EAAE;MACjED,YAAY,IAAI,mEAAmE;IACrF,CAAC,MAAM;MACLA,YAAY,IAAI,mBAAmB;IACrC;IACA,MAAM,IAAIvB,KAAK,CAACuB,YAAY,CAAC;EAC/B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}