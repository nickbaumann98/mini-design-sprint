{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js\";\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\nimport { createSprintDay, states } from './sprintStateMachine';\n\n// Styled components remain the same\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #1e1e1e;\n  border-radius: 8px;\n  padding: 1.5rem;\n  font-family: 'Roboto', sans-serif;\n  height: 60vh;\n  overflow-y: auto;\n`;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#2a2a2a'};\n  color: #ffffff;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 80%;\n`;\nconst RelayIcon = styled.span`\n  color: #3c8ce7;\n  margin-right: 0.5rem;\n`;\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n  align-items: flex-end;\n`;\nconst Input = styled.textarea`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #2a2a2a;\n  color: #ffffff;\n  resize: none;\n  min-height: 40px;\n  overflow-y: hidden;\n`;\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n  height: 40px;\n`;\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 1rem;\n`;\nconst parseMarkdown = markdown => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = source => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\nconst AIChat = ({\n  day,\n  onUpdateDeliverable,\n  onNextDay\n}) => {\n  const sprintDay = createSprintDay(day);\n  const [currentState, setCurrentState] = useState(sprintDay.initialState);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [dayData, setDayData] = useState({});\n  const inputRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    const initialPrompt = `Welcome to Day ${day} of the mini design sprint! Our goal today is to ${sprintGuidance[day].goal}. Let's start by ${sprintDay.prompts[sprintDay.initialState]}`;\n    setMessages([{\n      text: initialPrompt,\n      isUser: false\n    }]);\n  }, [day, sprintDay.initialState, sprintDay.prompts]);\n  const getAIResponse = useCallback(async prompt => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, day, currentState, dayData));\n      setMessages(prevMessages => [...prevMessages, {\n        text: aiResponse,\n        isUser: false\n      }]);\n      const nextState = determineNextState(currentState, dayData);\n      if (nextState !== currentState) {\n        setCurrentState(nextState);\n        if (nextState === states.COMPLETED) {\n          const deliverable = summarizeDay(dayData);\n          onUpdateDeliverable(day, deliverable);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        text: \"I'm having trouble processing that. Let's try a different approach. \" + getSprintTip(day),\n        isUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentState, day, dayData, onUpdateDeliverable]);\n  const handleSend = useCallback(() => {\n    if (input.trim() && !isLoading) {\n      const userMessage = {\n        text: input,\n        isUser: true\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      setDayData(prevData => ({\n        ...prevData,\n        [currentState]: input\n      }));\n      const currentInput = input;\n      setInput('');\n      getAIResponse(currentInput);\n    }\n  }, [input, isLoading, currentState, getAIResponse]);\n  const handleInputChange = useCallback(e => {\n    setInput(e.target.value);\n    e.target.style.height = 'auto';\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  }, []);\n  const handleKeyPress = useCallback(e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  }, [handleSend]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChatContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(Message, {\n    key: index,\n    isUser: message.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }, !message.isUser && /*#__PURE__*/React.createElement(RelayIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 33\n    }\n  }, \":-) Relay\"), parseMarkdown(message.text))), /*#__PURE__*/React.createElement(\"div\", {\n    ref: messagesEndRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(InputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: inputRef,\n    value: input,\n    onChange: handleInputChange,\n    onKeyPress: handleKeyPress,\n    placeholder: \"Type your message...\",\n    disabled: isLoading,\n    rows: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SendButton, {\n    onClick: handleSend,\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, isLoading ? 'Thinking...' : 'Send')), currentState === states.COMPLETED && /*#__PURE__*/React.createElement(NextDayButton, {\n    onClick: onNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, \"Move to Day \", day + 1));\n};\nconst getAIPrompt = (userInput, day, currentState, dayData) => {\n  const {\n    goal\n  } = sprintGuidance[day];\n  return `Day ${day}, state: ${currentState}. Goal: ${goal}. \n  Current data: ${JSON.stringify(dayData)}. \n  User input: \"${userInput}\".\n  If a long-term goal has been provided, do not ask for it again.\n  If challenges have been mentioned, do not ask for the long-term goal again.\n  If the current state is LONG_TERM_GOAL and a goal is present, ask for challenges.\n  If the current state is KEY_CHALLENGES and challenges are present, ask for opportunities.\n  If the current state is OPPORTUNITIES and opportunities are present, summarize and conclude.\n  Be concise and direct. Respond in 1-2 sentences max.`;\n};\nconst determineNextState = (currentState, dayData) => {\n  if (currentState === states.LONG_TERM_GOAL && dayData[states.LONG_TERM_GOAL]) {\n    return states.KEY_CHALLENGES;\n  } else if (currentState === states.KEY_CHALLENGES && dayData[states.KEY_CHALLENGES]) {\n    return states.OPPORTUNITIES;\n  } else if (currentState === states.OPPORTUNITIES && dayData[states.OPPORTUNITIES]) {\n    return states.COMPLETED;\n  }\n  return currentState;\n};\nconst summarizeDay = dayData => {\n  return Object.entries(dayData).map(([key, value]) => `${key}: ${value}`).join('\\n');\n};\nexport default AIChat;","map":{"version":3,"names":["React","useState","useCallback","useRef","useEffect","styled","SimpleMarkdown","getGPTResponse","sprintGuidance","getSprintTip","createSprintDay","states","ChatContainer","div","Message","props","isUser","RelayIcon","span","InputContainer","Input","textarea","SendButton","button","NextDayButton","parseMarkdown","markdown","rawBuiltParser","parserFor","defaultRules","parser","source","blockSource","reactOutput","reactFor","ruleOutput","AIChat","day","onUpdateDeliverable","onNextDay","sprintDay","currentState","setCurrentState","initialState","messages","setMessages","input","setInput","isLoading","setIsLoading","dayData","setDayData","inputRef","messagesEndRef","initialPrompt","goal","prompts","text","getAIResponse","prompt","aiResponse","getAIPrompt","prevMessages","nextState","determineNextState","COMPLETED","deliverable","summarizeDay","error","console","handleSend","trim","userMessage","prevData","currentInput","handleInputChange","e","target","value","style","height","scrollHeight","handleKeyPress","key","shiftKey","preventDefault","_messagesEndRef$curre","current","scrollIntoView","behavior","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","ref","onChange","onKeyPress","placeholder","disabled","rows","onClick","userInput","JSON","stringify","LONG_TERM_GOAL","KEY_CHALLENGES","OPPORTUNITIES","Object","entries","join"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js"],"sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\nimport { createSprintDay, states } from './sprintStateMachine';\n\n// Styled components remain the same\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #1e1e1e;\n  border-radius: 8px;\n  padding: 1.5rem;\n  font-family: 'Roboto', sans-serif;\n  height: 60vh;\n  overflow-y: auto;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#2a2a2a'};\n  color: #ffffff;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 80%;\n`;\n\nconst RelayIcon = styled.span`\n  color: #3c8ce7;\n  margin-right: 0.5rem;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n  align-items: flex-end;\n`;\n\nconst Input = styled.textarea`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #2a2a2a;\n  color: #ffffff;\n  resize: none;\n  min-height: 40px;\n  overflow-y: hidden;\n`;\n\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n  height: 40px;\n`;\n\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 1rem;\n`;\n\nconst parseMarkdown = (markdown) => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = (source) => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\n\nconst AIChat = ({ day, onUpdateDeliverable, onNextDay }) => {\n  const sprintDay = createSprintDay(day);\n  const [currentState, setCurrentState] = useState(sprintDay.initialState);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [dayData, setDayData] = useState({});\n  const inputRef = useRef(null);\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    const initialPrompt = `Welcome to Day ${day} of the mini design sprint! Our goal today is to ${sprintGuidance[day].goal}. Let's start by ${sprintDay.prompts[sprintDay.initialState]}`;\n    setMessages([{ text: initialPrompt, isUser: false }]);\n  }, [day, sprintDay.initialState, sprintDay.prompts]);\n\n  const getAIResponse = useCallback(async (prompt) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, day, currentState, dayData));\n      setMessages(prevMessages => [...prevMessages, { text: aiResponse, isUser: false }]);\n      \n      const nextState = determineNextState(currentState, dayData);\n      if (nextState !== currentState) {\n        setCurrentState(nextState);\n        if (nextState === states.COMPLETED) {\n          const deliverable = summarizeDay(dayData);\n          onUpdateDeliverable(day, deliverable);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prevMessages => [...prevMessages, { \n        text: \"I'm having trouble processing that. Let's try a different approach. \" + getSprintTip(day), \n        isUser: false \n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentState, day, dayData, onUpdateDeliverable]);\n\n  const handleSend = useCallback(() => {\n    if (input.trim() && !isLoading) {\n      const userMessage = { text: input, isUser: true };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      setDayData(prevData => ({...prevData, [currentState]: input}));\n      const currentInput = input;\n      setInput('');\n      getAIResponse(currentInput);\n    }\n  }, [input, isLoading, currentState, getAIResponse]);\n\n  const handleInputChange = useCallback((e) => {\n    setInput(e.target.value);\n    e.target.style.height = 'auto';\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  }, []);\n\n  const handleKeyPress = useCallback((e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  }, [handleSend]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  return (\n    <>\n      <ChatContainer>\n        {messages.map((message, index) => (\n          <Message key={index} isUser={message.isUser}>\n            {!message.isUser && <RelayIcon>:-) Relay</RelayIcon>}\n            {parseMarkdown(message.text)}\n          </Message>\n        ))}\n        <div ref={messagesEndRef} />\n      </ChatContainer>\n      <InputContainer>\n        <Input\n          ref={inputRef}\n          value={input}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Type your message...\"\n          disabled={isLoading}\n          rows={1}\n        />\n        <SendButton onClick={handleSend} disabled={isLoading}>\n          {isLoading ? 'Thinking...' : 'Send'}\n        </SendButton>\n      </InputContainer>\n      {currentState === states.COMPLETED && (\n        <NextDayButton onClick={onNextDay}>\n          Move to Day {day + 1}\n        </NextDayButton>\n      )}\n    </>\n  );\n};\n\nconst getAIPrompt = (userInput, day, currentState, dayData) => {\n  const { goal } = sprintGuidance[day];\n  \n  return `Day ${day}, state: ${currentState}. Goal: ${goal}. \n  Current data: ${JSON.stringify(dayData)}. \n  User input: \"${userInput}\".\n  If a long-term goal has been provided, do not ask for it again.\n  If challenges have been mentioned, do not ask for the long-term goal again.\n  If the current state is LONG_TERM_GOAL and a goal is present, ask for challenges.\n  If the current state is KEY_CHALLENGES and challenges are present, ask for opportunities.\n  If the current state is OPPORTUNITIES and opportunities are present, summarize and conclude.\n  Be concise and direct. Respond in 1-2 sentences max.`;\n};\n\nconst determineNextState = (currentState, dayData) => {\n  if (currentState === states.LONG_TERM_GOAL && dayData[states.LONG_TERM_GOAL]) {\n    return states.KEY_CHALLENGES;\n  } else if (currentState === states.KEY_CHALLENGES && dayData[states.KEY_CHALLENGES]) {\n    return states.OPPORTUNITIES;\n  } else if (currentState === states.OPPORTUNITIES && dayData[states.OPPORTUNITIES]) {\n    return states.COMPLETED;\n  }\n  return currentState;\n};\n\nconst summarizeDay = (dayData) => {\n  return Object.entries(dayData)\n    .map(([key, value]) => `${key}: ${value}`)\n    .join('\\n');\n};\n\nexport default AIChat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}