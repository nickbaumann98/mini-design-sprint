{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport { debounce } from 'lodash';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 60vh;\n  overflow-y: auto;\n  background-color: #2a2a2a;\n  border-radius: 8px;\n  padding: 1rem;\n`;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#4a4a4a'};\n  color: #ffffff;\n  padding: 0.8rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 70%;\n  line-height: 1.5;\n\n  p {\n    margin-bottom: 0.5rem;\n  }\n\n  ul, ol {\n    padding-left: 1.5rem;\n    margin: 0.5rem 0;\n  }\n\n  li {\n    margin-bottom: 0.25rem;\n  }\n\n  strong {\n    font-weight: bold;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    margin-top: 1rem;\n    margin-bottom: 0.5rem;\n  }\n`;\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n`;\nconst Input = styled.textarea`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #3a3a3a;\n  color: #ffffff;\n  resize: none;\n  min-height: 40px;\n  max-height: 200px;\n  overflow-y: auto;\n`;\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n`;\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 1rem;\n`;\nconst parseMarkdown = markdown => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = source => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\nconst AIChat = ({\n  day,\n  onUpdateDeliverable,\n  onNextDay\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [showNextDayButton, setShowNextDayButton] = useState(false);\n  const inputRef = useRef(null);\n  const getAIResponse = useCallback(async (prompt, currentDay, shouldUpdateDeliverable = false) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay, messages));\n      const aiMessage = {\n        text: aiResponse,\n        isUser: false\n      };\n      setMessages(prev => [...prev, aiMessage]);\n      if (shouldUpdateDeliverable) {\n        const deliverable = await getGPTResponse(getDeliverablePrompt(prompt, currentDay, messages));\n        onUpdateDeliverable(currentDay, deliverable);\n      }\n      if (aiResponse.includes(\"[SHOW_NEXT_DAY_BUTTON]\")) {\n        setShowNextDayButton(true);\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        text: \"I apologize, but I'm having trouble processing that request. Let's try a different approach. \" + getSprintTip(day),\n        isUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onUpdateDeliverable, day, messages]);\n  useEffect(() => {\n    if (!hasInitialized) {\n      const initialPrompt = `Welcome to Day ${day} of your mini design sprint! ${sprintGuidance[day].prompt}`;\n      setMessages([{\n        text: initialPrompt,\n        isUser: false\n      }]);\n      setHasInitialized(true);\n    }\n  }, [day, hasInitialized]);\n  const debouncedHandleSend = useCallback(debounce(async () => {\n    if (input.trim() && !isLoading) {\n      const userMessage = {\n        text: input,\n        isUser: true\n      };\n      setMessages(prev => [...prev, userMessage]);\n      const currentInput = input;\n      setInput('');\n      await getAIResponse(currentInput, day, true);\n    }\n  }, 300), [input, isLoading, day, getAIResponse]);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n    e.target.style.height = 'inherit';\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      debouncedHandleSend();\n    }\n  };\n  const handleNextDay = () => {\n    setShowNextDayButton(false);\n    onNextDay();\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChatContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(Message, {\n    key: index,\n    isUser: message.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  }, parseMarkdown(message.text)))), /*#__PURE__*/React.createElement(InputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: inputRef,\n    value: input,\n    onChange: handleInputChange,\n    onKeyPress: handleKeyPress,\n    placeholder: \"Type your message...\",\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SendButton, {\n    onClick: debouncedHandleSend,\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }, isLoading ? 'Thinking...' : 'Send')), showNextDayButton && /*#__PURE__*/React.createElement(NextDayButton, {\n    onClick: handleNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, \"Move to Day \", day + 1));\n};\nconst getAIPrompt = (userInput, day, context) => {\n  var _context$filter$pop;\n  const {\n    goal,\n    tasks\n  } = sprintGuidance[day];\n  const lastAIMessage = ((_context$filter$pop = context.filter(msg => !msg.isUser).pop()) === null || _context$filter$pop === void 0 ? void 0 : _context$filter$pop.text) || '';\n  return `You are Relay, an AI assistant helping with a mini design sprint. It's Day ${day} of the sprint. \n  The goal for today is: ${goal}. \n  Key tasks: ${tasks.join(', ')}. \n  The user input is: \"${userInput}\". \n  Your last message was: \"${lastAIMessage}\"\n  Provide concise, direct guidance to help the user progress through this day of the sprint. \n  Focus on actionable next steps and avoid repeating information.\n  If the user has provided sufficient information for this day's goal, summarize the key points and include [SHOW_NEXT_DAY_BUTTON] in your response.\n  Always aim to move the conversation forward. If the user seems to be repeating information, gently redirect them to the next step or task.`;\n};\nconst getDeliverablePrompt = (userInput, day, context) => {\n  const {\n    goal\n  } = sprintGuidance[day];\n  const allUserInputs = context.filter(msg => msg.isUser).map(msg => msg.text).join(' ');\n  return `Based on the user inputs for Day ${day} of the mini design sprint: \"${allUserInputs}\", \n  create a concise summary of the key decisions or outputs related to the day's goal: ${goal}. \n  Format the response as a brief, bullet-pointed list of no more than 3-5 items.`;\n};\nexport default AIChat;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","styled","debounce","SimpleMarkdown","getGPTResponse","sprintGuidance","getSprintTip","ChatContainer","div","Message","props","isUser","InputContainer","Input","textarea","SendButton","button","NextDayButton","parseMarkdown","markdown","rawBuiltParser","parserFor","defaultRules","parser","source","blockSource","reactOutput","reactFor","ruleOutput","AIChat","day","onUpdateDeliverable","onNextDay","messages","setMessages","input","setInput","isLoading","setIsLoading","hasInitialized","setHasInitialized","showNextDayButton","setShowNextDayButton","inputRef","getAIResponse","prompt","currentDay","shouldUpdateDeliverable","aiResponse","getAIPrompt","aiMessage","text","prev","deliverable","getDeliverablePrompt","includes","error","console","initialPrompt","debouncedHandleSend","trim","userMessage","currentInput","handleInputChange","e","target","value","style","height","scrollHeight","handleKeyPress","key","shiftKey","preventDefault","handleNextDay","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","ref","onChange","onKeyPress","placeholder","disabled","onClick","userInput","context","_context$filter$pop","goal","tasks","lastAIMessage","filter","msg","pop","join","allUserInputs"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport { debounce } from 'lodash';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\n\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 60vh;\n  overflow-y: auto;\n  background-color: #2a2a2a;\n  border-radius: 8px;\n  padding: 1rem;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#4a4a4a'};\n  color: #ffffff;\n  padding: 0.8rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 70%;\n  line-height: 1.5;\n\n  p {\n    margin-bottom: 0.5rem;\n  }\n\n  ul, ol {\n    padding-left: 1.5rem;\n    margin: 0.5rem 0;\n  }\n\n  li {\n    margin-bottom: 0.25rem;\n  }\n\n  strong {\n    font-weight: bold;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    margin-top: 1rem;\n    margin-bottom: 0.5rem;\n  }\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n`;\n\nconst Input = styled.textarea`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #3a3a3a;\n  color: #ffffff;\n  resize: none;\n  min-height: 40px;\n  max-height: 200px;\n  overflow-y: auto;\n`;\n\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n`;\n\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 1rem;\n`;\n\nconst parseMarkdown = (markdown) => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = (source) => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\n\nconst AIChat = ({ day, onUpdateDeliverable, onNextDay }) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [showNextDayButton, setShowNextDayButton] = useState(false);\n  const inputRef = useRef(null);\n\n  const getAIResponse = useCallback(async (prompt, currentDay, shouldUpdateDeliverable = false) => {\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay, messages));\n      const aiMessage = { text: aiResponse, isUser: false };\n      setMessages(prev => [...prev, aiMessage]);\n      if (shouldUpdateDeliverable) {\n        const deliverable = await getGPTResponse(getDeliverablePrompt(prompt, currentDay, messages));\n        onUpdateDeliverable(currentDay, deliverable);\n      }\n      \n      if (aiResponse.includes(\"[SHOW_NEXT_DAY_BUTTON]\")) {\n        setShowNextDayButton(true);\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, { \n        text: \"I apologize, but I'm having trouble processing that request. Let's try a different approach. \" + getSprintTip(day), \n        isUser: false \n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onUpdateDeliverable, day, messages]);\n\n  useEffect(() => {\n    if (!hasInitialized) {\n      const initialPrompt = `Welcome to Day ${day} of your mini design sprint! ${sprintGuidance[day].prompt}`;\n      setMessages([{ text: initialPrompt, isUser: false }]);\n      setHasInitialized(true);\n    }\n  }, [day, hasInitialized]);\n\n  const debouncedHandleSend = useCallback(\n    debounce(async () => {\n      if (input.trim() && !isLoading) {\n        const userMessage = { text: input, isUser: true };\n        setMessages(prev => [...prev, userMessage]);\n        const currentInput = input;\n        setInput('');\n        await getAIResponse(currentInput, day, true);\n      }\n    }, 300),\n    [input, isLoading, day, getAIResponse]\n  );\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n    e.target.style.height = 'inherit';\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      debouncedHandleSend();\n    }\n  };\n\n  const handleNextDay = () => {\n    setShowNextDayButton(false);\n    onNextDay();\n  };\n\n  return (\n    <>\n      <ChatContainer>\n        {messages.map((message, index) => (\n          <Message key={index} isUser={message.isUser}>\n            {parseMarkdown(message.text)}\n          </Message>\n        ))}\n      </ChatContainer>\n      <InputContainer>\n        <Input\n          ref={inputRef}\n          value={input}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Type your message...\"\n          disabled={isLoading}\n        />\n        <SendButton onClick={debouncedHandleSend} disabled={isLoading}>\n          {isLoading ? 'Thinking...' : 'Send'}\n        </SendButton>\n      </InputContainer>\n      {showNextDayButton && (\n        <NextDayButton onClick={handleNextDay}>\n          Move to Day {day + 1}\n        </NextDayButton>\n      )}\n    </>\n  );\n};\n\nconst getAIPrompt = (userInput, day, context) => {\n  const { goal, tasks } = sprintGuidance[day];\n  const lastAIMessage = context.filter(msg => !msg.isUser).pop()?.text || '';\n  return `You are Relay, an AI assistant helping with a mini design sprint. It's Day ${day} of the sprint. \n  The goal for today is: ${goal}. \n  Key tasks: ${tasks.join(', ')}. \n  The user input is: \"${userInput}\". \n  Your last message was: \"${lastAIMessage}\"\n  Provide concise, direct guidance to help the user progress through this day of the sprint. \n  Focus on actionable next steps and avoid repeating information.\n  If the user has provided sufficient information for this day's goal, summarize the key points and include [SHOW_NEXT_DAY_BUTTON] in your response.\n  Always aim to move the conversation forward. If the user seems to be repeating information, gently redirect them to the next step or task.`;\n};\n\nconst getDeliverablePrompt = (userInput, day, context) => {\n  const { goal } = sprintGuidance[day];\n  const allUserInputs = context.filter(msg => msg.isUser).map(msg => msg.text).join(' ');\n  return `Based on the user inputs for Day ${day} of the mini design sprint: \"${allUserInputs}\", \n  create a concise summary of the key decisions or outputs related to the day's goal: ${goal}. \n  Format the response as a brief, bullet-pointed list of no more than 3-5 items.`;\n};\n\nexport default AIChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}