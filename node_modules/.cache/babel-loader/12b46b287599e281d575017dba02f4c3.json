{"ast":null,"code":"/**\n * marked v13.0.2 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.marked = {}));\n})(this, function (exports) {\n  'use strict';\n\n  /**\n   * Gets the original marked default options.\n   */\n  function _getDefaults() {\n    return {\n      async: false,\n      breaks: false,\n      extensions: null,\n      gfm: true,\n      hooks: null,\n      pedantic: false,\n      renderer: null,\n      silent: false,\n      tokenizer: null,\n      walkTokens: null\n    };\n  }\n  exports.defaults = _getDefaults();\n  function changeDefaults(newDefaults) {\n    exports.defaults = newDefaults;\n  }\n\n  /**\n   * Helpers\n   */\n  const escapeTest = /[&<>\"']/;\n  const escapeReplace = new RegExp(escapeTest.source, 'g');\n  const escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\n  const escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\n  const escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n  const getEscapeReplacement = ch => escapeReplacements[ch];\n  function escape$1(html, encode) {\n    if (encode) {\n      if (escapeTest.test(html)) {\n        return html.replace(escapeReplace, getEscapeReplacement);\n      }\n    } else {\n      if (escapeTestNoEncode.test(html)) {\n        return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n      }\n    }\n    return html;\n  }\n  const unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n  function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n      n = n.toLowerCase();\n      if (n === 'colon') return ':';\n      if (n.charAt(0) === '#') {\n        return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n      }\n      return '';\n    });\n  }\n  const caret = /(^|[^\\[])\\^/g;\n  function edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n      replace: (name, val) => {\n        let valSource = typeof val === 'string' ? val : val.source;\n        valSource = valSource.replace(caret, '$1');\n        source = source.replace(name, valSource);\n        return obj;\n      },\n      getRegex: () => {\n        return new RegExp(source, opt);\n      }\n    };\n    return obj;\n  }\n  function cleanUrl(href) {\n    try {\n      href = encodeURI(href).replace(/%25/g, '%');\n    } catch (e) {\n      return null;\n    }\n    return href;\n  }\n  const noopTest = {\n    exec: () => null\n  };\n  function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n        if (escaped) {\n          // odd number of slashes means | is escaped\n          // so we leave it alone\n          return '|';\n        } else {\n          // add space before unescaped |\n          return ' |';\n        }\n      }),\n      cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n      cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n      cells.pop();\n    }\n    if (count) {\n      if (cells.length > count) {\n        cells.splice(count);\n      } else {\n        while (cells.length < count) cells.push('');\n      }\n    }\n    for (; i < cells.length; i++) {\n      // leading or trailing whitespace is ignored per the gfm spec\n      cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n  }\n  /**\n   * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n   * /c*$/ is vulnerable to REDOS.\n   *\n   * @param str\n   * @param c\n   * @param invert Remove suffix of non-c chars instead. Default falsey.\n   */\n  function rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n      return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n      const currChar = str.charAt(l - suffLen - 1);\n      if (currChar === c && !invert) {\n        suffLen++;\n      } else if (currChar !== c && invert) {\n        suffLen++;\n      } else {\n        break;\n      }\n    }\n    return str.slice(0, l - suffLen);\n  }\n  function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n      return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === '\\\\') {\n        i++;\n      } else if (str[i] === b[0]) {\n        level++;\n      } else if (str[i] === b[1]) {\n        level--;\n        if (level < 0) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n  function outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n      lexer.state.inLink = true;\n      const token = {\n        type: 'link',\n        raw,\n        href,\n        title,\n        text,\n        tokens: lexer.inlineTokens(text)\n      };\n      lexer.state.inLink = false;\n      return token;\n    }\n    return {\n      type: 'image',\n      raw,\n      href,\n      title,\n      text: escape$1(text)\n    };\n  }\n  function indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n      return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text.split('\\n').map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n      const [indentInNode] = matchIndentInNode;\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n      return node;\n    }).join('\\n');\n  }\n  /**\n   * Tokenizer\n   */\n  class _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n      this.options = options || exports.defaults;\n    }\n    space(src) {\n      const cap = this.rules.block.newline.exec(src);\n      if (cap && cap[0].length > 0) {\n        return {\n          type: 'space',\n          raw: cap[0]\n        };\n      }\n    }\n    code(src) {\n      const cap = this.rules.block.code.exec(src);\n      if (cap) {\n        const text = cap[0].replace(/^ {1,4}/gm, '');\n        return {\n          type: 'code',\n          raw: cap[0],\n          codeBlockStyle: 'indented',\n          text: !this.options.pedantic ? rtrim(text, '\\n') : text\n        };\n      }\n    }\n    fences(src) {\n      const cap = this.rules.block.fences.exec(src);\n      if (cap) {\n        const raw = cap[0];\n        const text = indentCodeCompensation(raw, cap[3] || '');\n        return {\n          type: 'code',\n          raw,\n          lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n          text\n        };\n      }\n    }\n    heading(src) {\n      const cap = this.rules.block.heading.exec(src);\n      if (cap) {\n        let text = cap[2].trim();\n        // remove trailing #s\n        if (/#$/.test(text)) {\n          const trimmed = rtrim(text, '#');\n          if (this.options.pedantic) {\n            text = trimmed.trim();\n          } else if (!trimmed || / $/.test(trimmed)) {\n            // CommonMark requires space before trailing #s\n            text = trimmed.trim();\n          }\n        }\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[1].length,\n          text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n    hr(src) {\n      const cap = this.rules.block.hr.exec(src);\n      if (cap) {\n        return {\n          type: 'hr',\n          raw: rtrim(cap[0], '\\n')\n        };\n      }\n    }\n    blockquote(src) {\n      const cap = this.rules.block.blockquote.exec(src);\n      if (cap) {\n        let lines = rtrim(cap[0], '\\n').split('\\n');\n        let raw = '';\n        let text = '';\n        const tokens = [];\n        while (lines.length > 0) {\n          let inBlockquote = false;\n          const currentLines = [];\n          let i;\n          for (i = 0; i < lines.length; i++) {\n            // get lines up to a continuation\n            if (/^ {0,3}>/.test(lines[i])) {\n              currentLines.push(lines[i]);\n              inBlockquote = true;\n            } else if (!inBlockquote) {\n              currentLines.push(lines[i]);\n            } else {\n              break;\n            }\n          }\n          lines = lines.slice(i);\n          const currentRaw = currentLines.join('\\n');\n          const currentText = currentRaw\n          // precede setext continuation with 4 spaces so it isn't a setext\n          .replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1').replace(/^ {0,3}>[ \\t]?/gm, '');\n          raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n          text = text ? `${text}\\n${currentText}` : currentText;\n          // parse blockquote lines as top level tokens\n          // merge paragraphs if this is a continuation\n          const top = this.lexer.state.top;\n          this.lexer.state.top = true;\n          this.lexer.blockTokens(currentText, tokens, true);\n          this.lexer.state.top = top;\n          // if there is no continuation then we are done\n          if (lines.length === 0) {\n            break;\n          }\n          const lastToken = tokens[tokens.length - 1];\n          if (lastToken?.type === 'code') {\n            // blockquote continuation cannot be preceded by a code block\n            break;\n          } else if (lastToken?.type === 'blockquote') {\n            // include continuation in nested blockquote\n            const oldToken = lastToken;\n            const newText = oldToken.raw + '\\n' + lines.join('\\n');\n            const newToken = this.blockquote(newText);\n            tokens[tokens.length - 1] = newToken;\n            raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n            text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n            break;\n          } else if (lastToken?.type === 'list') {\n            // include continuation in nested list\n            const oldToken = lastToken;\n            const newText = oldToken.raw + '\\n' + lines.join('\\n');\n            const newToken = this.list(newText);\n            tokens[tokens.length - 1] = newToken;\n            raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n            text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n            lines = newText.substring(tokens[tokens.length - 1].raw.length).split('\\n');\n            continue;\n          }\n        }\n        return {\n          type: 'blockquote',\n          raw,\n          tokens,\n          text\n        };\n      }\n    }\n    list(src) {\n      let cap = this.rules.block.list.exec(src);\n      if (cap) {\n        let bull = cap[1].trim();\n        const isordered = bull.length > 1;\n        const list = {\n          type: 'list',\n          raw: '',\n          ordered: isordered,\n          start: isordered ? +bull.slice(0, -1) : '',\n          loose: false,\n          items: []\n        };\n        bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n        if (this.options.pedantic) {\n          bull = isordered ? bull : '[*+-]';\n        }\n        // Get next list item\n        const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n        let endsWithBlankLine = false;\n        // Check if current bullet point can start a new List Item\n        while (src) {\n          let endEarly = false;\n          let raw = '';\n          let itemContents = '';\n          if (!(cap = itemRegex.exec(src))) {\n            break;\n          }\n          if (this.rules.block.hr.test(src)) {\n            // End list if bullet was actually HR (possibly move into itemRegex?)\n            break;\n          }\n          raw = cap[0];\n          src = src.substring(raw.length);\n          let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, t => ' '.repeat(3 * t.length));\n          let nextLine = src.split('\\n', 1)[0];\n          let blankLine = !line.trim();\n          let indent = 0;\n          if (this.options.pedantic) {\n            indent = 2;\n            itemContents = line.trimStart();\n          } else if (blankLine) {\n            indent = cap[1].length + 1;\n          } else {\n            indent = cap[2].search(/[^ ]/); // Find first non-space char\n            indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n            itemContents = line.slice(indent);\n            indent += cap[1].length;\n          }\n          if (blankLine && /^ *$/.test(nextLine)) {\n            // Items begin with at most one blank line\n            raw += nextLine + '\\n';\n            src = src.substring(nextLine.length + 1);\n            endEarly = true;\n          }\n          if (!endEarly) {\n            const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n            const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n            const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n            const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n            // Check if following lines should be included in List Item\n            while (src) {\n              const rawLine = src.split('\\n', 1)[0];\n              nextLine = rawLine;\n              // Re-align to follow commonmark nesting rules\n              if (this.options.pedantic) {\n                nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n              }\n              // End list item if found code fences\n              if (fencesBeginRegex.test(nextLine)) {\n                break;\n              }\n              // End list item if found start of new heading\n              if (headingBeginRegex.test(nextLine)) {\n                break;\n              }\n              // End list item if found start of new bullet\n              if (nextBulletRegex.test(nextLine)) {\n                break;\n              }\n              // Horizontal rule found\n              if (hrRegex.test(src)) {\n                break;\n              }\n              if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {\n                // Dedent if possible\n                itemContents += '\\n' + nextLine.slice(indent);\n              } else {\n                // not enough indentation\n                if (blankLine) {\n                  break;\n                }\n                // paragraph continuation unless last line was a different block level element\n                if (line.search(/[^ ]/) >= 4) {\n                  // indented code block\n                  break;\n                }\n                if (fencesBeginRegex.test(line)) {\n                  break;\n                }\n                if (headingBeginRegex.test(line)) {\n                  break;\n                }\n                if (hrRegex.test(line)) {\n                  break;\n                }\n                itemContents += '\\n' + nextLine;\n              }\n              if (!blankLine && !nextLine.trim()) {\n                // Check if current line is blank\n                blankLine = true;\n              }\n              raw += rawLine + '\\n';\n              src = src.substring(rawLine.length + 1);\n              line = nextLine.slice(indent);\n            }\n          }\n          if (!list.loose) {\n            // If the previous item ended with a blank line, the list is loose\n            if (endsWithBlankLine) {\n              list.loose = true;\n            } else if (/\\n *\\n *$/.test(raw)) {\n              endsWithBlankLine = true;\n            }\n          }\n          let istask = null;\n          let ischecked;\n          // Check for task list items\n          if (this.options.gfm) {\n            istask = /^\\[[ xX]\\] /.exec(itemContents);\n            if (istask) {\n              ischecked = istask[0] !== '[ ] ';\n              itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n            }\n          }\n          list.items.push({\n            type: 'list_item',\n            raw,\n            task: !!istask,\n            checked: ischecked,\n            loose: false,\n            text: itemContents,\n            tokens: []\n          });\n          list.raw += raw;\n        }\n        // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n        list.items[list.items.length - 1].raw = list.items[list.items.length - 1].raw.trimEnd();\n        list.items[list.items.length - 1].text = list.items[list.items.length - 1].text.trimEnd();\n        list.raw = list.raw.trimEnd();\n        // Item child tokens handled here at end because we needed to have the final item to trim it first\n        for (let i = 0; i < list.items.length; i++) {\n          this.lexer.state.top = false;\n          list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n          if (!list.loose) {\n            // Check if list should be loose\n            const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n            const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n            list.loose = hasMultipleLineBreaks;\n          }\n        }\n        // Set all items to loose if list is loose\n        if (list.loose) {\n          for (let i = 0; i < list.items.length; i++) {\n            list.items[i].loose = true;\n          }\n        }\n        return list;\n      }\n    }\n    html(src) {\n      const cap = this.rules.block.html.exec(src);\n      if (cap) {\n        const token = {\n          type: 'html',\n          block: true,\n          raw: cap[0],\n          pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n          text: cap[0]\n        };\n        return token;\n      }\n    }\n    def(src) {\n      const cap = this.rules.block.def.exec(src);\n      if (cap) {\n        const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n        const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n        const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n        return {\n          type: 'def',\n          tag,\n          raw: cap[0],\n          href,\n          title\n        };\n      }\n    }\n    table(src) {\n      const cap = this.rules.block.table.exec(src);\n      if (!cap) {\n        return;\n      }\n      if (!/[:|]/.test(cap[2])) {\n        // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n        return;\n      }\n      const headers = splitCells(cap[1]);\n      const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n      const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n      const item = {\n        type: 'table',\n        raw: cap[0],\n        header: [],\n        align: [],\n        rows: []\n      };\n      if (headers.length !== aligns.length) {\n        // header and align columns must be equal, rows can be different.\n        return;\n      }\n      for (const align of aligns) {\n        if (/^ *-+: *$/.test(align)) {\n          item.align.push('right');\n        } else if (/^ *:-+: *$/.test(align)) {\n          item.align.push('center');\n        } else if (/^ *:-+ *$/.test(align)) {\n          item.align.push('left');\n        } else {\n          item.align.push(null);\n        }\n      }\n      for (let i = 0; i < headers.length; i++) {\n        item.header.push({\n          text: headers[i],\n          tokens: this.lexer.inline(headers[i]),\n          header: true,\n          align: item.align[i]\n        });\n      }\n      for (const row of rows) {\n        item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n          return {\n            text: cell,\n            tokens: this.lexer.inline(cell),\n            header: false,\n            align: item.align[i]\n          };\n        }));\n      }\n      return item;\n    }\n    lheading(src) {\n      const cap = this.rules.block.lheading.exec(src);\n      if (cap) {\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[2].charAt(0) === '=' ? 1 : 2,\n          text: cap[1],\n          tokens: this.lexer.inline(cap[1])\n        };\n      }\n    }\n    paragraph(src) {\n      const cap = this.rules.block.paragraph.exec(src);\n      if (cap) {\n        const text = cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1];\n        return {\n          type: 'paragraph',\n          raw: cap[0],\n          text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n    text(src) {\n      const cap = this.rules.block.text.exec(src);\n      if (cap) {\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: cap[0],\n          tokens: this.lexer.inline(cap[0])\n        };\n      }\n    }\n    escape(src) {\n      const cap = this.rules.inline.escape.exec(src);\n      if (cap) {\n        return {\n          type: 'escape',\n          raw: cap[0],\n          text: escape$1(cap[1])\n        };\n      }\n    }\n    tag(src) {\n      const cap = this.rules.inline.tag.exec(src);\n      if (cap) {\n        if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n          this.lexer.state.inLink = true;\n        } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n          this.lexer.state.inLink = false;\n        }\n        if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.lexer.state.inRawBlock = true;\n        } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.lexer.state.inRawBlock = false;\n        }\n        return {\n          type: 'html',\n          raw: cap[0],\n          inLink: this.lexer.state.inLink,\n          inRawBlock: this.lexer.state.inRawBlock,\n          block: false,\n          text: cap[0]\n        };\n      }\n    }\n    link(src) {\n      const cap = this.rules.inline.link.exec(src);\n      if (cap) {\n        const trimmedUrl = cap[2].trim();\n        if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n          // commonmark requires matching angle brackets\n          if (!/>$/.test(trimmedUrl)) {\n            return;\n          }\n          // ending angle bracket cannot be escaped\n          const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n            return;\n          }\n        } else {\n          // find closing parenthesis\n          const lastParenIndex = findClosingBracket(cap[2], '()');\n          if (lastParenIndex > -1) {\n            const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n            const linkLen = start + cap[1].length + lastParenIndex;\n            cap[2] = cap[2].substring(0, lastParenIndex);\n            cap[0] = cap[0].substring(0, linkLen).trim();\n            cap[3] = '';\n          }\n        }\n        let href = cap[2];\n        let title = '';\n        if (this.options.pedantic) {\n          // split pedantic href and title\n          const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n          if (link) {\n            href = link[1];\n            title = link[3];\n          }\n        } else {\n          title = cap[3] ? cap[3].slice(1, -1) : '';\n        }\n        href = href.trim();\n        if (/^</.test(href)) {\n          if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n            // pedantic allows starting angle bracket without ending angle bracket\n            href = href.slice(1);\n          } else {\n            href = href.slice(1, -1);\n          }\n        }\n        return outputLink(cap, {\n          href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n          title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n        }, cap[0], this.lexer);\n      }\n    }\n    reflink(src, links) {\n      let cap;\n      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n        const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n        const link = links[linkString.toLowerCase()];\n        if (!link) {\n          const text = cap[0].charAt(0);\n          return {\n            type: 'text',\n            raw: text,\n            text\n          };\n        }\n        return outputLink(cap, link, cap[0], this.lexer);\n      }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n      let match = this.rules.inline.emStrongLDelim.exec(src);\n      if (!match) return;\n      // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n      if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n      const nextChar = match[1] || match[2] || '';\n      if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n        // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n        const lLength = [...match[0]].length - 1;\n        let rDelim,\n          rLength,\n          delimTotal = lLength,\n          midDelimTotal = 0;\n        const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n        endReg.lastIndex = 0;\n        // Clip maskedSrc to same section of string as src (move to lexer?)\n        maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n        while ((match = endReg.exec(maskedSrc)) != null) {\n          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n          if (!rDelim) continue; // skip single * in __abc*abc__\n          rLength = [...rDelim].length;\n          if (match[3] || match[4]) {\n            // found another Left Delim\n            delimTotal += rLength;\n            continue;\n          } else if (match[5] || match[6]) {\n            // either Left or Right Delim\n            if (lLength % 3 && !((lLength + rLength) % 3)) {\n              midDelimTotal += rLength;\n              continue; // CommonMark Emphasis Rules 9-10\n            }\n          }\n          delimTotal -= rLength;\n          if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n          // Remove extra characters. *a*** -> *a*\n          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n          // char length can be >1 for unicode characters;\n          const lastCharLength = [...match[0]][0].length;\n          const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n          // Create `em` if smallest delimiter has odd char count. *a***\n          if (Math.min(lLength, rLength) % 2) {\n            const text = raw.slice(1, -1);\n            return {\n              type: 'em',\n              raw,\n              text,\n              tokens: this.lexer.inlineTokens(text)\n            };\n          }\n          // Create 'strong' if smallest delimiter has even char count. **a***\n          const text = raw.slice(2, -2);\n          return {\n            type: 'strong',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n      }\n    }\n    codespan(src) {\n      const cap = this.rules.inline.code.exec(src);\n      if (cap) {\n        let text = cap[2].replace(/\\n/g, ' ');\n        const hasNonSpaceChars = /[^ ]/.test(text);\n        const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n          text = text.substring(1, text.length - 1);\n        }\n        text = escape$1(text, true);\n        return {\n          type: 'codespan',\n          raw: cap[0],\n          text\n        };\n      }\n    }\n    br(src) {\n      const cap = this.rules.inline.br.exec(src);\n      if (cap) {\n        return {\n          type: 'br',\n          raw: cap[0]\n        };\n      }\n    }\n    del(src) {\n      const cap = this.rules.inline.del.exec(src);\n      if (cap) {\n        return {\n          type: 'del',\n          raw: cap[0],\n          text: cap[2],\n          tokens: this.lexer.inlineTokens(cap[2])\n        };\n      }\n    }\n    autolink(src) {\n      const cap = this.rules.inline.autolink.exec(src);\n      if (cap) {\n        let text, href;\n        if (cap[2] === '@') {\n          text = escape$1(cap[1]);\n          href = 'mailto:' + text;\n        } else {\n          text = escape$1(cap[1]);\n          href = text;\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text,\n          href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text\n          }]\n        };\n      }\n    }\n    url(src) {\n      let cap;\n      if (cap = this.rules.inline.url.exec(src)) {\n        let text, href;\n        if (cap[2] === '@') {\n          text = escape$1(cap[0]);\n          href = 'mailto:' + text;\n        } else {\n          // do extended autolink path validation\n          let prevCapZero;\n          do {\n            prevCapZero = cap[0];\n            cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n          } while (prevCapZero !== cap[0]);\n          text = escape$1(cap[0]);\n          if (cap[1] === 'www.') {\n            href = 'http://' + cap[0];\n          } else {\n            href = cap[0];\n          }\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text,\n          href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text\n          }]\n        };\n      }\n    }\n    inlineText(src) {\n      const cap = this.rules.inline.text.exec(src);\n      if (cap) {\n        let text;\n        if (this.lexer.state.inRawBlock) {\n          text = cap[0];\n        } else {\n          text = escape$1(cap[0]);\n        }\n        return {\n          type: 'text',\n          raw: cap[0],\n          text\n        };\n      }\n    }\n  }\n\n  /**\n   * Block-Level Grammar\n   */\n  const newline = /^(?: *(?:\\n|$))+/;\n  const blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\n  const fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\n  const hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\n  const heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\n  const bullet = /(?:[*+-]|\\d{1,9}[.)])/;\n  const lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/).replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .getRegex();\n  const _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\n  const blockText = /^[^\\n]+/;\n  const _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\n  const def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/).replace('label', _blockLabel).replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/).getRegex();\n  const list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/).replace(/bull/g, bullet).getRegex();\n  const _tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title' + '|tr|track|ul';\n  const _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\n  const html = edit('^ {0,3}(?:' // optional indentation\n  + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n  + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n  + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n  + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n  + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n  + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n  + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n  + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n  + ')', 'i').replace('comment', _comment).replace('tag', _tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\n  const paragraph = edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n  .replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n  const blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/).replace('paragraph', paragraph).getRegex();\n  /**\n   * Normal Block Grammar\n   */\n  const blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n  };\n  /**\n   * GFM Block Grammar\n   */\n  const gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n  + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n  + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n  .replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n  const blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('table', gfmTable) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex()\n  };\n  /**\n   * Pedantic grammar (original John Gruber's loose markdown specification)\n   */\n  const blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', _comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest,\n    // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', lheading).replace('|table', '').replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').replace('|tag', '').getRegex()\n  };\n  /**\n   * Inline-Level Grammar\n   */\n  const escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\n  const inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\n  const br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\n  const inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n  // list of unicode punctuation marks, plus any missing characters from CommonMark spec\n  const _punctuation = '\\\\p{P}\\\\p{S}';\n  const punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u').replace(/punctuation/g, _punctuation).getRegex();\n  // sequences em should skip over [title](link), `code`, <html>\n  const blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\n  const emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u').replace(/punct/g, _punctuation).getRegex();\n  const emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n  + '|[^*]+(?=[^*])' // Consume to delim\n  + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n  + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n  + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n  + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n  + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n  + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n  .replace(/punct/g, _punctuation).getRegex();\n  // (6) Not allowed for _\n  const emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n  + '|[^_]+(?=[^_])' // Consume to delim\n  + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n  + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n  + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n  + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n  + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n  .replace(/punct/g, _punctuation).getRegex();\n  const anyPunctuation = edit(/\\\\([punct])/, 'gu').replace(/punct/g, _punctuation).getRegex();\n  const autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/).replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();\n  const _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\n  const tag = edit('^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n  + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n  + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n  + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n  + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n  .replace('comment', _inlineComment).replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/).getRegex();\n  const _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n  const link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/).replace('label', _inlineLabel).replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/).replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/).getRegex();\n  const reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/).replace('label', _inlineLabel).replace('ref', _blockLabel).getRegex();\n  const nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/).replace('ref', _blockLabel).getRegex();\n  const reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g').replace('reflink', reflink).replace('nolink', nolink).getRegex();\n  /**\n   * Normal Inline Grammar\n   */\n  const inlineNormal = {\n    _backpedal: noopTest,\n    // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n  };\n  /**\n   * Pedantic Inline Grammar\n   */\n  const inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', _inlineLabel).getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', _inlineLabel).getRegex()\n  };\n  /**\n   * GFM Inline Grammar\n   */\n  const inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i').replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n  };\n  /**\n   * GFM + Line Breaks Inline Grammar\n   */\n  const inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n  };\n  /**\n   * exports\n   */\n  const block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n  };\n  const inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n  };\n\n  /**\n   * Block Lexer\n   */\n  class _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n      // TokenList cannot be created in one go\n      this.tokens = [];\n      this.tokens.links = Object.create(null);\n      this.options = options || exports.defaults;\n      this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n      this.tokenizer = this.options.tokenizer;\n      this.tokenizer.options = this.options;\n      this.tokenizer.lexer = this;\n      this.inlineQueue = [];\n      this.state = {\n        inLink: false,\n        inRawBlock: false,\n        top: true\n      };\n      const rules = {\n        block: block.normal,\n        inline: inline.normal\n      };\n      if (this.options.pedantic) {\n        rules.block = block.pedantic;\n        rules.inline = inline.pedantic;\n      } else if (this.options.gfm) {\n        rules.block = block.gfm;\n        if (this.options.breaks) {\n          rules.inline = inline.breaks;\n        } else {\n          rules.inline = inline.gfm;\n        }\n      }\n      this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n      return {\n        block,\n        inline\n      };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n      const lexer = new _Lexer(options);\n      return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n      const lexer = new _Lexer(options);\n      return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n      src = src.replace(/\\r\\n|\\r/g, '\\n');\n      this.blockTokens(src, this.tokens);\n      for (let i = 0; i < this.inlineQueue.length; i++) {\n        const next = this.inlineQueue[i];\n        this.inlineTokens(next.src, next.tokens);\n      }\n      this.inlineQueue = [];\n      return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n      if (this.options.pedantic) {\n        src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n      } else {\n        src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n          return leading + '    '.repeat(tabs.length);\n        });\n      }\n      let token;\n      let lastToken;\n      let cutSrc;\n      while (src) {\n        if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(extTokenizer => {\n          if (token = extTokenizer.call({\n            lexer: this\n          }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n          continue;\n        }\n        // newline\n        if (token = this.tokenizer.space(src)) {\n          src = src.substring(token.raw.length);\n          if (token.raw.length === 1 && tokens.length > 0) {\n            // if there's a single \\n as a spacer, it's terminating the last line,\n            // so move it there so that we don't get unnecessary paragraph tags\n            tokens[tokens.length - 1].raw += '\\n';\n          } else {\n            tokens.push(token);\n          }\n          continue;\n        }\n        // code\n        if (token = this.tokenizer.code(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          // An indented code block cannot interrupt a paragraph.\n          if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n          continue;\n        }\n        // fences\n        if (token = this.tokenizer.fences(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // heading\n        if (token = this.tokenizer.heading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // hr\n        if (token = this.tokenizer.hr(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // blockquote\n        if (token = this.tokenizer.blockquote(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // list\n        if (token = this.tokenizer.list(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // html\n        if (token = this.tokenizer.html(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // def\n        if (token = this.tokenizer.def(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.raw;\n            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n          } else if (!this.tokens.links[token.tag]) {\n            this.tokens.links[token.tag] = {\n              href: token.href,\n              title: token.title\n            };\n          }\n          continue;\n        }\n        // table (gfm)\n        if (token = this.tokenizer.table(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // lheading\n        if (token = this.tokenizer.lheading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // top-level paragraph\n        // prevent paragraph consuming extensions by clipping 'src' to extension start\n        cutSrc = src;\n        if (this.options.extensions && this.options.extensions.startBlock) {\n          let startIndex = Infinity;\n          const tempSrc = src.slice(1);\n          let tempStart;\n          this.options.extensions.startBlock.forEach(getStartIndex => {\n            tempStart = getStartIndex.call({\n              lexer: this\n            }, tempSrc);\n            if (typeof tempStart === 'number' && tempStart >= 0) {\n              startIndex = Math.min(startIndex, tempStart);\n            }\n          });\n          if (startIndex < Infinity && startIndex >= 0) {\n            cutSrc = src.substring(0, startIndex + 1);\n          }\n        }\n        if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n          lastToken = tokens[tokens.length - 1];\n          if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            this.inlineQueue.pop();\n            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n          lastParagraphClipped = cutSrc.length !== src.length;\n          src = src.substring(token.raw.length);\n          continue;\n        }\n        // text\n        if (token = this.tokenizer.text(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && lastToken.type === 'text') {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            this.inlineQueue.pop();\n            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n          continue;\n        }\n        if (src) {\n          const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n          if (this.options.silent) {\n            console.error(errMsg);\n            break;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n      this.state.top = true;\n      return tokens;\n    }\n    inline(src, tokens = []) {\n      this.inlineQueue.push({\n        src,\n        tokens\n      });\n      return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n      let token, lastToken, cutSrc;\n      // String with links masked to avoid interference with em and strong\n      let maskedSrc = src;\n      let match;\n      let keepPrevChar, prevChar;\n      // Mask out reflinks\n      if (this.tokens.links) {\n        const links = Object.keys(this.tokens.links);\n        if (links.length > 0) {\n          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n            if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n              maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n            }\n          }\n        }\n      }\n      // Mask out other blocks\n      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n      }\n      // Mask out escaped characters\n      while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n      }\n      while (src) {\n        if (!keepPrevChar) {\n          prevChar = '';\n        }\n        keepPrevChar = false;\n        // extensions\n        if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(extTokenizer => {\n          if (token = extTokenizer.call({\n            lexer: this\n          }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n          continue;\n        }\n        // escape\n        if (token = this.tokenizer.escape(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // tag\n        if (token = this.tokenizer.tag(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n          continue;\n        }\n        // link\n        if (token = this.tokenizer.link(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // reflink, nolink\n        if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n          continue;\n        }\n        // em & strong\n        if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // code\n        if (token = this.tokenizer.codespan(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // br\n        if (token = this.tokenizer.br(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // del (gfm)\n        if (token = this.tokenizer.del(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // autolink\n        if (token = this.tokenizer.autolink(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // url (gfm)\n        if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // text\n        // prevent inlineText consuming extensions by clipping 'src' to extension start\n        cutSrc = src;\n        if (this.options.extensions && this.options.extensions.startInline) {\n          let startIndex = Infinity;\n          const tempSrc = src.slice(1);\n          let tempStart;\n          this.options.extensions.startInline.forEach(getStartIndex => {\n            tempStart = getStartIndex.call({\n              lexer: this\n            }, tempSrc);\n            if (typeof tempStart === 'number' && tempStart >= 0) {\n              startIndex = Math.min(startIndex, tempStart);\n            }\n          });\n          if (startIndex < Infinity && startIndex >= 0) {\n            cutSrc = src.substring(0, startIndex + 1);\n          }\n        }\n        if (token = this.tokenizer.inlineText(cutSrc)) {\n          src = src.substring(token.raw.length);\n          if (token.raw.slice(-1) !== '_') {\n            // Track prevChar before string of ____ started\n            prevChar = token.raw.slice(-1);\n          }\n          keepPrevChar = true;\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && lastToken.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n          continue;\n        }\n        if (src) {\n          const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n          if (this.options.silent) {\n            console.error(errMsg);\n            break;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n      return tokens;\n    }\n  }\n\n  /**\n   * Renderer\n   */\n  class _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n      this.options = options || exports.defaults;\n    }\n    space(token) {\n      return '';\n    }\n    code({\n      text,\n      lang,\n      escaped\n    }) {\n      const langString = (lang || '').match(/^\\S*/)?.[0];\n      const code = text.replace(/\\n$/, '') + '\\n';\n      if (!langString) {\n        return '<pre><code>' + (escaped ? code : escape$1(code, true)) + '</code></pre>\\n';\n      }\n      return '<pre><code class=\"language-' + escape$1(langString) + '\">' + (escaped ? code : escape$1(code, true)) + '</code></pre>\\n';\n    }\n    blockquote({\n      tokens\n    }) {\n      const body = this.parser.parse(tokens);\n      return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({\n      text\n    }) {\n      return text;\n    }\n    heading({\n      tokens,\n      depth\n    }) {\n      return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n      return '<hr>\\n';\n    }\n    list(token) {\n      const ordered = token.ordered;\n      const start = token.start;\n      let body = '';\n      for (let j = 0; j < token.items.length; j++) {\n        const item = token.items[j];\n        body += this.listitem(item);\n      }\n      const type = ordered ? 'ol' : 'ul';\n      const startAttr = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n      return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n      let itemBody = '';\n      if (item.task) {\n        const checkbox = this.checkbox({\n          checked: !!item.checked\n        });\n        if (item.loose) {\n          if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n            item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n            if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n              item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n            }\n          } else {\n            item.tokens.unshift({\n              type: 'text',\n              raw: checkbox + ' ',\n              text: checkbox + ' '\n            });\n          }\n        } else {\n          itemBody += checkbox + ' ';\n        }\n      }\n      itemBody += this.parser.parse(item.tokens, !!item.loose);\n      return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({\n      checked\n    }) {\n      return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({\n      tokens\n    }) {\n      return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n      let header = '';\n      // header\n      let cell = '';\n      for (let j = 0; j < token.header.length; j++) {\n        cell += this.tablecell(token.header[j]);\n      }\n      header += this.tablerow({\n        text: cell\n      });\n      let body = '';\n      for (let j = 0; j < token.rows.length; j++) {\n        const row = token.rows[j];\n        cell = '';\n        for (let k = 0; k < row.length; k++) {\n          cell += this.tablecell(row[k]);\n        }\n        body += this.tablerow({\n          text: cell\n        });\n      }\n      if (body) body = `<tbody>${body}</tbody>`;\n      return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n    }\n    tablerow({\n      text\n    }) {\n      return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n      const content = this.parser.parseInline(token.tokens);\n      const type = token.header ? 'th' : 'td';\n      const tag = token.align ? `<${type} align=\"${token.align}\">` : `<${type}>`;\n      return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({\n      tokens\n    }) {\n      return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({\n      tokens\n    }) {\n      return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({\n      text\n    }) {\n      return `<code>${text}</code>`;\n    }\n    br(token) {\n      return '<br>';\n    }\n    del({\n      tokens\n    }) {\n      return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({\n      href,\n      title,\n      tokens\n    }) {\n      const text = this.parser.parseInline(tokens);\n      const cleanHref = cleanUrl(href);\n      if (cleanHref === null) {\n        return text;\n      }\n      href = cleanHref;\n      let out = '<a href=\"' + href + '\"';\n      if (title) {\n        out += ' title=\"' + title + '\"';\n      }\n      out += '>' + text + '</a>';\n      return out;\n    }\n    image({\n      href,\n      title,\n      text\n    }) {\n      const cleanHref = cleanUrl(href);\n      if (cleanHref === null) {\n        return text;\n      }\n      href = cleanHref;\n      let out = `<img src=\"${href}\" alt=\"${text}\"`;\n      if (title) {\n        out += ` title=\"${title}\"`;\n      }\n      out += '>';\n      return out;\n    }\n    text(token) {\n      return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : token.text;\n    }\n  }\n\n  /**\n   * TextRenderer\n   * returns only the textual part of the token\n   */\n  class _TextRenderer {\n    // no need for block level renderers\n    strong({\n      text\n    }) {\n      return text;\n    }\n    em({\n      text\n    }) {\n      return text;\n    }\n    codespan({\n      text\n    }) {\n      return text;\n    }\n    del({\n      text\n    }) {\n      return text;\n    }\n    html({\n      text\n    }) {\n      return text;\n    }\n    text({\n      text\n    }) {\n      return text;\n    }\n    link({\n      text\n    }) {\n      return '' + text;\n    }\n    image({\n      text\n    }) {\n      return '' + text;\n    }\n    br() {\n      return '';\n    }\n  }\n\n  /**\n   * Parsing & Compiling\n   */\n  class _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n      this.options = options || exports.defaults;\n      this.options.renderer = this.options.renderer || new _Renderer();\n      this.renderer = this.options.renderer;\n      this.renderer.options = this.options;\n      this.renderer.parser = this;\n      this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n      const parser = new _Parser(options);\n      return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n      const parser = new _Parser(options);\n      return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n      let out = '';\n      for (let i = 0; i < tokens.length; i++) {\n        const anyToken = tokens[i];\n        // Run any renderer extensions\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n          const genericToken = anyToken;\n          const ret = this.options.extensions.renderers[genericToken.type].call({\n            parser: this\n          }, genericToken);\n          if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n        const token = anyToken;\n        switch (token.type) {\n          case 'space':\n            {\n              out += this.renderer.space(token);\n              continue;\n            }\n          case 'hr':\n            {\n              out += this.renderer.hr(token);\n              continue;\n            }\n          case 'heading':\n            {\n              out += this.renderer.heading(token);\n              continue;\n            }\n          case 'code':\n            {\n              out += this.renderer.code(token);\n              continue;\n            }\n          case 'table':\n            {\n              out += this.renderer.table(token);\n              continue;\n            }\n          case 'blockquote':\n            {\n              out += this.renderer.blockquote(token);\n              continue;\n            }\n          case 'list':\n            {\n              out += this.renderer.list(token);\n              continue;\n            }\n          case 'html':\n            {\n              out += this.renderer.html(token);\n              continue;\n            }\n          case 'paragraph':\n            {\n              out += this.renderer.paragraph(token);\n              continue;\n            }\n          case 'text':\n            {\n              let textToken = token;\n              let body = this.renderer.text(textToken);\n              while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                textToken = tokens[++i];\n                body += '\\n' + this.renderer.text(textToken);\n              }\n              if (top) {\n                out += this.renderer.paragraph({\n                  type: 'paragraph',\n                  raw: body,\n                  text: body,\n                  tokens: [{\n                    type: 'text',\n                    raw: body,\n                    text: body\n                  }]\n                });\n              } else {\n                out += body;\n              }\n              continue;\n            }\n          default:\n            {\n              const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return '';\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n      renderer = renderer || this.renderer;\n      let out = '';\n      for (let i = 0; i < tokens.length; i++) {\n        const anyToken = tokens[i];\n        // Run any renderer extensions\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n          const ret = this.options.extensions.renderers[anyToken.type].call({\n            parser: this\n          }, anyToken);\n          if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n        const token = anyToken;\n        switch (token.type) {\n          case 'escape':\n            {\n              out += renderer.text(token);\n              break;\n            }\n          case 'html':\n            {\n              out += renderer.html(token);\n              break;\n            }\n          case 'link':\n            {\n              out += renderer.link(token);\n              break;\n            }\n          case 'image':\n            {\n              out += renderer.image(token);\n              break;\n            }\n          case 'strong':\n            {\n              out += renderer.strong(token);\n              break;\n            }\n          case 'em':\n            {\n              out += renderer.em(token);\n              break;\n            }\n          case 'codespan':\n            {\n              out += renderer.codespan(token);\n              break;\n            }\n          case 'br':\n            {\n              out += renderer.br(token);\n              break;\n            }\n          case 'del':\n            {\n              out += renderer.del(token);\n              break;\n            }\n          case 'text':\n            {\n              out += renderer.text(token);\n              break;\n            }\n          default:\n            {\n              const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return '';\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n  }\n  class _Hooks {\n    options;\n    constructor(options) {\n      this.options = options || exports.defaults;\n    }\n    static passThroughHooks = new Set(['preprocess', 'postprocess', 'processAllTokens']);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n      return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n      return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n      return tokens;\n    }\n  }\n  class Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n      this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n      let values = [];\n      for (const token of tokens) {\n        values = values.concat(callback.call(this, token));\n        switch (token.type) {\n          case 'table':\n            {\n              const tableToken = token;\n              for (const cell of tableToken.header) {\n                values = values.concat(this.walkTokens(cell.tokens, callback));\n              }\n              for (const row of tableToken.rows) {\n                for (const cell of row) {\n                  values = values.concat(this.walkTokens(cell.tokens, callback));\n                }\n              }\n              break;\n            }\n          case 'list':\n            {\n              const listToken = token;\n              values = values.concat(this.walkTokens(listToken.items, callback));\n              break;\n            }\n          default:\n            {\n              const genericToken = token;\n              if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                this.defaults.extensions.childTokens[genericToken.type].forEach(childTokens => {\n                  const tokens = genericToken[childTokens].flat(Infinity);\n                  values = values.concat(this.walkTokens(tokens, callback));\n                });\n              } else if (genericToken.tokens) {\n                values = values.concat(this.walkTokens(genericToken.tokens, callback));\n              }\n            }\n        }\n      }\n      return values;\n    }\n    use(...args) {\n      const extensions = this.defaults.extensions || {\n        renderers: {},\n        childTokens: {}\n      };\n      args.forEach(pack => {\n        // copy options to new object\n        const opts = {\n          ...pack\n        };\n        // set async to true if it was set to true before\n        opts.async = this.defaults.async || opts.async || false;\n        // ==-- Parse \"addon\" extensions --== //\n        if (pack.extensions) {\n          pack.extensions.forEach(ext => {\n            if (!ext.name) {\n              throw new Error('extension name required');\n            }\n            if ('renderer' in ext) {\n              // Renderer extensions\n              const prevRenderer = extensions.renderers[ext.name];\n              if (prevRenderer) {\n                // Replace extension with func to run new extension but fall back if false\n                extensions.renderers[ext.name] = function (...args) {\n                  let ret = ext.renderer.apply(this, args);\n                  if (ret === false) {\n                    ret = prevRenderer.apply(this, args);\n                  }\n                  return ret;\n                };\n              } else {\n                extensions.renderers[ext.name] = ext.renderer;\n              }\n            }\n            if ('tokenizer' in ext) {\n              // Tokenizer Extensions\n              if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n                throw new Error(\"extension level must be 'block' or 'inline'\");\n              }\n              const extLevel = extensions[ext.level];\n              if (extLevel) {\n                extLevel.unshift(ext.tokenizer);\n              } else {\n                extensions[ext.level] = [ext.tokenizer];\n              }\n              if (ext.start) {\n                // Function to check for start of token\n                if (ext.level === 'block') {\n                  if (extensions.startBlock) {\n                    extensions.startBlock.push(ext.start);\n                  } else {\n                    extensions.startBlock = [ext.start];\n                  }\n                } else if (ext.level === 'inline') {\n                  if (extensions.startInline) {\n                    extensions.startInline.push(ext.start);\n                  } else {\n                    extensions.startInline = [ext.start];\n                  }\n                }\n              }\n            }\n            if ('childTokens' in ext && ext.childTokens) {\n              // Child tokens to be visited by walkTokens\n              extensions.childTokens[ext.name] = ext.childTokens;\n            }\n          });\n          opts.extensions = extensions;\n        }\n        // ==-- Parse \"overwrite\" extensions --== //\n        if (pack.renderer) {\n          const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n          for (const prop in pack.renderer) {\n            if (!(prop in renderer)) {\n              throw new Error(`renderer '${prop}' does not exist`);\n            }\n            if (['options', 'parser'].includes(prop)) {\n              // ignore options property\n              continue;\n            }\n            const rendererProp = prop;\n            let rendererFunc = pack.renderer[rendererProp];\n            const prevRenderer = renderer[rendererProp];\n            // Replace renderer with func to run extension, but fall back if false\n            renderer[rendererProp] = (...args) => {\n              if (!pack.useNewRenderer) {\n                // TODO: Remove this in next major version\n                rendererFunc = this.#convertRendererFunction(rendererFunc, rendererProp, renderer);\n              }\n              let ret = rendererFunc.apply(renderer, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(renderer, args);\n              }\n              return ret || '';\n            };\n          }\n          opts.renderer = renderer;\n        }\n        if (pack.tokenizer) {\n          const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n          for (const prop in pack.tokenizer) {\n            if (!(prop in tokenizer)) {\n              throw new Error(`tokenizer '${prop}' does not exist`);\n            }\n            if (['options', 'rules', 'lexer'].includes(prop)) {\n              // ignore options, rules, and lexer properties\n              continue;\n            }\n            const tokenizerProp = prop;\n            const tokenizerFunc = pack.tokenizer[tokenizerProp];\n            const prevTokenizer = tokenizer[tokenizerProp];\n            // Replace tokenizer with func to run extension, but fall back if false\n            // @ts-expect-error cannot type tokenizer function dynamically\n            tokenizer[tokenizerProp] = (...args) => {\n              let ret = tokenizerFunc.apply(tokenizer, args);\n              if (ret === false) {\n                ret = prevTokenizer.apply(tokenizer, args);\n              }\n              return ret;\n            };\n          }\n          opts.tokenizer = tokenizer;\n        }\n        // ==-- Parse Hooks extensions --== //\n        if (pack.hooks) {\n          const hooks = this.defaults.hooks || new _Hooks();\n          for (const prop in pack.hooks) {\n            if (!(prop in hooks)) {\n              throw new Error(`hook '${prop}' does not exist`);\n            }\n            if (prop === 'options') {\n              // ignore options property\n              continue;\n            }\n            const hooksProp = prop;\n            const hooksFunc = pack.hooks[hooksProp];\n            const prevHook = hooks[hooksProp];\n            if (_Hooks.passThroughHooks.has(prop)) {\n              // @ts-expect-error cannot type hook function dynamically\n              hooks[hooksProp] = arg => {\n                if (this.defaults.async) {\n                  return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                    return prevHook.call(hooks, ret);\n                  });\n                }\n                const ret = hooksFunc.call(hooks, arg);\n                return prevHook.call(hooks, ret);\n              };\n            } else {\n              // @ts-expect-error cannot type hook function dynamically\n              hooks[hooksProp] = (...args) => {\n                let ret = hooksFunc.apply(hooks, args);\n                if (ret === false) {\n                  ret = prevHook.apply(hooks, args);\n                }\n                return ret;\n              };\n            }\n          }\n          opts.hooks = hooks;\n        }\n        // ==-- Parse WalkTokens extensions --== //\n        if (pack.walkTokens) {\n          const walkTokens = this.defaults.walkTokens;\n          const packWalktokens = pack.walkTokens;\n          opts.walkTokens = function (token) {\n            let values = [];\n            values.push(packWalktokens.call(this, token));\n            if (walkTokens) {\n              values = values.concat(walkTokens.call(this, token));\n            }\n            return values;\n          };\n        }\n        this.defaults = {\n          ...this.defaults,\n          ...opts\n        };\n      });\n      return this;\n    }\n    // TODO: Remove this in next major release\n    #convertRendererFunction(func, prop, renderer) {\n      switch (prop) {\n        case 'heading':\n          return function (token) {\n            if (!token.type || token.type !== prop) {\n              // @ts-ignore\n              // eslint-disable-next-line prefer-rest-params\n              return func.apply(this, arguments);\n            }\n            return func.call(this, renderer.parser.parseInline(token.tokens), token.depth, unescape(renderer.parser.parseInline(token.tokens, renderer.parser.textRenderer)));\n          };\n        case 'code':\n          return function (token) {\n            if (!token.type || token.type !== prop) {\n              // @ts-ignore\n              // eslint-disable-next-line prefer-rest-params\n              return func.apply(this, arguments);\n            }\n            return func.call(this, token.text, token.lang, !!token.escaped);\n          };\n        case 'table':\n          return function (token) {\n            if (!token.type || token.type !== prop) {\n              // @ts-ignore\n              // eslint-disable-next-line prefer-rest-params\n              return func.apply(this, arguments);\n            }\n            let header = '';\n            // header\n            let cell = '';\n            for (let j = 0; j < token.header.length; j++) {\n              cell += this.tablecell({\n                text: token.header[j].text,\n                tokens: token.header[j].tokens,\n                header: true,\n                align: token.align[j]\n              });\n            }\n            header += this.tablerow({\n              text: cell\n            });\n            let body = '';\n            for (let j = 0; j < token.rows.length; j++) {\n              const row = token.rows[j];\n              cell = '';\n              for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell({\n                  text: row[k].text,\n                  tokens: row[k].tokens,\n                  header: false,\n                  align: token.align[k]\n                });\n              }\n              body += this.tablerow({\n                text: cell\n              });\n            }\n            return func.call(this, header, body);\n          };\n        case 'blockquote':\n          return function (token) {\n            if (!token.type || token.type !== prop) {\n              // @ts-ignore\n              // eslint-disable-next-line prefer-rest-params\n              return func.apply(this, arguments);\n            }\n            const body = this.parser.parse(token.tokens);\n            return func.call(this, body);\n          };\n        case 'list':\n          return function (token) {\n            if (!token.type || token.type !== prop) {\n              // @ts-ignore\n              // eslint-disable-next-line prefer-rest-params\n              return func.apply(this, arguments);\n            }\n            const ordered = token.ordered;\n            const start = token.start;\n            const loose = token.loose;\n            let body = '';\n            for (let j = 0; j < token.items.length; j++) {\n              const item = token.items[j];\n              const checked = item.checked;\n              const task = item.task;\n              let itemBody = '';\n              if (item.task) {\n                const checkbox = this.checkbox({\n                  checked: !!checked\n                });\n                if (loose) {\n                  if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                      item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                  } else {\n                    item.tokens.unshift({\n                      type: 'text',\n                      text: checkbox + ' '\n                    });\n                  }\n                } else {\n                  itemBody += checkbox + ' ';\n                }\n              }\n              itemBody += this.parser.parse(item.tokens, loose);\n              body += this.listitem({\n                type: 'list_item',\n                raw: itemBody,\n                text: itemBody,\n                task,\n                checked: !!checked,\n                loose,\n                tokens: item.tokens\n              });\n            }\n            return func.call(this, body, ordered, start);\n          };\n        case 'html':\n          return function (token) {\n            if (!token.type || token.type !== prop) {\n              // @ts-ignore\n              // eslint-disable-next-line prefer-rest-params\n              return func.apply(this, arguments);\n            }\n            return func.call(this, token.text, token.block);\n          };\n        case 'paragraph':\n          return function (token) {\n            if (!token.type || token.type !== prop) {\n              // @ts-ignore\n              // eslint-disable-next-line prefer-rest-params\n              return func.apply(this, arguments);\n            }\n            return func.call(this, this.parser.parseInline(token.tokens));\n          };\n        case 'escape':\n          return function (token) {\n            if (!token.type || token.type !== prop) {\n              // @ts-ignore\n              // eslint-disable-next-line prefer-rest-params\n              return func.apply(this, arguments);\n            }\n            return func.call(this, token.text);\n          };\n        case 'link':\n          return function (token) {\n            if (!token.type || token.type !== prop) {\n              // @ts-ignore\n              // eslint-disable-next-line prefer-rest-params\n              return func.apply(this, arguments);\n            }\n            return func.call(this, token.href, token.title, this.parser.parseInline(token.tokens));\n          };\n        case 'image':\n          return function (token) {\n            if (!token.type || token.type !== prop) {\n              // @ts-ignore\n              // eslint-disable-next-line prefer-rest-params\n              return func.apply(this, arguments);\n            }\n            return func.call(this, token.href, token.title, token.text);\n          };\n        case 'strong':\n          return function (token) {\n            if (!token.type || token.type !== prop) {\n              // @ts-ignore\n              // eslint-disable-next-line prefer-rest-params\n              return func.apply(this, arguments);\n            }\n            return func.call(this, this.parser.parseInline(token.tokens));\n          };\n        case 'em':\n          return function (token) {\n            if (!token.type || token.type !== prop) {\n              // @ts-ignore\n              // eslint-disable-next-line prefer-rest-params\n              return func.apply(this, arguments);\n            }\n            return func.call(this, this.parser.parseInline(token.tokens));\n          };\n        case 'codespan':\n          return function (token) {\n            if (!token.type || token.type !== prop) {\n              // @ts-ignore\n              // eslint-disable-next-line prefer-rest-params\n              return func.apply(this, arguments);\n            }\n            return func.call(this, token.text);\n          };\n        case 'del':\n          return function (token) {\n            if (!token.type || token.type !== prop) {\n              // @ts-ignore\n              // eslint-disable-next-line prefer-rest-params\n              return func.apply(this, arguments);\n            }\n            return func.call(this, this.parser.parseInline(token.tokens));\n          };\n        case 'text':\n          return function (token) {\n            if (!token.type || token.type !== prop) {\n              // @ts-ignore\n              // eslint-disable-next-line prefer-rest-params\n              return func.apply(this, arguments);\n            }\n            return func.call(this, token.text);\n          };\n        // do nothing\n      }\n      return func;\n    }\n    setOptions(opt) {\n      this.defaults = {\n        ...this.defaults,\n        ...opt\n      };\n      return this;\n    }\n    lexer(src, options) {\n      return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n      return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n      return (src, options) => {\n        const origOpt = {\n          ...options\n        };\n        const opt = {\n          ...this.defaults,\n          ...origOpt\n        };\n        // Show warning if an extension set async to true but the parse was called with async: false\n        if (this.defaults.async === true && origOpt.async === false) {\n          if (!opt.silent) {\n            console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n          }\n          opt.async = true;\n        }\n        const throwError = this.#onError(!!opt.silent, !!opt.async);\n        // throw error in case of non string input\n        if (typeof src === 'undefined' || src === null) {\n          return throwError(new Error('marked(): input parameter is undefined or null'));\n        }\n        if (typeof src !== 'string') {\n          return throwError(new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected'));\n        }\n        if (opt.hooks) {\n          opt.hooks.options = opt;\n        }\n        if (opt.async) {\n          return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then(src => lexer(src, opt)).then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens).then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then(tokens => parser(tokens, opt)).then(html => opt.hooks ? opt.hooks.postprocess(html) : html).catch(throwError);\n        }\n        try {\n          if (opt.hooks) {\n            src = opt.hooks.preprocess(src);\n          }\n          let tokens = lexer(src, opt);\n          if (opt.hooks) {\n            tokens = opt.hooks.processAllTokens(tokens);\n          }\n          if (opt.walkTokens) {\n            this.walkTokens(tokens, opt.walkTokens);\n          }\n          let html = parser(tokens, opt);\n          if (opt.hooks) {\n            html = opt.hooks.postprocess(html);\n          }\n          return html;\n        } catch (e) {\n          return throwError(e);\n        }\n      };\n    }\n    #onError(silent, async) {\n      return e => {\n        e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n        if (silent) {\n          const msg = '<p>An error occurred:</p><pre>' + escape$1(e.message + '', true) + '</pre>';\n          if (async) {\n            return Promise.resolve(msg);\n          }\n          return msg;\n        }\n        if (async) {\n          return Promise.reject(e);\n        }\n        throw e;\n      };\n    }\n  }\n  const markedInstance = new Marked();\n  function marked(src, opt) {\n    return markedInstance.parse(src, opt);\n  }\n  /**\n   * Sets the default options.\n   *\n   * @param options Hash of options\n   */\n  marked.options = marked.setOptions = function (options) {\n    markedInstance.setOptions(options);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n  };\n  /**\n   * Gets the original marked default options.\n   */\n  marked.getDefaults = _getDefaults;\n  marked.defaults = exports.defaults;\n  /**\n   * Use Extension\n   */\n  marked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n  };\n  /**\n   * Run callback for every token\n   */\n  marked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n  };\n  /**\n   * Compiles markdown to HTML without enclosing `p` tag.\n   *\n   * @param src String of markdown source to be compiled\n   * @param options Hash of options\n   * @return String of compiled HTML\n   */\n  marked.parseInline = markedInstance.parseInline;\n  /**\n   * Expose\n   */\n  marked.Parser = _Parser;\n  marked.parser = _Parser.parse;\n  marked.Renderer = _Renderer;\n  marked.TextRenderer = _TextRenderer;\n  marked.Lexer = _Lexer;\n  marked.lexer = _Lexer.lex;\n  marked.Tokenizer = _Tokenizer;\n  marked.Hooks = _Hooks;\n  marked.parse = marked;\n  const options = marked.options;\n  const setOptions = marked.setOptions;\n  const use = marked.use;\n  const walkTokens = marked.walkTokens;\n  const parseInline = marked.parseInline;\n  const parse = marked;\n  const parser = _Parser.parse;\n  const lexer = _Lexer.lex;\n  exports.Hooks = _Hooks;\n  exports.Lexer = _Lexer;\n  exports.Marked = Marked;\n  exports.Parser = _Parser;\n  exports.Renderer = _Renderer;\n  exports.TextRenderer = _TextRenderer;\n  exports.Tokenizer = _Tokenizer;\n  exports.getDefaults = _getDefaults;\n  exports.lexer = lexer;\n  exports.marked = marked;\n  exports.options = options;\n  exports.parse = parse;\n  exports.parseInline = parseInline;\n  exports.parser = parser;\n  exports.setOptions = setOptions;\n  exports.use = use;\n  exports.walkTokens = walkTokens;\n});","map":{"version":3,"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","exports","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","valSource","getRegex","cleanUrl","href","encodeURI","e","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","indexOf","level","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","options","rules","constructor","space","src","block","newline","code","codeBlockStyle","fences","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","list","bull","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","blankLine","indent","trimStart","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","istask","ischecked","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","headers","aligns","rows","item","header","align","cell","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","linkString","emStrong","maskedSrc","prevChar","emStrongLDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","blockCode","bullet","_paragraph","blockText","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","inlineCode","_punctuation","blockSkip","_inlineComment","_inlineLabel","reflinkSearch","inlineNormal","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","Object","create","lex","lexInline","next","lastParagraphClipped","leading","tabs","cutSrc","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","parser","langString","body","parse","parseInline","j","listitem","startAttr","itemBody","checkbox","unshift","tablecell","tablerow","k","content","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","anyToken","renderers","genericToken","ret","textToken","_Hooks","passThroughHooks","Set","preprocess","markdown","postprocess","processAllTokens","Marked","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","tableToken","listToken","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","useNewRenderer","convertRendererFunction","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","has","arg","Promise","resolve","then","packWalktokens","#convertRendererFunction","func","arguments","#parseMarkdown","origOpt","warn","throwError","onError","prototype","toString","all","catch","#onError","message","msg","reject","markedInstance","marked","getDefaults"],"sources":["../src/defaults.ts","../src/helpers.ts","../src/Tokenizer.ts","../src/rules.ts","../src/Lexer.ts","../src/Renderer.ts","../src/TextRenderer.ts","../src/Parser.ts","../src/Hooks.ts","../src/Instance.ts","../src/marked.ts"],"sourcesContent":["/**\n * Gets the original marked default options.\n */\nexport function _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nexport let _defaults = _getDefaults();\nexport function changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n","/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nexport function escape(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nexport function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nexport function edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nexport function cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nexport const noopTest = { exec: () => null };\nexport function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nexport function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport { rtrim, splitCells, escape, findClosingBracket } from './helpers.ts';\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n')\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (/^ {0,3}>/.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1')\n                    .replace(/^ {0,3}>[ \\t]?/gm, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens[tokens.length - 1];\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens[tokens.length - 1].raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = list.items[list.items.length - 1].raw.trimEnd();\n            list.items[list.items.length - 1].text = list.items[list.items.length - 1].text.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i]\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i]\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n","import { edit, noopTest } from './helpers.ts';\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nexport const block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nexport const inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { block, inline } from './rules.ts';\n/**\n * Block Lexer\n */\nexport class _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { cleanUrl, escape } from './helpers.ts';\n/**\n * Renderer\n */\nexport class _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(/^\\S*/)?.[0];\n        const code = text.replace(/\\n$/, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(langString)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' '\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${text}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : token.text;\n    }\n}\n","/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body }]\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n","import { _defaults } from './defaults.ts';\nexport class _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape, unescape } from './helpers.ts';\nexport class Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    let rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        if (!pack.useNewRenderer) {\n                            // TODO: Remove this in next major version\n                            rendererFunc = this.#convertRendererFunction(rendererFunc, rendererProp, renderer);\n                        }\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    // TODO: Remove this in next major release\n    #convertRendererFunction(func, prop, renderer) {\n        switch (prop) {\n            case 'heading':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, renderer.parser.parseInline(token.tokens), token.depth, unescape(renderer.parser.parseInline(token.tokens, renderer.parser.textRenderer)));\n                };\n            case 'code':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text, token.lang, !!token.escaped);\n                };\n            case 'table':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < token.header.length; j++) {\n                        cell += this.tablecell({\n                            text: token.header[j].text,\n                            tokens: token.header[j].tokens,\n                            header: true,\n                            align: token.align[j]\n                        });\n                    }\n                    header += this.tablerow({ text: cell });\n                    let body = '';\n                    for (let j = 0; j < token.rows.length; j++) {\n                        const row = token.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.tablecell({\n                                text: row[k].text,\n                                tokens: row[k].tokens,\n                                header: false,\n                                align: token.align[k]\n                            });\n                        }\n                        body += this.tablerow({ text: cell });\n                    }\n                    return func.call(this, header, body);\n                };\n            case 'blockquote':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    const body = this.parser.parse(token.tokens);\n                    return func.call(this, body);\n                };\n            case 'list':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    const ordered = token.ordered;\n                    const start = token.start;\n                    const loose = token.loose;\n                    let body = '';\n                    for (let j = 0; j < token.items.length; j++) {\n                        const item = token.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.checkbox({ checked: !!checked });\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parser.parse(item.tokens, loose);\n                        body += this.listitem({\n                            type: 'list_item',\n                            raw: itemBody,\n                            text: itemBody,\n                            task,\n                            checked: !!checked,\n                            loose,\n                            tokens: item.tokens\n                        });\n                    }\n                    return func.call(this, body, ordered, start);\n                };\n            case 'html':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text, token.block);\n                };\n            case 'paragraph':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'escape':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text);\n                };\n            case 'link':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.href, token.title, this.parser.parseInline(token.tokens));\n                };\n            case 'image':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.href, token.title, token.text);\n                };\n            case 'strong':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'em':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'codespan':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text);\n                };\n            case 'del':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'text':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text);\n                };\n            default:\n            // do nothing\n        }\n        return func;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport { _getDefaults, changeDefaults, _defaults } from './defaults.ts';\nconst markedInstance = new Marked();\nexport function marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}