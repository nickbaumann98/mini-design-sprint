{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport InputWithSendIcon from './InputWithSendIcon';\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n`;\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\nconst Question = styled.h2`\n  font-size: 1.8rem;\n  margin-bottom: 20px;\n`;\nconst FeedbackArea = styled.div`\n  background-color: #f8f9fa;\n  color: #1e1e1e;\n  padding: 20px;\n  border-radius: 15px;\n  margin-top: 20px;\n`;\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [input, setInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [stickyNotes, setStickyNotes] = useState([]);\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const handleSubmit = async () => {\n    const prompt = `Day ${currentDay} of Design Sprint. User input: \"${input}\". ${getCurrentPrompt()} Provide specific, constructive feedback as an expert design sprint coach. If the input is sufficient, suggest moving to the next task. If not, guide the user to improve their response.`;\n    try {\n      const response = await getGPTResponse(prompt);\n      setFeedback(response);\n      setSprintData(prev => ({\n        ...prev,\n        [currentDay]: [...(prev[currentDay] || []), {\n          question: getCurrentPrompt(),\n          answer: input\n        }]\n      }));\n      setInput('');\n      if (response.toLowerCase().includes(\"next task\") || response.toLowerCase().includes(\"move on\")) {\n        setTimeout(() => {\n          setCurrentDay(prev => Math.min(prev + 1, 5));\n          setFeedback('');\n        }, 3000);\n      }\n    } catch (error) {\n      console.error(\"Error getting AI response:\", error);\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n    }\n  };\n  const addStickyNote = note => {\n    setStickyNotes(prev => [...prev, note]);\n  };\n  useEffect(() => {\n    const initialPrompt = `Welcome to Day ${currentDay} of the Design Sprint. ${getCurrentPrompt()} As an expert design sprint coach, provide a brief, encouraging message to start the day.`;\n    getGPTResponse(initialPrompt).then(setFeedback);\n  }, [currentDay, getCurrentPrompt]);\n  return /*#__PURE__*/React.createElement(SprintContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MainContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, `Day ${currentDay}: ${sprintGuidance[currentDay].goal}`), /*#__PURE__*/React.createElement(Question, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, getCurrentPrompt()), /*#__PURE__*/React.createElement(InputWithSendIcon, {\n    value: input,\n    onChange: e => setInput(e.target.value),\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), feedback && /*#__PURE__*/React.createElement(FeedbackArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 22\n    }\n  }, feedback)), /*#__PURE__*/React.createElement(OutputSidebar, {\n    sprintData: sprintData,\n    currentDay: currentDay,\n    stickyNotes: stickyNotes,\n    onAddStickyNote: addStickyNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }));\n};\nexport default DaySprint;","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","getGPTResponse","sprintGuidance","OutputSidebar","InputWithSendIcon","SprintContainer","div","MainContent","Header","h1","Question","h2","FeedbackArea","DaySprint","currentDay","setCurrentDay","input","setInput","feedback","setFeedback","sprintData","setSprintData","stickyNotes","setStickyNotes","getCurrentPrompt","prompt","handleSubmit","response","prev","question","answer","toLowerCase","includes","setTimeout","Math","min","error","console","addStickyNote","note","initialPrompt","then","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","goal","value","onChange","e","target","onSubmit","onAddStickyNote"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport InputWithSendIcon from './InputWithSendIcon';\n\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\n\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n`;\n\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\n\nconst Question = styled.h2`\n  font-size: 1.8rem;\n  margin-bottom: 20px;\n`;\n\nconst FeedbackArea = styled.div`\n  background-color: #f8f9fa;\n  color: #1e1e1e;\n  padding: 20px;\n  border-radius: 15px;\n  margin-top: 20px;\n`;\n\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [input, setInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [stickyNotes, setStickyNotes] = useState([]);\n\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n\n  const handleSubmit = async () => {\n    const prompt = `Day ${currentDay} of Design Sprint. User input: \"${input}\". ${getCurrentPrompt()} Provide specific, constructive feedback as an expert design sprint coach. If the input is sufficient, suggest moving to the next task. If not, guide the user to improve their response.`;\n    \n    try {\n      const response = await getGPTResponse(prompt);\n      setFeedback(response);\n      \n      setSprintData(prev => ({\n        ...prev,\n        [currentDay]: [...(prev[currentDay] || []), { question: getCurrentPrompt(), answer: input }]\n      }));\n      setInput('');\n\n      if (response.toLowerCase().includes(\"next task\") || response.toLowerCase().includes(\"move on\")) {\n        setTimeout(() => {\n          setCurrentDay(prev => Math.min(prev + 1, 5));\n          setFeedback('');\n        }, 3000);\n      }\n    } catch (error) {\n      console.error(\"Error getting AI response:\", error);\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n    }\n  };\n\n  const addStickyNote = (note) => {\n    setStickyNotes(prev => [...prev, note]);\n  };\n\n  useEffect(() => {\n    const initialPrompt = `Welcome to Day ${currentDay} of the Design Sprint. ${getCurrentPrompt()} As an expert design sprint coach, provide a brief, encouraging message to start the day.`;\n    getGPTResponse(initialPrompt).then(setFeedback);\n  }, [currentDay, getCurrentPrompt]);\n\n  return (\n    <SprintContainer>\n      <MainContent>\n        <Header>{`Day ${currentDay}: ${sprintGuidance[currentDay].goal}`}</Header>\n        <Question>{getCurrentPrompt()}</Question>\n        <InputWithSendIcon\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onSubmit={handleSubmit}\n        />\n        {feedback && <FeedbackArea>{feedback}</FeedbackArea>}\n      </MainContent>\n      <OutputSidebar\n        sprintData={sprintData}\n        currentDay={currentDay}\n        stickyNotes={stickyNotes}\n        onAddStickyNote={addStickyNote}\n      />\n    </SprintContainer>\n  );\n};\n\nexport default DaySprint;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}