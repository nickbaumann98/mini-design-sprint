{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport InputWithSendIcon from './InputWithSendIcon';\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\nconst AIMessage = styled.div`\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n  padding: 15px;\n  border-radius: 15px;\n  margin-bottom: 20px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  position: relative;\n  max-width: 80%;\n  align-self: flex-start;\n`;\nconst RelayIcon = styled.span`\n  font-weight: bold;\n  color: #3c8ce7;\n  margin-right: 5px;\n`;\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\nconst StickyNotesSection = styled.div`\n  margin-top: 2rem;\n`;\nconst StickyNotesGrid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\nconst StickyNote = styled.div`\n  background-color: #feff9c;\n  padding: 0.75rem;\n  width: 150px;\n  height: 150px;\n  border-radius: 3px;\n  color: #000000;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  text-align: center;\n  position: relative;\n`;\nconst DeleteNote = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  background: none;\n  border: none;\n  color: #ff4136;\n  cursor: pointer;\n  font-size: 1.2rem;\n`;\nconst StickyNoteInput = styled.input`\n  width: 100%;\n  padding: 0.75rem;\n  margin-bottom: 0.75rem;\n  border: none;\n  border-radius: 3px;\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n`;\nconst StickyNotePrompt = styled.p`\n  color: #b0b0b0;\n  font-style: italic;\n  margin-bottom: 10px;\n`;\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [input, setInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [stickyNotes, setStickyNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n  const handleSubmit = async () => {\n    if (!input.trim()) return;\n    setIsTyping(true);\n    const userInput = input;\n    setInput('');\n    const prompt = `Day ${currentDay} of Design Sprint. User input: \"${userInput}\". ${getCurrentPrompt()} Provide guidance and suggestions to help the user develop their own ideas. Do not provide direct answers or solutions. Encourage the user to think critically and come up with their own responses.`;\n    try {\n      const response = await getGPTResponse(prompt);\n      const cleanedResponse = response.replace('[SHOW_NEXT_DAY_BUTTON]', '').trim();\n      setFeedback(cleanedResponse);\n      const currentObjective = getCurrentObjectives()[Object.keys(sprintData[currentDay] || {}).length];\n\n      // Handle all objectives\n      let summaryPrompt;\n      if (currentObjective.includes(\"Critical Questions\")) {\n        summaryPrompt = `Extract and list the critical questions from the following user input for the Design Sprint Day ${currentDay}. User input: \"${userInput}\". Provide only the numbered list of questions, without any additional text.`;\n      } else {\n        summaryPrompt = `Summarize and refine the following user input for the Design Sprint Day ${currentDay}, objective: ${currentObjective}. User input: \"${userInput}\". Provide a concise, clear summary that captures the essence of the user's input. Do not include any meta-text like [SHOW_NEXT_DAY_BUTTON].`;\n      }\n      const summary = await getGPTResponse(summaryPrompt);\n      setSprintData(prev => ({\n        ...prev,\n        [currentDay]: {\n          ...prev[currentDay],\n          [currentObjective]: summary\n        }\n      }));\n    } catch (error) {\n      console.error(\"Error getting AI response:\", error);\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  const moveToNextDay = () => {\n    setCurrentDay(prev => Math.min(prev + 1, 5));\n    setFeedback('');\n  };\n  const addStickyNote = () => {\n    if (newNote.trim()) {\n      setStickyNotes(prev => [...prev, newNote]);\n      setNewNote('');\n    }\n  };\n  const deleteStickyNote = index => {\n    setStickyNotes(prev => prev.filter((_, i) => i !== index));\n  };\n  const isReadyForNextDay = useCallback(() => {\n    const currentObjectives = getCurrentObjectives();\n    const completedObjectives = sprintData[currentDay] ? Object.keys(sprintData[currentDay]).length : 0;\n    return completedObjectives === currentObjectives.length;\n  }, [currentDay, sprintData, getCurrentObjectives]);\n  useEffect(() => {\n    const initialPrompt = `Welcome to Day ${currentDay} of the Design Sprint. ${getCurrentPrompt()} As an expert design sprint coach, provide a brief, encouraging message to start the day. Remind the user of the objectives they need to complete.`;\n    setIsTyping(true);\n    getGPTResponse(initialPrompt).then(response => {\n      setFeedback(response);\n      setIsTyping(false);\n    });\n  }, [currentDay, getCurrentPrompt]);\n  return /*#__PURE__*/React.createElement(SprintContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MainContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  }, `Day ${currentDay}: ${sprintGuidance[currentDay].goal}`), isTyping ? /*#__PURE__*/React.createElement(TypingIndicator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }\n  })) : feedback && /*#__PURE__*/React.createElement(AIMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RelayIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 15\n    }\n  }, \"Relay :)\"), \" \", feedback), /*#__PURE__*/React.createElement(InputWithSendIcon, {\n    value: input,\n    onChange: e => setInput(e.target.value),\n    onSubmit: handleSubmit,\n    onKeyPress: e => e.key === 'Enter' && !e.shiftKey && handleSubmit(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }\n  }), isReadyForNextDay() && /*#__PURE__*/React.createElement(NextDayButton, {\n    onClick: moveToNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  }, \"Ready to move to Day \", currentDay + 1, \"?\"), /*#__PURE__*/React.createElement(StickyNotesSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StickyNotePrompt, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }, \"Add your quick thoughts to the sticky note board:\"), /*#__PURE__*/React.createElement(StickyNotesGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 11\n    }\n  }, stickyNotes.map((note, index) => /*#__PURE__*/React.createElement(StickyNote, {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 15\n    }\n  }, note, /*#__PURE__*/React.createElement(DeleteNote, {\n    onClick: () => deleteStickyNote(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 17\n    }\n  }, \"\\xD7\")))), /*#__PURE__*/React.createElement(StickyNoteInput, {\n    value: newNote,\n    onChange: e => setNewNote(e.target.value),\n    placeholder: \"Add a new note...\",\n    onKeyPress: e => e.key === 'Enter' && addStickyNote(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(OutputSidebar, {\n    sprintData: sprintData,\n    currentDay: currentDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }\n  }));\n};\nexport default DaySprint;","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","keyframes","getGPTResponse","sprintGuidance","OutputSidebar","InputWithSendIcon","SprintContainer","div","MainContent","Header","h1","AIMessage","RelayIcon","span","typing","TypingIndicator","NextDayButton","button","StickyNotesSection","StickyNotesGrid","StickyNote","DeleteNote","StickyNoteInput","input","StickyNotePrompt","p","DaySprint","currentDay","setCurrentDay","setInput","feedback","setFeedback","sprintData","setSprintData","stickyNotes","setStickyNotes","newNote","setNewNote","isTyping","setIsTyping","getCurrentPrompt","prompt","getCurrentObjectives","objectives","handleSubmit","trim","userInput","response","cleanedResponse","replace","currentObjective","Object","keys","length","summaryPrompt","includes","summary","prev","error","console","moveToNextDay","Math","min","addStickyNote","deleteStickyNote","index","filter","_","i","isReadyForNextDay","currentObjectives","completedObjectives","initialPrompt","then","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","goal","value","onChange","e","target","onSubmit","onKeyPress","key","shiftKey","onClick","map","note","placeholder"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport InputWithSendIcon from './InputWithSendIcon';\n\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\n\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\n\nconst AIMessage = styled.div`\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n  padding: 15px;\n  border-radius: 15px;\n  margin-bottom: 20px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  position: relative;\n  max-width: 80%;\n  align-self: flex-start;\n`;\n\nconst RelayIcon = styled.span`\n  font-weight: bold;\n  color: #3c8ce7;\n  margin-right: 5px;\n`;\n\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\n\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\n\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\n\nconst StickyNotesSection = styled.div`\n  margin-top: 2rem;\n`;\n\nconst StickyNotesGrid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nconst StickyNote = styled.div`\n  background-color: #feff9c;\n  padding: 0.75rem;\n  width: 150px;\n  height: 150px;\n  border-radius: 3px;\n  color: #000000;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  text-align: center;\n  position: relative;\n`;\n\nconst DeleteNote = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  background: none;\n  border: none;\n  color: #ff4136;\n  cursor: pointer;\n  font-size: 1.2rem;\n`;\n\nconst StickyNoteInput = styled.input`\n  width: 100%;\n  padding: 0.75rem;\n  margin-bottom: 0.75rem;\n  border: none;\n  border-radius: 3px;\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n`;\n\nconst StickyNotePrompt = styled.p`\n  color: #b0b0b0;\n  font-style: italic;\n  margin-bottom: 10px;\n`;\n\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [input, setInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [stickyNotes, setStickyNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n\n  const handleSubmit = async () => {\n    if (!input.trim()) return;\n    \n    setIsTyping(true);\n    const userInput = input;\n    setInput('');\n    \n    const prompt = `Day ${currentDay} of Design Sprint. User input: \"${userInput}\". ${getCurrentPrompt()} Provide guidance and suggestions to help the user develop their own ideas. Do not provide direct answers or solutions. Encourage the user to think critically and come up with their own responses.`;\n    \n    try {\n      const response = await getGPTResponse(prompt);\n      const cleanedResponse = response.replace('[SHOW_NEXT_DAY_BUTTON]', '').trim();\n      setFeedback(cleanedResponse);\n      \n      const currentObjective = getCurrentObjectives()[Object.keys(sprintData[currentDay] || {}).length];\n      \n      // Handle all objectives\n      let summaryPrompt;\n      if (currentObjective.includes(\"Critical Questions\")) {\n        summaryPrompt = `Extract and list the critical questions from the following user input for the Design Sprint Day ${currentDay}. User input: \"${userInput}\". Provide only the numbered list of questions, without any additional text.`;\n      } else {\n        summaryPrompt = `Summarize and refine the following user input for the Design Sprint Day ${currentDay}, objective: ${currentObjective}. User input: \"${userInput}\". Provide a concise, clear summary that captures the essence of the user's input. Do not include any meta-text like [SHOW_NEXT_DAY_BUTTON].`;\n      }\n      \n      const summary = await getGPTResponse(summaryPrompt);\n      \n      setSprintData(prev => ({\n        ...prev,\n        [currentDay]: {\n          ...prev[currentDay],\n          [currentObjective]: summary\n        }\n      }));\n    } catch (error) {\n      console.error(\"Error getting AI response:\", error);\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  const moveToNextDay = () => {\n    setCurrentDay(prev => Math.min(prev + 1, 5));\n    setFeedback('');\n  };\n\n  const addStickyNote = () => {\n    if (newNote.trim()) {\n      setStickyNotes(prev => [...prev, newNote]);\n      setNewNote('');\n    }\n  };\n\n  const deleteStickyNote = (index) => {\n    setStickyNotes(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const isReadyForNextDay = useCallback(() => {\n    const currentObjectives = getCurrentObjectives();\n    const completedObjectives = sprintData[currentDay] ? Object.keys(sprintData[currentDay]).length : 0;\n    return completedObjectives === currentObjectives.length;\n  }, [currentDay, sprintData, getCurrentObjectives]);\n\n  useEffect(() => {\n    const initialPrompt = `Welcome to Day ${currentDay} of the Design Sprint. ${getCurrentPrompt()} As an expert design sprint coach, provide a brief, encouraging message to start the day. Remind the user of the objectives they need to complete.`;\n    setIsTyping(true);\n    getGPTResponse(initialPrompt).then(response => {\n      setFeedback(response);\n      setIsTyping(false);\n    });\n  }, [currentDay, getCurrentPrompt]);\n\n  return (\n    <SprintContainer>\n      <MainContent>\n        <Header>{`Day ${currentDay}: ${sprintGuidance[currentDay].goal}`}</Header>\n        {isTyping ? (\n          <TypingIndicator>\n            <span></span>\n            <span></span>\n            <span></span>\n          </TypingIndicator>\n        ) : (\n          feedback && (\n            <AIMessage>\n              <RelayIcon>Relay :)</RelayIcon> {feedback}\n            </AIMessage>\n          )\n        )}\n        <InputWithSendIcon\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onSubmit={handleSubmit}\n          onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSubmit()}\n        />\n        {isReadyForNextDay() && (\n          <NextDayButton onClick={moveToNextDay}>\n            Ready to move to Day {currentDay + 1}?\n          </NextDayButton>\n        )}\n        <StickyNotesSection>\n          <StickyNotePrompt>Add your quick thoughts to the sticky note board:</StickyNotePrompt>\n          <StickyNotesGrid>\n            {stickyNotes.map((note, index) => (\n              <StickyNote key={index}>\n                {note}\n                <DeleteNote onClick={() => deleteStickyNote(index)}>×</DeleteNote>\n              </StickyNote>\n            ))}\n          </StickyNotesGrid>\n          <StickyNoteInput\n            value={newNote}\n            onChange={(e) => setNewNote(e.target.value)}\n            placeholder=\"Add a new note...\"\n            onKeyPress={(e) => e.key === 'Enter' && addStickyNote()}\n          />\n        </StickyNotesSection>\n      </MainContent>\n      <OutputSidebar\n        sprintData={sprintData}\n        currentDay={currentDay}\n      />\n    </SprintContainer>\n  );\n};\n\nexport default DaySprint;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}