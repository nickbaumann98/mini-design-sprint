{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled, { keyframes } from 'styled-components'; // Add keyframes here\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport FinalSummary from './FinalSummary';\nimport { FaPaperPlane } from 'react-icons/fa';\n\n// Styling for the container, conversation box, and input box\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\nconst ScrollableMainContent = styled(MainContent)`\n  max-height: 100vh;\n  overflow-y: auto;\n`;\nconst TimerContainer = styled.div`\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n`;\nconst RelayName = styled.span`\n  color: #3c8ce7;\n  font-weight: bold;\n`;\nconst IndentedList = styled.div`\n  margin-left: 20px;\n`;\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\nconst ConversationBox = styled.div`\n  flex-grow: 1;\n  overflow-y: auto;\n  border: 1px solid #3c8ce7;\n  padding: 10px;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n`;\nconst Input = styled.textarea`\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-radius: 5px;\n  background-color: #3a3a3a;\n  color: #e0e0e0;\n  resize: none; /* Prevent resize by user */\n  overflow: hidden; /* Hide scroll bar */\n`;\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 10px;\n`;\nconst InputBox = styled.div`\n  display: flex;\n  padding: 10px;\n  border-top: 1px solid #3c8ce7;\n  background-color: #2a2a2a;\n  align-items: center;\n`;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#3a3a3a'};\n  color: #e0e0e0;\n  padding: 10px;\n  border-radius: 15px;\n  margin-bottom: 10px;\n  max-width: 70%;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n  word-wrap: break-word; /* Ensure long words break */\n`;\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\nconst CopyButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n`;\nconst Timer = styled.div`\n  font-size: 2rem;\n  text-align: center;\n  margin: 1rem 0;\n`;\nconst CrazyEightContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst CrazyEightInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\nconst CrazyEightInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  margin-bottom: 0.5rem;\n  border: 1px solid #3c8ce7;\n  border-radius: 5px;\n`;\nconst StoryboardContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst StoryboardInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\nconst StoryboardSection = styled.textarea`\n  width: 100%;\n  height: 150px;\n  margin-top: 1rem;\n  padding: 0.5rem;\n  border-radius: 5px;\n`;\nconst PrototypeSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst InteractionSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst ToggleSidebarButton = styled.button`\n  position: fixed;\n  top: 10px;\n  right: ${props => props.isSidebarOpen ? '310px' : '10px'};\n  background-color: transparent;\n  color: #3c8ce7;\n  border: none;\n  font-size: 1.5rem;\n  cursor: pointer;\n  z-index: 1000;\n`;\nconst SubmitButton = styled(SendButton)`\n  margin-top: 10px;\n  width: 100%;\n  justify-content: center;\n`;\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [isTyping, setIsTyping] = useState(false);\n  const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n  const [timerSeconds, setTimerSeconds] = useState(480);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [crazyEightIdeas, setCrazyEightIdeas] = useState(Array(8).fill(''));\n  const [storyboardSections, setStoryboardSections] = useState(['', '', '']);\n  const [prototypeData, setPrototypeData] = useState({\n    coreElements: '',\n    structureFlow: '',\n    interactionsProcesses: ''\n  });\n  const [testingScenario, setTestingScenario] = useState('');\n  const [userInteraction, setUserInteraction] = useState('');\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const [isSprintComplete, setIsSprintComplete] = useState(false);\n  const conversationEndRef = useRef(null);\n  const scrollToBottom = useCallback(() => {\n    if (conversationEndRef.current) {\n      conversationEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, []);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n  const moveToNextDay = useCallback(() => {\n    if (currentDay < 5) {\n      setCurrentDay(prev => {\n        const nextDay = prev + 1;\n        setIsReadyForNextDay(false);\n        // Reset day-specific states\n        if (prev === 2) {\n          setCrazyEightIdeas(Array(8).fill(''));\n        } else if (prev === 3) {\n          setStoryboardSections(['', '', '']);\n        }\n        setIsTimerRunning(false);\n        setTimerSeconds(480);\n        return nextDay;\n      });\n    } else {\n      setIsSprintComplete(true);\n    }\n  }, [currentDay]);\n  const formatRelayMessage = text => {\n    return text.replace(/Relay:/g, '<RelayName>Relay:</RelayName>').replace(/(\\d+\\.)/g, '<IndentedList>$1</IndentedList>');\n  };\n  const checkDayCompletion = useCallback(() => {\n    var _sprintData$, _sprintData$2, _sprintData$3, _sprintData$4, _sprintData$5, _sprintData$6, _sprintData$7;\n    let isComplete = false;\n    switch (currentDay) {\n      case 1:\n        isComplete = ((_sprintData$ = sprintData[1]) === null || _sprintData$ === void 0 ? void 0 : _sprintData$.problem) && ((_sprintData$2 = sprintData[1]) === null || _sprintData$2 === void 0 ? void 0 : _sprintData$2[\"Long-term Goal\"]) && ((_sprintData$3 = sprintData[1]) === null || _sprintData$3 === void 0 ? void 0 : _sprintData$3[\"Critical Questions\"]);\n        break;\n      case 2:\n        isComplete = crazyEightIdeas.every(idea => idea.trim() !== '') && ((_sprintData$4 = sprintData[2]) === null || _sprintData$4 === void 0 ? void 0 : _sprintData$4.Feedback);\n        break;\n      case 3:\n        isComplete = storyboardSections.every(section => section.trim() !== '') && ((_sprintData$5 = sprintData[3]) === null || _sprintData$5 === void 0 ? void 0 : _sprintData$5.Feedback);\n        break;\n      case 4:\n        isComplete = Object.values(prototypeData).every(value => value.trim() !== '') && ((_sprintData$6 = sprintData[4]) === null || _sprintData$6 === void 0 ? void 0 : _sprintData$6.Feedback);\n        break;\n      case 5:\n        isComplete = testingScenario.trim() !== '' && userInteraction.trim() !== '' && ((_sprintData$7 = sprintData[5]) === null || _sprintData$7 === void 0 ? void 0 : _sprintData$7.Feedback);\n        break;\n      default:\n        isComplete = false;\n    }\n    setIsReadyForNextDay(isComplete);\n  }, [currentDay, sprintData, crazyEightIdeas, storyboardSections, prototypeData, testingScenario, userInteraction]);\n  useEffect(() => {\n    let interval;\n    if (isTimerRunning && timerSeconds > 0) {\n      interval = setInterval(() => {\n        setTimerSeconds(seconds => seconds - 1);\n      }, 1000);\n    } else if (timerSeconds === 0) {\n      setIsTimerRunning(false);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerRunning, timerSeconds]);\n  const getInitialPrompt = useCallback(() => {\n    switch (currentDay) {\n      case 1:\n        return `Welcome to our AI-powered Mini Design Sprint! I'm Relay, your guide through this condensed version of Jake Knapp and John Zeratsky's methodology. Over the next five short sessions, we'll rapidly innovate and prototype your idea. You can ask me questions at any time during the sprint.\n\n    Let's begin Day 1 by addressing three key points:\n    1. What problem are you trying to solve?\n    2. What's your long-term goal for this project?\n    3. What are the critical questions we need to answer?\n\n    First, tell me about the problem you're addressing. What challenges are you facing?`;\n      case 2:\n        return `Welcome to Day 2! Today, we'll generate ideas using the Crazy 8s method. Are you ready to start the timer and brainstorm 8 ideas in 8 minutes?`;\n      case 3:\n        return `It's Day 3! Let's create a three-panel storyboard for your chosen solution. Start by describing the problem or starting point in the first panel.`;\n      case 4:\n        return `Welcome to Day 4. Today, we'll design a conceptual prototype. Begin by describing the core elements of your solution.`;\n      case 5:\n        return `It's the final day! We'll conduct simulated user testing. Start by describing a testing scenario for your prototype.`;\n      default:\n        return `Welcome to Day ${currentDay} of the Design Sprint.`;\n    }\n  }, [currentDay]);\n  useEffect(() => {\n    const loadInitialPrompt = async () => {\n      setIsTyping(true);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setIsTyping(false);\n      const initialPrompt = getInitialPrompt();\n      setMessages([{\n        isUser: false,\n        text: initialPrompt\n      }]);\n    };\n    loadInitialPrompt();\n  }, [currentDay, getInitialPrompt]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const userMessage = {\n      isUser: true,\n      text: input\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsTyping(true);\n    try {\n      const context = messages.map(m => `${m.isUser ? 'User' : 'Relay'}: ${m.text}`).join('\\n');\n      let prompt = `Day ${currentDay} of Design Sprint. Context: ${context}\\nUser: ${input}\\n${getCurrentPrompt()}`;\n      const response = await getGPTResponse(prompt);\n      const aiMessage = {\n        isUser: false,\n        text: response\n      };\n      setMessages(prev => [...prev, aiMessage]);\n      updateSprintData(input, response);\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        isUser: false,\n        text: \"I'm having trouble right now. Please try again.\"\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      handleSubmit(e);\n    }\n  };\n  const updateSprintData = (input, response) => {\n    setSprintData(prev => {\n      const updatedData = {\n        ...prev\n      };\n      if (!updatedData[currentDay]) {\n        updatedData[currentDay] = {};\n      }\n      switch (currentDay) {\n        case 1:\n          if (!updatedData[1].problem) {\n            updatedData[1].problem = input;\n          } else if (!updatedData[1][\"Long-term Goal\"]) {\n            updatedData[1][\"Long-term Goal\"] = input;\n          } else if (!updatedData[1][\"Critical Questions\"]) {\n            updatedData[1][\"Critical Questions\"] = input.split(',').map(q => q.trim());\n          }\n          break;\n        case 2:\n          updatedData[2] = {\n            \"Crazy 8s\": crazyEightIdeas,\n            \"Feedback\": response\n          };\n          break;\n        case 3:\n          updatedData[3] = {\n            \"Solution Sketch\": storyboardSections,\n            \"Feedback\": response\n          };\n          break;\n        case 4:\n          updatedData[4] = {\n            ...prototypeData,\n            \"Feedback\": response\n          };\n          break;\n        case 5:\n          updatedData[5] = {\n            \"Testing Scenario\": testingScenario,\n            \"User Interaction\": userInteraction,\n            \"Feedback\": response\n          };\n          break;\n        default:\n          break;\n      }\n      return updatedData;\n    });\n    checkDayCompletion();\n  };\n  const submitCrazyEight = async () => {\n    if (crazyEightIdeas.every(idea => idea.trim() !== '')) {\n      setIsTyping(true);\n      const ideasString = crazyEightIdeas.map((idea, index) => `Idea ${index + 1}: ${idea}`).join('\\n');\n      const prompt = `The user has completed the Crazy 8s exercise with the following ideas:\\n${ideasString}\\nPlease provide a brief analysis and feedback on these ideas, highlighting any particularly promising concepts or areas for further exploration.`;\n      try {\n        const response = await getGPTResponse(prompt);\n        setMessages(prev => [...prev, {\n          isUser: false,\n          text: response\n        }]);\n        setSprintData(prev => ({\n          ...prev,\n          2: {\n            \"Crazy 8s\": crazyEightIdeas,\n            \"Feedback\": response\n          }\n        }));\n        setIsReadyForNextDay(true);\n      } catch (error) {\n        setMessages(prev => [...prev, {\n          isUser: false,\n          text: \"I'm having trouble providing feedback on your Crazy 8 ideas. Please try submitting again.\"\n        }]);\n      } finally {\n        setIsTyping(false);\n      }\n    } else {\n      alert(\"Please complete all 8 ideas before submitting.\");\n    }\n  };\n  const updateCrazyEightIdea = (index, value) => {\n    const newIdeas = [...crazyEightIdeas];\n    newIdeas[index] = value;\n    setCrazyEightIdeas(newIdeas);\n  };\n  const updateStoryboardSection = (index, value) => {\n    const newSections = [...storyboardSections];\n    newSections[index] = value;\n    setStoryboardSections(newSections);\n    checkDayCompletion();\n  };\n  const updatePrototypeData = (key, value) => {\n    setPrototypeData(prev => ({\n      ...prev,\n      [key]: value\n    }));\n    checkDayCompletion();\n  };\n  const startTimer = () => {\n    setIsTimerRunning(true);\n    setTimerSeconds(480);\n  };\n  const submitSolutionSketch = async () => {\n    if (storyboardSections.every(section => section.trim() !== '')) {\n      setIsTyping(true);\n      const sketchString = storyboardSections.map((section, index) => `Panel ${index + 1}: ${section}`).join('\\n');\n      const prompt = `The user has completed their solution sketch with the following three panels:\\n${sketchString}\\nPlease provide a brief analysis and feedback on this solution sketch, highlighting strengths and areas for improvement.`;\n      try {\n        const response = await getGPTResponse(prompt);\n        setMessages(prev => [...prev, {\n          isUser: false,\n          text: response\n        }]);\n        setSprintData(prev => ({\n          ...prev,\n          3: {\n            \"Solution Sketch\": storyboardSections,\n            \"Feedback\": response\n          }\n        }));\n        setIsReadyForNextDay(true);\n      } catch (error) {\n        setMessages(prev => [...prev, {\n          isUser: false,\n          text: \"I'm having trouble providing feedback on your solution sketch. Please try submitting again.\"\n        }]);\n      } finally {\n        setIsTyping(false);\n      }\n    } else {\n      alert(\"Please complete all three panels of the solution sketch before submitting.\");\n    }\n  };\n  const submitPrototype = async () => {\n    if (Object.values(prototypeData).every(value => value.trim() !== '')) {\n      setIsTyping(true);\n      const prototypeString = Object.entries(prototypeData).map(([key, value]) => `${key}: ${value}`).join('\\n');\n      const prompt = `The user has completed their prototype design with the following details:\\n${prototypeString}\\nPlease provide a brief analysis and feedback on this prototype, highlighting strengths and suggesting potential improvements.`;\n      try {\n        const response = await getGPTResponse(prompt);\n        setMessages(prev => [...prev, {\n          isUser: false,\n          text: response\n        }]);\n        setSprintData(prev => ({\n          ...prev,\n          4: {\n            ...prototypeData,\n            \"Feedback\": response\n          }\n        }));\n        setIsReadyForNextDay(true);\n      } catch (error) {\n        setMessages(prev => [...prev, {\n          isUser: false,\n          text: \"I'm having trouble providing feedback on your prototype. Please try submitting again.\"\n        }]);\n      } finally {\n        setIsTyping(false);\n      }\n    } else {\n      alert(\"Please complete all sections of the prototype design before submitting.\");\n    }\n  };\n  const conductSimulatedInteraction = async () => {\n    setIsTyping(true);\n    const prompt = `You are a user interacting with the following product prototype: ${JSON.stringify(prototypeData)}. Based on this testing scenario: ${testingScenario}, provide a detailed account of your experience, including what you see, what you do, and how you feel throughout the interaction. Be specific about any confusion, delight, or frustration you encounter.`;\n    try {\n      const response = await getGPTResponse(prompt);\n      setUserInteraction(response);\n      setMessages(prev => [...prev, {\n        isUser: false,\n        text: response\n      }]);\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        isUser: false,\n        text: \"Error: Unable to conduct simulated interaction.\"\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  const submitTesting = async () => {\n    if (testingScenario.trim() !== '' && userInteraction.trim() !== '') {\n      setIsTyping(true);\n      const testingString = `Testing Scenario: ${testingScenario}\\nUser Interaction: ${userInteraction}`;\n      const prompt = `The user has completed their simulated testing with the following details:\\n${testingString}\\nPlease provide a brief summary of the testing results and suggest next steps for refining the prototype.`;\n      try {\n        const response = await getGPTResponse(prompt);\n        setMessages(prev => [...prev, {\n          isUser: false,\n          text: response\n        }]);\n        setSprintData(prev => ({\n          ...prev,\n          5: {\n            \"Testing Scenario\": testingScenario,\n            \"User Interaction\": userInteraction,\n            \"Feedback\": response\n          }\n        }));\n        setIsReadyForNextDay(true);\n      } catch (error) {\n        setMessages(prev => [...prev, {\n          isUser: false,\n          text: \"I'm having trouble providing feedback on your testing results. Please try submitting again.\"\n        }]);\n      } finally {\n        setIsTyping(false);\n      }\n    } else {\n      alert(\"Please complete the testing scenario and conduct a simulated interaction before submitting.\");\n    }\n  };\n  const suggestTestingScenario = async () => {\n    setIsTyping(true);\n    const prompt = `Based on the prototype described: ${JSON.stringify(prototypeData)}, suggest a detailed and realistic testing scenario for user feedback. Describe what a user would literally do, step by step.`;\n    try {\n      const response = await getGPTResponse(prompt);\n      setTestingScenario(response);\n      setMessages(prev => [...prev, {\n        isUser: false,\n        text: `Here's a suggested testing scenario:\\n\\n${response}\\n\\nFeel free to use this or modify it as needed.`\n      }]);\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        isUser: false,\n        text: \"I'm having trouble suggesting a testing scenario. Please try creating one yourself.\"\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  return /*#__PURE__*/React.createElement(SprintContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ScrollableMainContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 13\n    }\n  }, !isSprintComplete ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 25\n    }\n  }, `Day ${currentDay}: ${sprintGuidance[currentDay].goal}`), /*#__PURE__*/React.createElement(ConversationBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 25\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(Message, {\n    key: index,\n    isUser: message.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 33\n    }\n  }, message.isUser ? 'You: ' : 'Relay: ', message.text)), isTyping && /*#__PURE__*/React.createElement(TypingIndicator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 42\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 59\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 72\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 85\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    ref: conversationEndRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(InputBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: input,\n    onChange: e => setInput(e.target.value),\n    onKeyDown: handleKeyDown,\n    placeholder: \"Type your message here...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(SendButton, {\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 29\n    }\n  }, \"Send\")), currentDay === 2 && /*#__PURE__*/React.createElement(CrazyEightContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 29\n    }\n  }), currentDay === 3 && /*#__PURE__*/React.createElement(StoryboardContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(StoryboardInstructions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 649,\n      columnNumber: 33\n    }\n  }, \"Create a three-panel storyboard that outlines your chosen solution.\"), storyboardSections.map((section, index) => /*#__PURE__*/React.createElement(StoryboardSection, {\n    key: index,\n    value: section,\n    onChange: e => updateStoryboardSection(index, e.target.value),\n    placeholder: `Panel ${index + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(SubmitButton, {\n    onClick: submitSolutionSketch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 33\n    }\n  }, \"Submit Solution Sketch\")), currentDay === 4 && /*#__PURE__*/React.createElement(PrototypeSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 33\n    }\n  }, \"Design Your Conceptual Prototype\"), Object.entries(prototypeData).map(([key, value]) => /*#__PURE__*/React.createElement(StoryboardSection, {\n    key: key,\n    value: value,\n    onChange: e => updatePrototypeData(key, e.target.value),\n    placeholder: `Describe ${key}...`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(SubmitButton, {\n    onClick: submitPrototype,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 33\n    }\n  }, \"Submit Prototype\")), currentDay === 5 && /*#__PURE__*/React.createElement(InteractionSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 684,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 33\n    }\n  }, \"Simulated User/Stakeholder Testing\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 686,\n      columnNumber: 33\n    }\n  }, \"Describe a testing scenario, conduct a simulated interaction, and analyze the results to refine your prototype.\"), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: testingScenario,\n    onChange: e => setTestingScenario(e.target.value),\n    placeholder: \"Describe a testing scenario for your prototype...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(CopyButton, {\n    onClick: suggestTestingScenario,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 37\n    }\n  }, \"Suggest Testing Scenario\"), /*#__PURE__*/React.createElement(CopyButton, {\n    onClick: conductSimulatedInteraction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 37\n    }\n  }, \"Simulate User Interaction\")), userInteraction && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 41\n    }\n  }, \"Simulated User Interaction:\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 699,\n      columnNumber: 41\n    }\n  }, userInteraction)), /*#__PURE__*/React.createElement(SubmitButton, {\n    onClick: submitTesting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 702,\n      columnNumber: 33\n    }\n  }, \"Submit Testing Results and Complete Sprint\")), isReadyForNextDay && currentDay < 5 && /*#__PURE__*/React.createElement(NextDayButton, {\n    onClick: moveToNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 709,\n      columnNumber: 29\n    }\n  }, \"Move to Day \", currentDay + 1)) : /*#__PURE__*/React.createElement(FinalSummary, {\n    sprintData: sprintData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 715,\n      columnNumber: 21\n    }\n  })), isSidebarOpen && /*#__PURE__*/React.createElement(OutputSidebar, {\n    sprintData: sprintData,\n    currentDay: currentDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 719,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ToggleSidebarButton, {\n    onClick: () => setIsSidebarOpen(!isSidebarOpen),\n    isSidebarOpen: isSidebarOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 724,\n      columnNumber: 13\n    }\n  }, isSidebarOpen ? '×' : '☰'));\n};\nexport default DaySprint;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","styled","keyframes","getGPTResponse","sprintGuidance","OutputSidebar","FinalSummary","FaPaperPlane","SprintContainer","div","ScrollableMainContent","MainContent","TimerContainer","RelayName","span","IndentedList","Header","h1","ConversationBox","Input","textarea","SendButton","button","InputBox","Message","props","isUser","typing","TypingIndicator","NextDayButton","CopyButton","Timer","CrazyEightContainer","CrazyEightInstructions","p","CrazyEightInput","input","StoryboardContainer","StoryboardInstructions","StoryboardSection","PrototypeSection","InteractionSection","ToggleSidebarButton","isSidebarOpen","SubmitButton","DaySprint","currentDay","setCurrentDay","messages","setMessages","setInput","sprintData","setSprintData","isTyping","setIsTyping","isReadyForNextDay","setIsReadyForNextDay","timerSeconds","setTimerSeconds","isTimerRunning","setIsTimerRunning","crazyEightIdeas","setCrazyEightIdeas","Array","fill","storyboardSections","setStoryboardSections","prototypeData","setPrototypeData","coreElements","structureFlow","interactionsProcesses","testingScenario","setTestingScenario","userInteraction","setUserInteraction","setIsSidebarOpen","isSprintComplete","setIsSprintComplete","conversationEndRef","scrollToBottom","current","scrollIntoView","behavior","getCurrentPrompt","prompt","getCurrentObjectives","objectives","moveToNextDay","prev","nextDay","formatRelayMessage","text","replace","checkDayCompletion","_sprintData$","_sprintData$2","_sprintData$3","_sprintData$4","_sprintData$5","_sprintData$6","_sprintData$7","isComplete","problem","every","idea","trim","Feedback","section","Object","values","value","interval","setInterval","seconds","clearInterval","getInitialPrompt","loadInitialPrompt","Promise","resolve","setTimeout","initialPrompt","handleSubmit","e","preventDefault","userMessage","context","map","m","join","response","aiMessage","updateSprintData","error","console","handleKeyDown","key","shiftKey","updatedData","split","q","submitCrazyEight","ideasString","index","alert","updateCrazyEightIdea","newIdeas","updateStoryboardSection","newSections","updatePrototypeData","startTimer","submitSolutionSketch","sketchString","submitPrototype","prototypeString","entries","conductSimulatedInteraction","JSON","stringify","submitTesting","testingString","suggestTestingScenario","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","goal","message","ref","onChange","target","onKeyDown","placeholder","onClick"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled, { keyframes } from 'styled-components';  // Add keyframes here\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport FinalSummary from './FinalSummary';\nimport { FaPaperPlane } from 'react-icons/fa';\n\n// Styling for the container, conversation box, and input box\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\n\nconst ScrollableMainContent = styled(MainContent)`\n  max-height: 100vh;\n  overflow-y: auto;\n`;\n\nconst TimerContainer = styled.div`\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n`;\n\nconst RelayName = styled.span`\n  color: #3c8ce7;\n  font-weight: bold;\n`;\n\nconst IndentedList = styled.div`\n  margin-left: 20px;\n`;\n\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\n\nconst ConversationBox = styled.div`\n  flex-grow: 1;\n  overflow-y: auto;\n  border: 1px solid #3c8ce7;\n  padding: 10px;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Input = styled.textarea`\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-radius: 5px;\n  background-color: #3a3a3a;\n  color: #e0e0e0;\n  resize: none; /* Prevent resize by user */\n  overflow: hidden; /* Hide scroll bar */\n`;\n\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 10px;\n`;\n\nconst InputBox = styled.div`\n  display: flex;\n  padding: 10px;\n  border-top: 1px solid #3c8ce7;\n  background-color: #2a2a2a;\n  align-items: center;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#3a3a3a'};\n  color: #e0e0e0;\n  padding: 10px;\n  border-radius: 15px;\n  margin-bottom: 10px;\n  max-width: 70%;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n  word-wrap: break-word; /* Ensure long words break */\n`;\n\n\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\n\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\n\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\n\nconst CopyButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n`;\n\nconst Timer = styled.div`\n  font-size: 2rem;\n  text-align: center;\n  margin: 1rem 0;\n`;\n\nconst CrazyEightContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst CrazyEightInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\n\nconst CrazyEightInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  margin-bottom: 0.5rem;\n  border: 1px solid #3c8ce7;\n  border-radius: 5px;\n`;\n\nconst StoryboardContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst StoryboardInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\n\nconst StoryboardSection = styled.textarea`\n  width: 100%;\n  height: 150px;\n  margin-top: 1rem;\n  padding: 0.5rem;\n  border-radius: 5px;\n`;\n\nconst PrototypeSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst InteractionSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst ToggleSidebarButton = styled.button`\n  position: fixed;\n  top: 10px;\n  right: ${props => props.isSidebarOpen ? '310px' : '10px'};\n  background-color: transparent;\n  color: #3c8ce7;\n  border: none;\n  font-size: 1.5rem;\n  cursor: pointer;\n  z-index: 1000;\n`;\n\nconst SubmitButton = styled(SendButton)`\n  margin-top: 10px;\n  width: 100%;\n  justify-content: center;\n`;\n\nconst DaySprint = () => {\n    const [currentDay, setCurrentDay] = useState(1);\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState('');\n    const [sprintData, setSprintData] = useState({});\n    const [isTyping, setIsTyping] = useState(false);\n    const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n    const [timerSeconds, setTimerSeconds] = useState(480);\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\n    const [crazyEightIdeas, setCrazyEightIdeas] = useState(Array(8).fill(''));\n    const [storyboardSections, setStoryboardSections] = useState(['', '', '']);\n    const [prototypeData, setPrototypeData] = useState({ coreElements: '', structureFlow: '', interactionsProcesses: '' });\n    const [testingScenario, setTestingScenario] = useState('');\n    const [userInteraction, setUserInteraction] = useState('');\n    const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n    const [isSprintComplete, setIsSprintComplete] = useState(false);\n\n    const conversationEndRef = useRef(null);\n\n    const scrollToBottom = useCallback(() => {\n        if (conversationEndRef.current) {\n            conversationEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n        }\n    }, []);\n\n    useEffect(() => {\n        scrollToBottom();\n    }, [messages, scrollToBottom]);\n\n    const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n    const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n\n    const moveToNextDay = useCallback(() => {\n        if (currentDay < 5) {\n            setCurrentDay(prev => {\n                const nextDay = prev + 1;\n                setIsReadyForNextDay(false);\n                // Reset day-specific states\n                if (prev === 2) {\n                    setCrazyEightIdeas(Array(8).fill(''));\n                } else if (prev === 3) {\n                    setStoryboardSections(['', '', '']);\n                }\n                setIsTimerRunning(false);\n                setTimerSeconds(480);\n                return nextDay;\n            });\n        } else {\n            setIsSprintComplete(true);\n        }\n    }, [currentDay]);\n\n    const formatRelayMessage = (text) => {\n        return text.replace(/Relay:/g, '<RelayName>Relay:</RelayName>')\n            .replace(/(\\d+\\.)/g, '<IndentedList>$1</IndentedList>');\n    };\n\n\n    const checkDayCompletion = useCallback(() => {\n        let isComplete = false;\n\n    switch (currentDay) {\n        case 1:\n            isComplete = sprintData[1]?.problem && sprintData[1]?.[\"Long-term Goal\"] && sprintData[1]?.[\"Critical Questions\"];\n            break;\n        case 2:\n            isComplete = crazyEightIdeas.every(idea => idea.trim() !== '') && sprintData[2]?.Feedback;\n            break;\n        case 3:\n            isComplete = storyboardSections.every(section => section.trim() !== '') && sprintData[3]?.Feedback;\n            break;\n        case 4:\n            isComplete = Object.values(prototypeData).every(value => value.trim() !== '') && sprintData[4]?.Feedback;\n            break;\n        case 5:\n            isComplete = testingScenario.trim() !== '' && userInteraction.trim() !== '' && sprintData[5]?.Feedback;\n            break;\n        default:\n            isComplete = false;\n    }\n\n    setIsReadyForNextDay(isComplete);\n}, [currentDay, sprintData, crazyEightIdeas, storyboardSections, prototypeData, testingScenario, userInteraction]);\n\n    useEffect(() => {\n        let interval;\n        if (isTimerRunning && timerSeconds > 0) {\n            interval = setInterval(() => {\n                setTimerSeconds(seconds => seconds - 1);\n            }, 1000);\n        } else if (timerSeconds === 0) {\n            setIsTimerRunning(false);\n        }\n        return () => clearInterval(interval);\n    }, [isTimerRunning, timerSeconds]);\n\n    const getInitialPrompt = useCallback(() => {\n        switch (currentDay) {\n            case 1:\n                return `Welcome to our AI-powered Mini Design Sprint! I'm Relay, your guide through this condensed version of Jake Knapp and John Zeratsky's methodology. Over the next five short sessions, we'll rapidly innovate and prototype your idea. You can ask me questions at any time during the sprint.\n\n    Let's begin Day 1 by addressing three key points:\n    1. What problem are you trying to solve?\n    2. What's your long-term goal for this project?\n    3. What are the critical questions we need to answer?\n\n    First, tell me about the problem you're addressing. What challenges are you facing?`;\n            case 2:\n                return `Welcome to Day 2! Today, we'll generate ideas using the Crazy 8s method. Are you ready to start the timer and brainstorm 8 ideas in 8 minutes?`;\n            case 3:\n                return `It's Day 3! Let's create a three-panel storyboard for your chosen solution. Start by describing the problem or starting point in the first panel.`;\n            case 4:\n                return `Welcome to Day 4. Today, we'll design a conceptual prototype. Begin by describing the core elements of your solution.`;\n            case 5:\n                return `It's the final day! We'll conduct simulated user testing. Start by describing a testing scenario for your prototype.`;\n            default:\n                return `Welcome to Day ${currentDay} of the Design Sprint.`;\n        }\n    }, [currentDay]);\n\n    useEffect(() => {\n        const loadInitialPrompt = async () => {\n            setIsTyping(true);\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            setIsTyping(false);\n            const initialPrompt = getInitialPrompt();\n            setMessages([{ isUser: false, text: initialPrompt }]);\n        };\n\n        loadInitialPrompt();\n    }, [currentDay, getInitialPrompt]);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (!input.trim()) return;\n\n        const userMessage = { isUser: true, text: input };\n        setMessages(prev => [...prev, userMessage]);\n        setInput('');\n        setIsTyping(true);\n\n        try {\n            const context = messages.map(m => `${m.isUser ? 'User' : 'Relay'}: ${m.text}`).join('\\n');\n            let prompt = `Day ${currentDay} of Design Sprint. Context: ${context}\\nUser: ${input}\\n${getCurrentPrompt()}`;\n            const response = await getGPTResponse(prompt);\n\n            const aiMessage = { isUser: false, text: response };\n            setMessages(prev => [...prev, aiMessage]);\n\n            updateSprintData(input, response);\n        } catch (error) {\n            console.error('Error getting AI response:', error);\n            setMessages(prev => [...prev, { isUser: false, text: \"I'm having trouble right now. Please try again.\" }]);\n        } finally {\n            setIsTyping(false);\n        }\n    };\n\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            handleSubmit(e);\n        }\n    };\n\n    const updateSprintData = (input, response) => {\n        setSprintData(prev => {\n            const updatedData = { ...prev };\n            if (!updatedData[currentDay]) {\n                updatedData[currentDay] = {};\n            }\n\n            switch (currentDay) {\n                case 1:\n                    if (!updatedData[1].problem) {\n                        updatedData[1].problem = input;\n                    } else if (!updatedData[1][\"Long-term Goal\"]) {\n                        updatedData[1][\"Long-term Goal\"] = input;\n                    } else if (!updatedData[1][\"Critical Questions\"]) {\n                        updatedData[1][\"Critical Questions\"] = input.split(',').map(q => q.trim());\n                    }\n                    break;\n                case 2:\n                    updatedData[2] = {\n                        \"Crazy 8s\": crazyEightIdeas,\n                        \"Feedback\": response\n                    };\n                    break;\n                case 3:\n                    updatedData[3] = {\n                        \"Solution Sketch\": storyboardSections,\n                        \"Feedback\": response\n                    };\n                    break;\n                case 4:\n                    updatedData[4] = {\n                        ...prototypeData,\n                        \"Feedback\": response\n                    };\n                    break;\n                    case 5:\n                        updatedData[5] = {\n                            \"Testing Scenario\": testingScenario,\n                            \"User Interaction\": userInteraction,\n                            \"Feedback\": response\n                        };\n                        break;\n                default:\n                    break;\n            }\n\n            return updatedData;\n        });\n\n        checkDayCompletion();\n    };\n\n\n    const submitCrazyEight = async () => {\n        if (crazyEightIdeas.every(idea => idea.trim() !== '')) {\n            setIsTyping(true);\n            const ideasString = crazyEightIdeas.map((idea, index) => `Idea ${index + 1}: ${idea}`).join('\\n');\n            const prompt = `The user has completed the Crazy 8s exercise with the following ideas:\\n${ideasString}\\nPlease provide a brief analysis and feedback on these ideas, highlighting any particularly promising concepts or areas for further exploration.`;\n\n            try {\n                const response = await getGPTResponse(prompt);\n                setMessages(prev => [...prev, { isUser: false, text: response }]);\n                setSprintData(prev => ({\n                    ...prev,\n                    2: {\n                        \"Crazy 8s\": crazyEightIdeas,\n                        \"Feedback\": response\n                    }\n                }));\n                setIsReadyForNextDay(true);\n            } catch (error) {\n                setMessages(prev => [...prev, { isUser: false, text: \"I'm having trouble providing feedback on your Crazy 8 ideas. Please try submitting again.\" }]);\n            } finally {\n                setIsTyping(false);\n            }\n        } else {\n            alert(\"Please complete all 8 ideas before submitting.\");\n        }\n    };\n\n    const updateCrazyEightIdea = (index, value) => {\n        const newIdeas = [...crazyEightIdeas];\n        newIdeas[index] = value;\n        setCrazyEightIdeas(newIdeas);\n    };\n\n    const updateStoryboardSection = (index, value) => {\n        const newSections = [...storyboardSections];\n        newSections[index] = value;\n        setStoryboardSections(newSections);\n        checkDayCompletion();\n    };\n\n    const updatePrototypeData = (key, value) => {\n        setPrototypeData(prev => ({ ...prev, [key]: value }));\n        checkDayCompletion();\n    };\n\n    const startTimer = () => {\n        setIsTimerRunning(true);\n        setTimerSeconds(480);\n    };\n\n    const submitSolutionSketch = async () => {\n        if (storyboardSections.every(section => section.trim() !== '')) {\n            setIsTyping(true);\n            const sketchString = storyboardSections.map((section, index) => `Panel ${index + 1}: ${section}`).join('\\n');\n            const prompt = `The user has completed their solution sketch with the following three panels:\\n${sketchString}\\nPlease provide a brief analysis and feedback on this solution sketch, highlighting strengths and areas for improvement.`;\n\n            try {\n                const response = await getGPTResponse(prompt);\n                setMessages(prev => [...prev, { isUser: false, text: response }]);\n                setSprintData(prev => ({\n                    ...prev,\n                    3: {\n                        \"Solution Sketch\": storyboardSections,\n                        \"Feedback\": response\n                    }\n                }));\n                setIsReadyForNextDay(true);\n            } catch (error) {\n                setMessages(prev => [...prev, { isUser: false, text: \"I'm having trouble providing feedback on your solution sketch. Please try submitting again.\" }]);\n            } finally {\n                setIsTyping(false);\n            }\n        } else {\n            alert(\"Please complete all three panels of the solution sketch before submitting.\");\n        }\n    };\n\n    const submitPrototype = async () => {\n        if (Object.values(prototypeData).every(value => value.trim() !== '')) {\n            setIsTyping(true);\n            const prototypeString = Object.entries(prototypeData).map(([key, value]) => `${key}: ${value}`).join('\\n');\n            const prompt = `The user has completed their prototype design with the following details:\\n${prototypeString}\\nPlease provide a brief analysis and feedback on this prototype, highlighting strengths and suggesting potential improvements.`;\n\n            try {\n                const response = await getGPTResponse(prompt);\n                setMessages(prev => [...prev, { isUser: false, text: response }]);\n                setSprintData(prev => ({\n                    ...prev,\n                    4: {\n                        ...prototypeData,\n                        \"Feedback\": response\n                    }\n                }));\n                setIsReadyForNextDay(true);\n            } catch (error) {\n                setMessages(prev => [...prev, { isUser: false, text: \"I'm having trouble providing feedback on your prototype. Please try submitting again.\" }]);\n            } finally {\n                setIsTyping(false);\n            }\n        } else {\n            alert(\"Please complete all sections of the prototype design before submitting.\");\n        }\n    };\n\n    const conductSimulatedInteraction = async () => {\n        setIsTyping(true);\n        const prompt = `You are a user interacting with the following product prototype: ${JSON.stringify(prototypeData)}. Based on this testing scenario: ${testingScenario}, provide a detailed account of your experience, including what you see, what you do, and how you feel throughout the interaction. Be specific about any confusion, delight, or frustration you encounter.`;\n        try {\n            const response = await getGPTResponse(prompt);\n            setUserInteraction(response);\n            setMessages(prev => [...prev, { isUser: false, text: response }]);\n        } catch (error) {\n            setMessages(prev => [...prev, { isUser: false, text: \"Error: Unable to conduct simulated interaction.\" }]);\n        } finally {\n            setIsTyping(false);\n        }\n    };\n\n    const submitTesting = async () => {\n        if (testingScenario.trim() !== '' && userInteraction.trim() !== '') {\n            setIsTyping(true);\n            const testingString = `Testing Scenario: ${testingScenario}\\nUser Interaction: ${userInteraction}`;\n            const prompt = `The user has completed their simulated testing with the following details:\\n${testingString}\\nPlease provide a brief summary of the testing results and suggest next steps for refining the prototype.`;\n    \n            try {\n                const response = await getGPTResponse(prompt);\n                setMessages(prev => [...prev, { isUser: false, text: response }]);\n                setSprintData(prev => ({\n                    ...prev,\n                    5: {\n                        \"Testing Scenario\": testingScenario,\n                        \"User Interaction\": userInteraction,\n                        \"Feedback\": response\n                    }\n                }));\n                setIsReadyForNextDay(true);\n            } catch (error) {\n                setMessages(prev => [...prev, { isUser: false, text: \"I'm having trouble providing feedback on your testing results. Please try submitting again.\" }]);\n            } finally {\n                setIsTyping(false);\n            }\n        } else {\n            alert(\"Please complete the testing scenario and conduct a simulated interaction before submitting.\");\n        }\n    };\n\n    const suggestTestingScenario = async () => {\n        setIsTyping(true);\n        const prompt = `Based on the prototype described: ${JSON.stringify(prototypeData)}, suggest a detailed and realistic testing scenario for user feedback. Describe what a user would literally do, step by step.`;\n        try {\n            const response = await getGPTResponse(prompt);\n            setTestingScenario(response);\n            setMessages(prev => [...prev, { isUser: false, text: `Here's a suggested testing scenario:\\n\\n${response}\\n\\nFeel free to use this or modify it as needed.` }]);\n        } catch (error) {\n            setMessages(prev => [...prev, { isUser: false, text: \"I'm having trouble suggesting a testing scenario. Please try creating one yourself.\" }]);\n        } finally {\n            setIsTyping(false);\n        }\n    };\n\n    return (\n        <SprintContainer>\n            <ScrollableMainContent>\n                {!isSprintComplete ? (\n                    <>\n                        <Header>{`Day ${currentDay}: ${sprintGuidance[currentDay].goal}`}</Header>\n                        <ConversationBox>\n                            {messages.map((message, index) => (\n                                <Message key={index} isUser={message.isUser}>\n                                    {message.isUser ? 'You: ' : 'Relay: '}{message.text}\n                                </Message>\n                            ))}\n                            {isTyping && <TypingIndicator><span></span><span></span><span></span></TypingIndicator>}\n                            <div ref={conversationEndRef} />\n                        </ConversationBox>\n                        <InputBox>\n                            <Input\n                                value={input}\n                                onChange={(e) => setInput(e.target.value)}\n                                onKeyDown={handleKeyDown}\n                                placeholder=\"Type your message here...\"\n                            />\n                            <SendButton onClick={handleSubmit}>Send</SendButton>\n                        </InputBox>\n\n                        {/* Day-specific components */}\n                        {currentDay === 2 && (\n                            <CrazyEightContainer>\n                                {/* ... (keep Crazy 8s content) */}\n                            </CrazyEightContainer>\n                        )}\n\n                        {currentDay === 3 && (\n                            <StoryboardContainer>\n                                <StoryboardInstructions>\n                                    Create a three-panel storyboard that outlines your chosen solution.\n                                </StoryboardInstructions>\n                                {storyboardSections.map((section, index) => (\n                                    <StoryboardSection\n                                        key={index}\n                                        value={section}\n                                        onChange={(e) => updateStoryboardSection(index, e.target.value)}\n                                        placeholder={`Panel ${index + 1}`}\n                                    />\n                                ))}\n                                <SubmitButton onClick={submitSolutionSketch}>\n                                    Submit Solution Sketch\n                                </SubmitButton>\n                            </StoryboardContainer>\n                        )}\n\n                        {currentDay === 4 && (\n                            <PrototypeSection>\n                                <h3>Design Your Conceptual Prototype</h3>\n                                {Object.entries(prototypeData).map(([key, value]) => (\n                                    <StoryboardSection\n                                        key={key}\n                                        value={value}\n                                        onChange={(e) => updatePrototypeData(key, e.target.value)}\n                                        placeholder={`Describe ${key}...`}\n                                    />\n                                ))}\n                                <SubmitButton onClick={submitPrototype}>\n                                    Submit Prototype\n                                </SubmitButton>\n                            </PrototypeSection>\n                        )}\n\n                        {currentDay === 5 && (\n                            <InteractionSection>\n                                <h3>Simulated User/Stakeholder Testing</h3>\n                                <p>Describe a testing scenario, conduct a simulated interaction, and analyze the results to refine your prototype.</p>\n                                <StoryboardSection\n                                    value={testingScenario}\n                                    onChange={(e) => setTestingScenario(e.target.value)}\n                                    placeholder=\"Describe a testing scenario for your prototype...\"\n                                />\n                                <div>\n                                    <CopyButton onClick={suggestTestingScenario}>Suggest Testing Scenario</CopyButton>\n                                    <CopyButton onClick={conductSimulatedInteraction}>Simulate User Interaction</CopyButton>\n                                </div>\n                                {userInteraction && (\n                                    <>\n                                        <h4>Simulated User Interaction:</h4>\n                                        <p>{userInteraction}</p>\n                                    </>\n                                )}\n                                <SubmitButton onClick={submitTesting}>\n                                    Submit Testing Results and Complete Sprint\n                                </SubmitButton>\n                            </InteractionSection>\n                        )}\n\n                        {isReadyForNextDay && currentDay < 5 && (\n                            <NextDayButton onClick={moveToNextDay}>\n                                Move to Day {currentDay + 1}\n                            </NextDayButton>\n                        )}\n                    </>\n                ) : (\n                    <FinalSummary sprintData={sprintData} />\n                )}\n            </ScrollableMainContent>\n            {isSidebarOpen && (\n                <OutputSidebar\n                    sprintData={sprintData}\n                    currentDay={currentDay}\n                />\n            )}\n            <ToggleSidebarButton onClick={() => setIsSidebarOpen(!isSidebarOpen)} isSidebarOpen={isSidebarOpen}>\n                {isSidebarOpen ? '×' : '☰'}\n            </ToggleSidebarButton>\n        </SprintContainer>\n    );\n\n};\n\nexport default DaySprint;\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AACvE,OAAOC,MAAM,IAAIC,SAAS,QAAQ,mBAAmB,CAAC,CAAE;AACxD,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SAASC,cAAc,QAAQ,0BAA0B;AACzD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAASC,YAAY,QAAQ,gBAAgB;;AAE7C;AACA,MAAMC,eAAe,GAAGP,MAAM,CAACQ,GAAG;AAClC;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,qBAAqB,GAAGT,MAAM,CAACU,WAAW,CAAC;AACjD;AACA;AACA,CAAC;AAED,MAAMC,cAAc,GAAGX,MAAM,CAACQ,GAAG;AACjC;AACA;AACA,CAAC;AAED,MAAMI,SAAS,GAAGZ,MAAM,CAACa,IAAI;AAC7B;AACA;AACA,CAAC;AAED,MAAMC,YAAY,GAAGd,MAAM,CAACQ,GAAG;AAC/B;AACA,CAAC;AAED,MAAME,WAAW,GAAGV,MAAM,CAACQ,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMO,MAAM,GAAGf,MAAM,CAACgB,EAAE;AACxB;AACA;AACA;AACA,CAAC;AAED,MAAMC,eAAe,GAAGjB,MAAM,CAACQ,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMU,KAAK,GAAGlB,MAAM,CAACmB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,UAAU,GAAGpB,MAAM,CAACqB,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,QAAQ,GAAGtB,MAAM,CAACQ,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMe,OAAO,GAAGvB,MAAM,CAACQ,GAAG;AAC1B,sBAAsBgB,KAAK,IAAIA,KAAK,CAACC,MAAM,GAAG,SAAS,GAAG,SAAS;AACnE;AACA;AACA;AACA;AACA;AACA,gBAAgBD,KAAK,IAAIA,KAAK,CAACC,MAAM,GAAG,UAAU,GAAG,YAAY;AACjE;AACA;AACA,CAAC;AAGD,MAAMC,MAAM,GAAGzB,SAAS;AACxB;AACA;AACA;AACA,CAAC;AAED,MAAM0B,eAAe,GAAG3B,MAAM,CAACQ,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiBkB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAME,aAAa,GAAG5B,MAAM,CAACqB,MAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMQ,UAAU,GAAG7B,MAAM,CAACqB,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMS,KAAK,GAAG9B,MAAM,CAACQ,GAAG;AACxB;AACA;AACA;AACA,CAAC;AAED,MAAMuB,mBAAmB,GAAG/B,MAAM,CAACQ,GAAG;AACtC;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMwB,sBAAsB,GAAGhC,MAAM,CAACiC,CAAC;AACvC;AACA;AACA,CAAC;AAED,MAAMC,eAAe,GAAGlC,MAAM,CAACmC,KAAK;AACpC;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,mBAAmB,GAAGpC,MAAM,CAACQ,GAAG;AACtC;AACA;AACA;AACA;AACA,CAAC;AAED,MAAM6B,sBAAsB,GAAGrC,MAAM,CAACiC,CAAC;AACvC;AACA;AACA,CAAC;AAED,MAAMK,iBAAiB,GAAGtC,MAAM,CAACmB,QAAQ;AACzC;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMoB,gBAAgB,GAAGvC,MAAM,CAACQ,GAAG;AACnC;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMgC,kBAAkB,GAAGxC,MAAM,CAACQ,GAAG;AACrC;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMiC,mBAAmB,GAAGzC,MAAM,CAACqB,MAAM;AACzC;AACA;AACA,WA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","ignoreList":[]},"metadata":{},"sourceType":"module"}