{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport InputWithSendIcon from './InputWithSendIcon';\n\n// Styled components (unchanged)\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\nconst AIMessage = styled.div`\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n  padding: 15px;\n  border-radius: 15px;\n  margin-bottom: 20px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  position: relative;\n  max-width: 80%;\n  align-self: flex-start;\n`;\nconst RelayIcon = styled.span`\n  font-weight: bold;\n  color: #3c8ce7;\n  margin-right: 5px;\n`;\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\nconst ConversationLog = styled.div`\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n  max-height: 300px;\n  overflow-y: auto;\n`;\nconst LogEntry = styled.div`\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#1e1e1e'};\n  border-radius: 5px;\n  color: ${props => props.isUser ? '#ffffff' : '#e0e0e0'};\n`;\nconst CopyButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n`;\nconst Timer = styled.div`\n  font-size: 2rem;\n  text-align: center;\n  margin: 1rem 0;\n`;\nconst CrazyEightContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst CrazyEightInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\nconst CrazyEightInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  margin-bottom: 0.5rem;\n  border: 1px solid #3c8ce7;\n  border-radius: 5px;\n`;\nconst StoryboardContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst StoryboardInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\nconst StoryboardSection = styled.textarea`\n  width: 100%;\n  height: 150px;\n  margin-top: 1rem;\n  padding: 0.5rem;\n  border-radius: 5px;\n`;\nconst SubmitButton = styled(CopyButton)`\n  margin-top: 1rem;\n  font-size: 1.2rem;\n  padding: 1rem 2rem;\n`;\nconst PrototypeSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst InteractionSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\nconst AskQuestionButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n`;\nconst ToggleSidebarButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  position: absolute;\n  top: 10px;\n  right: 10px;\n`;\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [input, setInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [isTyping, setIsTyping] = useState(true);\n  const [conversationLog, setConversationLog] = useState([]);\n  const [timerSeconds, setTimerSeconds] = useState(480); // 8 minutes\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [crazyEightIdeas, setCrazyEightIdeas] = useState(Array(8).fill(''));\n  const [storyboardSections, setStoryboardSections] = useState(['', '', '']);\n  const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n  const [prototypeData, setPrototypeData] = useState({\n    coreElements: '',\n    structureFlow: '',\n    interactionsProcesses: ''\n  });\n  const [testingScenario, setTestingScenario] = useState('');\n  const [userInteraction, setUserInteraction] = useState('');\n  const [analysisNotes, setAnalysisNotes] = useState('');\n  const [showQuestionInput, setShowQuestionInput] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n  const moveToNextDay = useCallback(() => {\n    setCurrentDay(prev => {\n      const nextDay = Math.min(prev + 1, 5);\n      setFeedback('');\n      setIsReadyForNextDay(false);\n      if (prev === 2) {\n        setCrazyEightIdeas(Array(8).fill(''));\n      } else if (prev === 3) {\n        setStoryboardSections(['', '', '']);\n      }\n      setIsTimerRunning(false);\n      setTimerSeconds(480);\n      return nextDay;\n    });\n  }, []);\n  const checkDayCompletion = useCallback(() => {\n    var _sprintData$, _sprintData$2;\n    let isComplete = false;\n    switch (currentDay) {\n      case 1:\n        isComplete = ((_sprintData$ = sprintData[1]) === null || _sprintData$ === void 0 ? void 0 : _sprintData$[\"Long-term Goal\"]) && ((_sprintData$2 = sprintData[1]) === null || _sprintData$2 === void 0 ? void 0 : _sprintData$2[\"Critical Questions\"]);\n        break;\n      case 2:\n        isComplete = crazyEightIdeas.every(idea => idea.trim() !== '');\n        break;\n      case 3:\n        isComplete = storyboardSections.every(section => section.trim() !== '');\n        break;\n      case 4:\n        isComplete = Object.values(prototypeData).every(value => value.trim() !== '');\n        break;\n      case 5:\n        isComplete = testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '';\n        break;\n      default:\n        isComplete = false;\n    }\n    setIsReadyForNextDay(isComplete);\n  }, [currentDay, sprintData, crazyEightIdeas, storyboardSections, prototypeData, testingScenario, userInteraction, analysisNotes]);\n  useEffect(() => {\n    let interval;\n    if (isTimerRunning && timerSeconds > 0) {\n      interval = setInterval(() => {\n        setTimerSeconds(seconds => seconds - 1);\n      }, 1000);\n    } else if (timerSeconds === 0) {\n      setIsTimerRunning(false);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerRunning, timerSeconds]);\n  const getInitialPrompt = useCallback(() => {\n    if (currentDay === 1) {\n      return `Welcome to our Mini Design Sprint! This compressed version of Jake Knapp and John Zeratsky's methodology will guide you through a rapid innovation process. We'll cover the essentials of a full sprint in just five short sessions.\n  \n  Let's kick off Day 1 by defining your long-term goal. This goal should be ambitious yet achievable, setting the direction for our entire sprint. What specific outcome are you aiming to achieve with this project? Think big and be as clear as possible.`;\n    }\n    return `Welcome to Day ${currentDay} of the Design Sprint. ${sprintGuidance[currentDay].prompt}`;\n  }, [currentDay]);\n  useEffect(() => {\n    const loadInitialPrompt = async () => {\n      // Show loading bubbles for 1 second\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const initialPrompt = getInitialPrompt();\n      setIsTyping(false);\n      setFeedback(initialPrompt);\n      setConversationLog([{\n        isUser: false,\n        text: initialPrompt\n      }]);\n    };\n    loadInitialPrompt();\n  }, [currentDay, getInitialPrompt]);\n  const getAIFeedback = async (input, context) => {\n    setIsTyping(true);\n    const prompt = `Day ${currentDay} of Design Sprint. Context: ${context}. User input: \"${input}\". ${getCurrentPrompt()} Provide encouraging feedback and guidance based on the user's input. Suggest improvements or ask thought-provoking questions to help the user develop their ideas further.`;\n    try {\n      const response = await getGPTResponse(prompt, currentDay);\n      setFeedback(response);\n      setConversationLog(prev => [...prev, {\n        isUser: false,\n        text: response\n      }]);\n    } catch (error) {\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  const handleSubmit = async () => {\n    if (!input.trim()) return;\n    const userInput = input;\n    setInput('');\n    setIsTyping(true);\n    setConversationLog(prev => [...prev, {\n      isUser: true,\n      text: userInput\n    }]);\n    let updatedSprintData = {\n      ...sprintData\n    };\n    try {\n      if (currentDay === 1) {\n        var _updatedSprintData$, _updatedSprintData$2;\n        if (!((_updatedSprintData$ = updatedSprintData[1]) === null || _updatedSprintData$ === void 0 ? void 0 : _updatedSprintData$[\"Long-term Goal\"])) {\n          const summarizedGoal = await getGPTResponse(`Summarize this long-term goal concisely: ${userInput}`);\n          updatedSprintData[1] = {\n            ...updatedSprintData[1],\n            \"Long-term Goal\": summarizedGoal\n          };\n          setSprintData(updatedSprintData);\n          const response = await getGPTResponse(`The user's long-term goal is: \"${userInput}\". Acknowledge this goal and ask for 2-3 critical questions related to achieving this goal.`);\n          setFeedback(response);\n          setConversationLog(prev => [...prev, {\n            isUser: false,\n            text: response\n          }]);\n        } else if (!((_updatedSprintData$2 = updatedSprintData[1]) === null || _updatedSprintData$2 === void 0 ? void 0 : _updatedSprintData$2[\"Critical Questions\"])) {\n          const summarizedQuestions = await getGPTResponse(`Summarize these critical questions concisely: ${userInput}`);\n          updatedSprintData[1] = {\n            ...updatedSprintData[1],\n            \"Critical Questions\": summarizedQuestions\n          };\n          setSprintData(updatedSprintData);\n          const response = await getGPTResponse(`The user's critical questions are: \"${userInput}\". Acknowledge these questions, summarize the day's progress, and ask if they're ready to move to Day 2.`);\n          setFeedback(response);\n          setConversationLog(prev => [...prev, {\n            isUser: false,\n            text: response\n          }]);\n        }\n      } else {\n        const currentObjectives = getCurrentObjectives();\n        const currentObjective = currentObjectives[Object.keys(updatedSprintData[currentDay] || {}).length];\n        if (currentObjective) {\n          updatedSprintData[currentDay] = {\n            ...updatedSprintData[currentDay],\n            [currentObjective]: userInput\n          };\n          setSprintData(updatedSprintData);\n          const prompt = `Day ${currentDay} of Design Sprint. Context: ${JSON.stringify(updatedSprintData)}. User input: \"${userInput}\". ${getCurrentPrompt()} Provide concise guidance (2-3 sentences max) based on the user's input.`;\n          const response = await getGPTResponse(prompt, currentDay);\n          setFeedback(response);\n          setConversationLog(prev => [...prev, {\n            isUser: false,\n            text: response\n          }]);\n        }\n      }\n    } catch (error) {\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n    } finally {\n      setIsTyping(false);\n      checkDayCompletion();\n    }\n  };\n  const submitCrazyEight = async () => {\n    if (crazyEightIdeas.every(idea => idea.trim() !== '')) {\n      setIsTyping(true);\n      const ideasString = crazyEightIdeas.map((idea, index) => `Idea ${index + 1}: ${idea}`).join('\\n');\n      const prompt = `The user has completed the Crazy 8s exercise with the following ideas:\\n${ideasString}\\nPlease provide a brief analysis and feedback on these ideas, highlighting any particularly promising concepts or areas for further exploration.`;\n      try {\n        const response = await getGPTResponse(prompt);\n        setFeedback(response);\n        setConversationLog(prev => [...prev, {\n          isUser: false,\n          text: response\n        }]);\n      } catch (error) {\n        setFeedback(\"I'm having trouble providing feedback on your Crazy 8 ideas. Please try submitting again.\");\n      } finally {\n        setIsTyping(false);\n      }\n    } else {\n      alert(\"Please complete all 8 ideas before submitting.\");\n    }\n  };\n  const updateCrazyEightIdea = async (index, value) => {\n    const newIdeas = [...crazyEightIdeas];\n    newIdeas[index] = value;\n    setCrazyEightIdeas(newIdeas);\n    await getAIFeedback(value, `Updating Crazy 8s idea ${index + 1}`);\n  };\n  const updateStoryboardSection = async (index, value) => {\n    const newSections = [...storyboardSections];\n    newSections[index] = value;\n    setStoryboardSections(newSections);\n    await getAIFeedback(value, `Updating storyboard panel ${index + 1}`);\n    checkDayCompletion();\n  };\n  const updatePrototypeData = async (key, value) => {\n    setPrototypeData(prev => ({\n      ...prev,\n      [key]: value\n    }));\n    await getAIFeedback(value, `Updating prototype ${key}`);\n    checkDayCompletion();\n  };\n  const submitDay3 = useCallback(() => {\n    if (storyboardSections.every(section => section.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        3: {\n          \"Solution Sketch\": storyboardSections.map((section, index) => `Panel ${index + 1}: ${section}`)\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all three storyboard panels before submitting.\");\n    }\n  }, [storyboardSections, moveToNextDay]);\n  const submitDay4 = useCallback(() => {\n    if (Object.values(prototypeData).every(value => value.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        4: prototypeData\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all prototype sections before submitting.\");\n    }\n  }, [prototypeData, moveToNextDay]);\n  const submitDay5 = useCallback(() => {\n    if (testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '') {\n      setSprintData(prev => ({\n        ...prev,\n        5: {\n          \"Testing Scenario\": testingScenario,\n          \"User Interaction\": userInteraction,\n          \"Analysis\": analysisNotes\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all sections before submitting.\");\n    }\n  }, [testingScenario, userInteraction, analysisNotes, moveToNextDay]);\n  const startTimer = () => {\n    setIsTimerRunning(true);\n    setTimerSeconds(480);\n  };\n  const copyConversationLog = () => {\n    const logText = conversationLog.map(entry => `**${entry.isUser ? 'User' : 'Relay'}**: ${entry.text}`).join('\\n');\n    navigator.clipboard.writeText(logText);\n  };\n  const conductSimulatedInteraction = async () => {\n    setIsTyping(true);\n    const prompt = `You are a potential user interacting with the following product prototype: ${JSON.stringify(prototypeData)}. Please provide realistic responses and actions based on this testing scenario: ${testingScenario}`;\n    try {\n      const response = await getGPTResponse(prompt, currentDay);\n      setUserInteraction(response);\n      await getAIFeedback(response, \"Simulated user interaction\");\n    } catch (error) {\n      setUserInteraction(\"Error: Unable to conduct simulated interaction.\");\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  return /*#__PURE__*/React.createElement(SprintContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MainContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 9\n    }\n  }, `Day ${currentDay}: ${sprintGuidance[currentDay].goal}`), isTyping ? /*#__PURE__*/React.createElement(TypingIndicator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 13\n    }\n  })) : feedback ? /*#__PURE__*/React.createElement(AIMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(RelayIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 13\n    }\n  }, \"Relay :)\"), \" \", feedback) : null, currentDay === 1 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InputWithSendIcon, {\n    value: input,\n    onChange: e => setInput(e.target.value),\n    onSubmit: handleSubmit,\n    onKeyPress: e => e.key === 'Enter' && !e.shiftKey && handleSubmit(),\n    placeholder: \"Enter your response here...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 13\n    }\n  }), isReadyForNextDay && /*#__PURE__*/React.createElement(NextDayButton, {\n    onClick: moveToNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 15\n    }\n  }, \"Move to Day 2\")), currentDay === 2 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CrazyEightContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CrazyEightInstructions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 15\n    }\n  }, \"Crazy 8s is a fast sketching exercise where you'll create 8 distinct ideas in 8 minutes. The goal is to push beyond your first idea and generate a wide range of possibilities. Don't worry about quality or feasibility at this stage - focus on quantity and variety!\"), /*#__PURE__*/React.createElement(CopyButton, {\n    onClick: startTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 15\n    }\n  }, \"Start Crazy 8s Timer\"), /*#__PURE__*/React.createElement(Timer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 15\n    }\n  }, Math.floor(timerSeconds / 60), \":\", (timerSeconds % 60).toString().padStart(2, '0')), crazyEightIdeas.map((idea, index) => /*#__PURE__*/React.createElement(CrazyEightInput, {\n    key: index,\n    value: idea,\n    onChange: e => updateCrazyEightIdea(index, e.target.value),\n    placeholder: `Crazy 8s Idea ${index + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(SubmitButton, {\n    onClick: submitCrazyEight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 15\n    }\n  }, \"Submit Crazy 8s Ideas for Feedback\")), isReadyForNextDay && /*#__PURE__*/React.createElement(NextDayButton, {\n    onClick: moveToNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 15\n    }\n  }, \"Move to Day 3\"), /*#__PURE__*/React.createElement(AskQuestionButton, {\n    onClick: () => setShowQuestionInput(!showQuestionInput),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 13\n    }\n  }, showQuestionInput ? 'Hide Question Input' : 'Ask a Question'), showQuestionInput && /*#__PURE__*/React.createElement(InputWithSendIcon, {\n    value: input,\n    onChange: e => setInput(e.target.value),\n    onSubmit: handleSubmit,\n    onKeyPress: e => e.key === 'Enter' && !e.shiftKey && handleSubmit(),\n    placeholder: \"Have any questions?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 15\n    }\n  })), currentDay === 3 && /*#__PURE__*/React.createElement(StoryboardContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(StoryboardInstructions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 13\n    }\n  }, \"Create a three-panel storyboard that outlines your chosen solution. Each panel should represent a key step or moment in your solution: 1. The problem or starting point 2. The main action or change 3. The result or outcome Describe each panel in detail, focusing on what the user sees and does.\"), storyboardSections.map((section, index) => /*#__PURE__*/React.createElement(StoryboardSection, {\n    key: index,\n    value: section,\n    onChange: e => updateStoryboardSection(index, e.target.value),\n    placeholder: `Describe panel ${index + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 15\n    }\n  })), isReadyForNextDay && /*#__PURE__*/React.createElement(SubmitButton, {\n    onClick: submitDay3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 15\n    }\n  }, \"Submit Storyboard and Move to Day 4\")), currentDay === 4 && /*#__PURE__*/React.createElement(PrototypeSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 13\n    }\n  }, \"Design Your Conceptual Prototype\"), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: prototypeData.coreElements,\n    onChange: e => updatePrototypeData('coreElements', e.target.value),\n    placeholder: \"Describe core elements...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: prototypeData.structureFlow,\n    onChange: e => updatePrototypeData('structureFlow', e.target.value),\n    placeholder: \"Outline structure or flow...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: prototypeData.interactionsProcesses,\n    onChange: e => updatePrototypeData('interactionsProcesses', e.target.value),\n    placeholder: \"Detail interactions or processes...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 13\n    }\n  }), isReadyForNextDay && /*#__PURE__*/React.createElement(SubmitButton, {\n    onClick: submitDay4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 15\n    }\n  }, \"Submit Conceptual Prototype and Move to Day 5\")), currentDay === 5 && /*#__PURE__*/React.createElement(InteractionSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 13\n    }\n  }, \"Simulated User/Stakeholder Testing\"), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: testingScenario,\n    onChange: e => setTestingScenario(e.target.value),\n    placeholder: \"Describe a testing scenario for your prototype...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CopyButton, {\n    onClick: conductSimulatedInteraction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 13\n    }\n  }, \"Simulate User Interaction\"), userInteraction && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 17\n    }\n  }, \"Simulated User Interaction:\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 17\n    }\n  }, userInteraction)), /*#__PURE__*/React.createElement(StoryboardSection, {\n    value: analysisNotes,\n    onChange: e => setAnalysisNotes(e.target.value),\n    placeholder: \"Analyze the simulated feedback and consider potential iterations...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 13\n    }\n  }), isReadyForNextDay && /*#__PURE__*/React.createElement(SubmitButton, {\n    onClick: submitDay5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 15\n    }\n  }, \"Submit Testing Results and Complete Sprint\")), currentDay !== 1 && currentDay !== 2 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AskQuestionButton, {\n    onClick: () => setShowQuestionInput(!showQuestionInput),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 13\n    }\n  }, showQuestionInput ? 'Hide Question Input' : 'Ask a Question'), showQuestionInput && /*#__PURE__*/React.createElement(InputWithSendIcon, {\n    value: input,\n    onChange: e => setInput(e.target.value),\n    onSubmit: handleSubmit,\n    onKeyPress: e => e.key === 'Enter' && !e.shiftKey && handleSubmit(),\n    placeholder: \"Have any questions?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(ConversationLog, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 662,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 11\n    }\n  }, \"Conversation Log (For Development)\"), /*#__PURE__*/React.createElement(CopyButton, {\n    onClick: copyConversationLog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 11\n    }\n  }, \"Copy Log\"), conversationLog.map((entry, index) => /*#__PURE__*/React.createElement(LogEntry, {\n    key: index,\n    isUser: entry.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 15\n    }\n  }, entry.isUser ? 'User' : 'Relay'), \": \", entry.text)))), isSidebarOpen && /*#__PURE__*/React.createElement(OutputSidebar, {\n    sprintData: sprintData,\n    currentDay: currentDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 673,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ToggleSidebarButton, {\n    onClick: () => setIsSidebarOpen(!isSidebarOpen),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 11\n    }\n  }, \"\\u2715\")));\n};\nexport default DaySprint;","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","keyframes","getGPTResponse","sprintGuidance","OutputSidebar","InputWithSendIcon","SprintContainer","div","MainContent","Header","h1","AIMessage","RelayIcon","span","typing","TypingIndicator","NextDayButton","button","ConversationLog","LogEntry","props","isUser","CopyButton","Timer","CrazyEightContainer","CrazyEightInstructions","p","CrazyEightInput","input","StoryboardContainer","StoryboardInstructions","StoryboardSection","textarea","SubmitButton","PrototypeSection","InteractionSection","AskQuestionButton","ToggleSidebarButton","DaySprint","currentDay","setCurrentDay","setInput","feedback","setFeedback","sprintData","setSprintData","isTyping","setIsTyping","conversationLog","setConversationLog","timerSeconds","setTimerSeconds","isTimerRunning","setIsTimerRunning","crazyEightIdeas","setCrazyEightIdeas","Array","fill","storyboardSections","setStoryboardSections","isReadyForNextDay","setIsReadyForNextDay","prototypeData","setPrototypeData","coreElements","structureFlow","interactionsProcesses","testingScenario","setTestingScenario","userInteraction","setUserInteraction","analysisNotes","setAnalysisNotes","showQuestionInput","setShowQuestionInput","isSidebarOpen","setIsSidebarOpen","getCurrentPrompt","prompt","getCurrentObjectives","objectives","moveToNextDay","prev","nextDay","Math","min","checkDayCompletion","_sprintData$","_sprintData$2","isComplete","every","idea","trim","section","Object","values","value","interval","setInterval","seconds","clearInterval","getInitialPrompt","loadInitialPrompt","Promise","resolve","setTimeout","initialPrompt","text","getAIFeedback","context","response","error","handleSubmit","userInput","updatedSprintData","_updatedSprintData$","_updatedSprintData$2","summarizedGoal","summarizedQuestions","currentObjectives","currentObjective","keys","length","JSON","stringify","submitCrazyEight","ideasString","map","index","join","alert","updateCrazyEightIdea","newIdeas","updateStoryboardSection","newSections","updatePrototypeData","key","submitDay3","submitDay4","submitDay5","startTimer","copyConversationLog","logText","entry","navigator","clipboard","writeText","conductSimulatedInteraction","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","goal","Fragment","onChange","e","target","onSubmit","onKeyPress","shiftKey","placeholder","onClick","floor","toString","padStart"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/DaySprint.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance } from '../utils/sprintResources';\nimport OutputSidebar from './OutputSidebar';\nimport InputWithSendIcon from './InputWithSendIcon';\n\n// Styled components (unchanged)\nconst SprintContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background-color: #121212;\n  color: #e0e0e0;\n`;\n\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Header = styled.h1`\n  color: #3c8ce7;\n  font-size: 2.5rem;\n  margin-bottom: 20px;\n`;\n\nconst AIMessage = styled.div`\n  background-color: #2a2a2a;\n  color: #e0e0e0;\n  padding: 15px;\n  border-radius: 15px;\n  margin-bottom: 20px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  position: relative;\n  max-width: 80%;\n  align-self: flex-start;\n`;\n\nconst RelayIcon = styled.span`\n  font-weight: bold;\n  color: #3c8ce7;\n  margin-right: 5px;\n`;\n\nconst typing = keyframes`\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n`;\n\nconst TypingIndicator = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 30px;\n  margin-bottom: 20px;\n\n  span {\n    height: 10px;\n    width: 10px;\n    margin: 0 2px;\n    background-color: #3c8ce7;\n    border-radius: 50%;\n    display: inline-block;\n    animation: ${typing} 1s infinite;\n\n    &:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n  }\n`;\n\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  align-self: flex-start;\n`;\n\nconst ConversationLog = styled.div`\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n  max-height: 300px;\n  overflow-y: auto;\n`;\n\nconst LogEntry = styled.div`\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#1e1e1e'};\n  border-radius: 5px;\n  color: ${props => props.isUser ? '#ffffff' : '#e0e0e0'};\n`;\n\nconst CopyButton = styled.button`\n  background-color: #3c8ce7;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n`;\n\nconst Timer = styled.div`\n  font-size: 2rem;\n  text-align: center;\n  margin: 1rem 0;\n`;\n\nconst CrazyEightContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst CrazyEightInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\n\nconst CrazyEightInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  margin-bottom: 0.5rem;\n  border: 1px solid #3c8ce7;\n  border-radius: 5px;\n`;\n\nconst StoryboardContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst StoryboardInstructions = styled.p`\n  margin-bottom: 1rem;\n  color: #e0e0e0;\n`;\n\nconst StoryboardSection = styled.textarea`\n  width: 100%;\n  height: 150px;\n  margin-top: 1rem;\n  padding: 0.5rem;\n  border-radius: 5px;\n`;\n\nconst SubmitButton = styled(CopyButton)`\n  margin-top: 1rem;\n  font-size: 1.2rem;\n  padding: 1rem 2rem;\n`;\n\nconst PrototypeSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst InteractionSection = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #2a2a2a;\n  border-radius: 5px;\n`;\n\nconst AskQuestionButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n`;\n\nconst ToggleSidebarButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 20px;\n  position: absolute;\n  top: 10px;\n  right: 10px;\n`;\n\nconst DaySprint = () => {\n  const [currentDay, setCurrentDay] = useState(1);\n  const [input, setInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [sprintData, setSprintData] = useState({});\n  const [isTyping, setIsTyping] = useState(true);\n  const [conversationLog, setConversationLog] = useState([]);\n  const [timerSeconds, setTimerSeconds] = useState(480); // 8 minutes\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [crazyEightIdeas, setCrazyEightIdeas] = useState(Array(8).fill(''));\n  const [storyboardSections, setStoryboardSections] = useState(['', '', '']);\n  const [isReadyForNextDay, setIsReadyForNextDay] = useState(false);\n  const [prototypeData, setPrototypeData] = useState({ coreElements: '', structureFlow: '', interactionsProcesses: '' });\n  const [testingScenario, setTestingScenario] = useState('');\n  const [userInteraction, setUserInteraction] = useState('');\n  const [analysisNotes, setAnalysisNotes] = useState('');\n  const [showQuestionInput, setShowQuestionInput] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n\n  const getCurrentPrompt = useCallback(() => sprintGuidance[currentDay].prompt, [currentDay]);\n  const getCurrentObjectives = useCallback(() => sprintGuidance[currentDay].objectives, [currentDay]);\n\n  const moveToNextDay = useCallback(() => {\n    setCurrentDay(prev => {\n      const nextDay = Math.min(prev + 1, 5);\n      setFeedback('');\n      setIsReadyForNextDay(false);\n      if (prev === 2) {\n        setCrazyEightIdeas(Array(8).fill(''));\n      } else if (prev === 3) {\n        setStoryboardSections(['', '', '']);\n      }\n      setIsTimerRunning(false);\n      setTimerSeconds(480);\n      return nextDay;\n    });\n  }, []);\n\n  const checkDayCompletion = useCallback(() => {\n    let isComplete = false;\n\n    switch (currentDay) {\n      case 1:\n        isComplete = sprintData[1]?.[\"Long-term Goal\"] && sprintData[1]?.[\"Critical Questions\"];\n        break;\n      case 2:\n        isComplete = crazyEightIdeas.every(idea => idea.trim() !== '');\n        break;\n      case 3:\n        isComplete = storyboardSections.every(section => section.trim() !== '');\n        break;\n      case 4:\n        isComplete = Object.values(prototypeData).every(value => value.trim() !== '');\n        break;\n      case 5:\n        isComplete = testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '';\n        break;\n      default:\n        isComplete = false;\n    }\n\n    setIsReadyForNextDay(isComplete);\n  }, [currentDay, sprintData, crazyEightIdeas, storyboardSections, prototypeData, testingScenario, userInteraction, analysisNotes]);\n\n  useEffect(() => {\n    let interval;\n    if (isTimerRunning && timerSeconds > 0) {\n      interval = setInterval(() => {\n        setTimerSeconds(seconds => seconds - 1);\n      }, 1000);\n    } else if (timerSeconds === 0) {\n      setIsTimerRunning(false);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerRunning, timerSeconds]);\n\n  const getInitialPrompt = useCallback(() => {\n    if (currentDay === 1) {\n      return `Welcome to our Mini Design Sprint! This compressed version of Jake Knapp and John Zeratsky's methodology will guide you through a rapid innovation process. We'll cover the essentials of a full sprint in just five short sessions.\n  \n  Let's kick off Day 1 by defining your long-term goal. This goal should be ambitious yet achievable, setting the direction for our entire sprint. What specific outcome are you aiming to achieve with this project? Think big and be as clear as possible.`;\n    }\n    return `Welcome to Day ${currentDay} of the Design Sprint. ${sprintGuidance[currentDay].prompt}`;\n  }, [currentDay]);\n\n  useEffect(() => {\n    const loadInitialPrompt = async () => {\n      // Show loading bubbles for 1 second\n      await new Promise(resolve => setTimeout(resolve, 1000));\n  \n      const initialPrompt = getInitialPrompt();\n      setIsTyping(false);\n      setFeedback(initialPrompt);\n      setConversationLog([{ isUser: false, text: initialPrompt }]);\n    };\n  \n    loadInitialPrompt();\n  }, [currentDay, getInitialPrompt]);\n\n  const getAIFeedback = async (input, context) => {\n    setIsTyping(true);\n    const prompt = `Day ${currentDay} of Design Sprint. Context: ${context}. User input: \"${input}\". ${getCurrentPrompt()} Provide encouraging feedback and guidance based on the user's input. Suggest improvements or ask thought-provoking questions to help the user develop their ideas further.`;\n  \n    try {\n      const response = await getGPTResponse(prompt, currentDay);\n      setFeedback(response);\n      setConversationLog(prev => [...prev, { isUser: false, text: response }]);\n    } catch (error) {\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!input.trim()) return;\n  \n    const userInput = input;\n    setInput('');\n    setIsTyping(true);\n    setConversationLog(prev => [...prev, { isUser: true, text: userInput }]);\n  \n    let updatedSprintData = { ...sprintData };\n  \n    try {\n      if (currentDay === 1) {\n        if (!updatedSprintData[1]?.[\"Long-term Goal\"]) {\n          const summarizedGoal = await getGPTResponse(`Summarize this long-term goal concisely: ${userInput}`);\n          updatedSprintData[1] = { ...updatedSprintData[1], \"Long-term Goal\": summarizedGoal };\n          setSprintData(updatedSprintData);\n          \n          const response = await getGPTResponse(`The user's long-term goal is: \"${userInput}\". Acknowledge this goal and ask for 2-3 critical questions related to achieving this goal.`);\n          setFeedback(response);\n          setConversationLog(prev => [...prev, { isUser: false, text: response }]);\n        } else if (!updatedSprintData[1]?.[\"Critical Questions\"]) {\n          const summarizedQuestions = await getGPTResponse(`Summarize these critical questions concisely: ${userInput}`);\n          updatedSprintData[1] = { ...updatedSprintData[1], \"Critical Questions\": summarizedQuestions };\n          setSprintData(updatedSprintData);\n          \n          const response = await getGPTResponse(`The user's critical questions are: \"${userInput}\". Acknowledge these questions, summarize the day's progress, and ask if they're ready to move to Day 2.`);\n          setFeedback(response);\n          setConversationLog(prev => [...prev, { isUser: false, text: response }]);\n        }\n      } else {\n        const currentObjectives = getCurrentObjectives();\n        const currentObjective = currentObjectives[Object.keys(updatedSprintData[currentDay] || {}).length];\n        if (currentObjective) {\n          updatedSprintData[currentDay] = {\n            ...updatedSprintData[currentDay],\n            [currentObjective]: userInput\n          };\n          setSprintData(updatedSprintData);\n  \n          const prompt = `Day ${currentDay} of Design Sprint. Context: ${JSON.stringify(updatedSprintData)}. User input: \"${userInput}\". ${getCurrentPrompt()} Provide concise guidance (2-3 sentences max) based on the user's input.`;\n  \n          const response = await getGPTResponse(prompt, currentDay);\n          setFeedback(response);\n          setConversationLog(prev => [...prev, { isUser: false, text: response }]);\n        }\n      }\n    } catch (error) {\n      setFeedback(\"I'm having trouble providing feedback right now. Please try again.\");\n    } finally {\n      setIsTyping(false);\n      checkDayCompletion();\n    }\n  };\n\n  const submitCrazyEight = async () => {\n    if (crazyEightIdeas.every(idea => idea.trim() !== '')) {\n      setIsTyping(true);\n      const ideasString = crazyEightIdeas.map((idea, index) => `Idea ${index + 1}: ${idea}`).join('\\n');\n      const prompt = `The user has completed the Crazy 8s exercise with the following ideas:\\n${ideasString}\\nPlease provide a brief analysis and feedback on these ideas, highlighting any particularly promising concepts or areas for further exploration.`;\n      \n      try {\n        const response = await getGPTResponse(prompt);\n        setFeedback(response);\n        setConversationLog(prev => [...prev, { isUser: false, text: response }]);\n      } catch (error) {\n        setFeedback(\"I'm having trouble providing feedback on your Crazy 8 ideas. Please try submitting again.\");\n      } finally {\n        setIsTyping(false);\n      }\n    } else {\n      alert(\"Please complete all 8 ideas before submitting.\");\n    }\n  };\n  \n  const updateCrazyEightIdea = async (index, value) => {\n    const newIdeas = [...crazyEightIdeas];\n    newIdeas[index] = value;\n    setCrazyEightIdeas(newIdeas);\n    await getAIFeedback(value, `Updating Crazy 8s idea ${index + 1}`);\n  };\n\n  const updateStoryboardSection = async (index, value) => {\n    const newSections = [...storyboardSections];\n    newSections[index] = value;\n    setStoryboardSections(newSections);\n    await getAIFeedback(value, `Updating storyboard panel ${index + 1}`);\n    checkDayCompletion();\n  };\n\n  const updatePrototypeData = async (key, value) => {\n    setPrototypeData(prev => ({ ...prev, [key]: value }));\n    await getAIFeedback(value, `Updating prototype ${key}`);\n    checkDayCompletion();\n  };\n\n  const submitDay3 = useCallback(() => {\n    if (storyboardSections.every(section => section.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        3: {\n          \"Solution Sketch\": storyboardSections.map((section, index) => `Panel ${index + 1}: ${section}`)\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all three storyboard panels before submitting.\");\n    }\n  }, [storyboardSections, moveToNextDay]);\n\n  const submitDay4 = useCallback(() => {\n    if (Object.values(prototypeData).every(value => value.trim() !== '')) {\n      setSprintData(prev => ({\n        ...prev,\n        4: prototypeData\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all prototype sections before submitting.\");\n    }\n  }, [prototypeData, moveToNextDay]);\n\n  const submitDay5 = useCallback(() => {\n    if (testingScenario.trim() !== '' && userInteraction.trim() !== '' && analysisNotes.trim() !== '') {\n      setSprintData(prev => ({\n        ...prev,\n        5: {\n          \"Testing Scenario\": testingScenario,\n          \"User Interaction\": userInteraction,\n          \"Analysis\": analysisNotes\n        }\n      }));\n      moveToNextDay();\n    } else {\n      alert(\"Please complete all sections before submitting.\");\n    }\n  }, [testingScenario, userInteraction, analysisNotes, moveToNextDay]);\n\n  const startTimer = () => {\n    setIsTimerRunning(true);\n    setTimerSeconds(480);\n  };\n\n  const copyConversationLog = () => {\n    const logText = conversationLog.map(entry => `**${entry.isUser ? 'User' : 'Relay'}**: ${entry.text}`).join('\\n');\n    navigator.clipboard.writeText(logText);\n  };\n\n  const conductSimulatedInteraction = async () => {\n    setIsTyping(true);\n    const prompt = `You are a potential user interacting with the following product prototype: ${JSON.stringify(prototypeData)}. Please provide realistic responses and actions based on this testing scenario: ${testingScenario}`;\n    try {\n      const response = await getGPTResponse(prompt, currentDay);\n      setUserInteraction(response);\n      await getAIFeedback(response, \"Simulated user interaction\");\n    } catch (error) {\n      setUserInteraction(\"Error: Unable to conduct simulated interaction.\");\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  return (\n    <SprintContainer>\n      <MainContent>\n        <Header>{`Day ${currentDay}: ${sprintGuidance[currentDay].goal}`}</Header>\n        {isTyping ? (\n          <TypingIndicator>\n            <span></span>\n            <span></span>\n            <span></span>\n          </TypingIndicator>\n        ) : feedback ? (\n          <AIMessage>\n            <RelayIcon>Relay :)</RelayIcon> {feedback}\n          </AIMessage>\n        ) : null}\n        \n        {/* Input for Day 1 */}\n        {currentDay === 1 && (\n          <>\n            <InputWithSendIcon\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onSubmit={handleSubmit}\n              onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSubmit()}\n              placeholder=\"Enter your response here...\"\n            />\n            {isReadyForNextDay && (\n              <NextDayButton onClick={moveToNextDay}>\n                Move to Day 2\n              </NextDayButton>\n            )}\n          </>\n        )}\n\n        {/* Day 2 content */}\n        {currentDay === 2 && (\n          <>\n            <CrazyEightContainer>\n              <CrazyEightInstructions>\n                Crazy 8s is a fast sketching exercise where you'll create 8 distinct ideas in 8 minutes. \n                The goal is to push beyond your first idea and generate a wide range of possibilities. \n                Don't worry about quality or feasibility at this stage - focus on quantity and variety!\n              </CrazyEightInstructions>\n              <CopyButton onClick={startTimer}>Start Crazy 8s Timer</CopyButton>\n              <Timer>{Math.floor(timerSeconds / 60)}:{(timerSeconds % 60).toString().padStart(2, '0')}</Timer>\n              {crazyEightIdeas.map((idea, index) => (\n                <CrazyEightInput\n                  key={index}\n                  value={idea}\n                  onChange={(e) => updateCrazyEightIdea(index, e.target.value)}\n                  placeholder={`Crazy 8s Idea ${index + 1}`}\n                />\n              ))}\n              <SubmitButton onClick={submitCrazyEight}>\n                Submit Crazy 8s Ideas for Feedback\n              </SubmitButton>\n            </CrazyEightContainer>\n            {isReadyForNextDay && (\n              <NextDayButton onClick={moveToNextDay}>\n                Move to Day 3\n              </NextDayButton>\n            )}\n            <AskQuestionButton onClick={() => setShowQuestionInput(!showQuestionInput)}>\n              {showQuestionInput ? 'Hide Question Input' : 'Ask a Question'}\n            </AskQuestionButton>\n            {showQuestionInput && (\n              <InputWithSendIcon\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                onSubmit={handleSubmit}\n                onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSubmit()}\n                placeholder=\"Have any questions?\"\n              />\n            )}\n          </>\n        )}\n\n        {/* Day 3 content */}\n        {currentDay === 3 && (\n          <StoryboardContainer>\n            <StoryboardInstructions>\n              Create a three-panel storyboard that outlines your chosen solution. Each panel should represent a key step or moment in your solution:\n              1. The problem or starting point\n              2. The main action or change\n              3. The result or outcome\n              Describe each panel in detail, focusing on what the user sees and does.\n            </StoryboardInstructions>\n            {storyboardSections.map((section, index) => (\n              <StoryboardSection\n                key={index}\n                value={section}\n                onChange={(e) => updateStoryboardSection(index, e.target.value)}\n                placeholder={`Describe panel ${index + 1}`}\n              />\n            ))}\n            {isReadyForNextDay && (\n              <SubmitButton onClick={submitDay3}>\n                Submit Storyboard and Move to Day 4\n              </SubmitButton>\n            )}\n          </StoryboardContainer>\n        )}\n\n        {/* Day 4 content */}\n        {currentDay === 4 && (\n          <PrototypeSection>\n            <h3>Design Your Conceptual Prototype</h3>\n            <StoryboardSection\n              value={prototypeData.coreElements}\n              onChange={(e) => updatePrototypeData('coreElements', e.target.value)}\n              placeholder=\"Describe core elements...\"\n            />\n            <StoryboardSection\n              value={prototypeData.structureFlow}\n              onChange={(e) => updatePrototypeData('structureFlow', e.target.value)}\n              placeholder=\"Outline structure or flow...\"\n            />\n            <StoryboardSection\n              value={prototypeData.interactionsProcesses}\n              onChange={(e) => updatePrototypeData('interactionsProcesses', e.target.value)}\n              placeholder=\"Detail interactions or processes...\"\n            />\n            {isReadyForNextDay && (\n              <SubmitButton onClick={submitDay4}>\n                Submit Conceptual Prototype and Move to Day 5\n              </SubmitButton>\n            )}\n          </PrototypeSection>\n        )}\n\n        {/* Day 5 content */}\n        {currentDay === 5 && (\n          <InteractionSection>\n            <h3>Simulated User/Stakeholder Testing</h3>\n            <StoryboardSection\n              value={testingScenario}\n              onChange={(e) => setTestingScenario(e.target.value)}\n              placeholder=\"Describe a testing scenario for your prototype...\"\n            />\n            <CopyButton onClick={conductSimulatedInteraction}>Simulate User Interaction</CopyButton>\n            {userInteraction && (\n              <>\n                <h4>Simulated User Interaction:</h4>\n                <p>{userInteraction}</p>\n              </>\n            )}\n            <StoryboardSection\n              value={analysisNotes}\n              onChange={(e) => setAnalysisNotes(e.target.value)}\n              placeholder=\"Analyze the simulated feedback and consider potential iterations...\"\n            />\n            {isReadyForNextDay && (\n              <SubmitButton onClick={submitDay5}>\n                Submit Testing Results and Complete Sprint\n              </SubmitButton>\n            )}\n          </InteractionSection>\n        )}\n\n        {/* Ask a question button and input */}\n        {currentDay !== 1 && currentDay !== 2 && (\n          <>\n            <AskQuestionButton onClick={() => setShowQuestionInput(!showQuestionInput)}>\n              {showQuestionInput ? 'Hide Question Input' : 'Ask a Question'}\n            </AskQuestionButton>\n            {showQuestionInput && (\n              <InputWithSendIcon\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                onSubmit={handleSubmit}\n                onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSubmit()}\n                placeholder=\"Have any questions?\"\n              />\n            )}\n          </>\n        )}\n\n        <ConversationLog>\n          <h3>Conversation Log (For Development)</h3>\n          <CopyButton onClick={copyConversationLog}>Copy Log</CopyButton>\n          {conversationLog.map((entry, index) => (\n            <LogEntry key={index} isUser={entry.isUser}>\n              <strong>{entry.isUser ? 'User' : 'Relay'}</strong>: {entry.text}\n            </LogEntry>\n          ))}\n        </ConversationLog>\n      </MainContent>\n      {isSidebarOpen && (\n        <OutputSidebar\n          sprintData={sprintData}\n          currentDay={currentDay}\n        >\n          <ToggleSidebarButton onClick={() => setIsSidebarOpen(!isSidebarOpen)}>\n            ✕\n          </ToggleSidebarButton>\n        </OutputSidebar>\n      )}\n    </SprintContainer>\n  );\n};\n\nexport default DaySprint;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,MAAM,IAAIC,SAAS,QAAQ,mBAAmB;AACrD,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SAASC,cAAc,QAAQ,0BAA0B;AACzD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,iBAAiB,MAAM,qBAAqB;;AAEnD;AACA,MAAMC,eAAe,GAAGN,MAAM,CAACO,GAAG;AAClC;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,WAAW,GAAGR,MAAM,CAACO,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAME,MAAM,GAAGT,MAAM,CAACU,EAAE;AACxB;AACA;AACA;AACA,CAAC;AAED,MAAMC,SAAS,GAAGX,MAAM,CAACO,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMK,SAAS,GAAGZ,MAAM,CAACa,IAAI;AAC7B;AACA;AACA;AACA,CAAC;AAED,MAAMC,MAAM,GAAGb,SAAS;AACxB;AACA;AACA;AACA,CAAC;AAED,MAAMc,eAAe,GAAGf,MAAM,CAACO,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiBO,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAME,aAAa,GAAGhB,MAAM,CAACiB,MAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,eAAe,GAAGlB,MAAM,CAACO,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMY,QAAQ,GAAGnB,MAAM,CAACO,GAAG;AAC3B;AACA;AACA,sBAAsBa,KAAK,IAAIA,KAAK,CAACC,MAAM,GAAG,SAAS,GAAG,SAAS;AACnE;AACA,WAAWD,KAAK,IAAIA,KAAK,CAACC,MAAM,GAAG,SAAS,GAAG,SAAS;AACxD,CAAC;AAED,MAAMC,UAAU,GAAGtB,MAAM,CAACiB,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMM,KAAK,GAAGvB,MAAM,CAACO,GAAG;AACxB;AACA;AACA;AACA,CAAC;AAED,MAAMiB,mBAAmB,GAAGxB,MAAM,CAACO,GAAG;AACtC;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMkB,sBAAsB,GAAGzB,MAAM,CAAC0B,CAAC;AACvC;AACA;AACA,CAAC;AAED,MAAMC,eAAe,GAAG3B,MAAM,CAAC4B,KAAK;AACpC;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,mBAAmB,GAAG7B,MAAM,CAACO,GAAG;AACtC;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMuB,sBAAsB,GAAG9B,MAAM,CAAC0B,CAAC;AACvC;AACA;AACA,CAAC;AAED,MAAMK,iBAAiB,GAAG/B,MAAM,CAACgC,QAAQ;AACzC;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,YAAY,GAAGjC,MAAM,CAACsB,UAAU,CAAC;AACvC;AACA;AACA;AACA,CAAC;AAED,MAAMY,gBAAgB,GAAGlC,MAAM,CAACO,GAAG;AACnC;AACA;AACA;AACA;AACA,CAAC;AAED,MAAM4B,kBAAkB,GAAGnC,MAAM,CAACO,GAAG;AACrC;AACA;AACA;AACA;AACA,CAAC;AAED,MAAM6B,iBAAiB,GAAGpC,MAAM,CAACiB,MAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMoB,mBAAmB,GAAGrC,MAAM,CAACiB,MAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMqB,SAAS,GAAGA,CAAA,KAAM;EACtB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAG3C,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAAC+B,KAAK,EAAEa,QAAQ,CAAC,GAAG5C,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC6C,QAAQ,EAAEC,WAAW,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC+C,UAAU,EAAEC,aAAa,CAAC,GAAGhD,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAACiD,QAAQ,EAAEC,WAAW,CAAC,GAAGlD,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACmD,eAAe,EAAEC,kBAAkB,CAAC,GAAGpD,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACqD,YAAY,EAAEC,eAAe,CAAC,GAAGtD,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;EACvD,MAAM,CAACuD,cAAc,EAAEC,iBAAiB,CAAC,GAAGxD,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACyD,eAAe,EAAEC,kBAAkB,CAAC,GAAG1D,QAAQ,CAAC2D,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;EACzE,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG9D,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAC1E,MAAM,CAAC+D,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGhE,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACiE,aAAa,EAAEC,gBAAgB,CAAC,GAAGlE,QAAQ,CAAC;IAAEmE,YAAY,EAAE,EAAE;IAAEC,aAAa,EAAE,EAAE;IAAEC,qBAAqB,EAAE;EAAG,CAAC,CAAC;EACtH,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGvE,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACwE,eAAe,EAAEC,kBAAkB,CAAC,GAAGzE,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC0E,aAAa,EAAEC,gBAAgB,CAAC,GAAG3E,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAC4E,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG7E,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAAC8E,aAAa,EAAEC,gBAAgB,CAAC,GAAG/E,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMgF,gBAAgB,GAAG9E,WAAW,CAAC,MAAMI,cAAc,CAACoC,UAAU,CAAC,CAACuC,MAAM,EAAE,CAACvC,UAAU,CAAC,CAAC;EAC3F,MAAMwC,oBAAoB,GAAGhF,WAAW,CAAC,MAAMI,cAAc,CAACoC,UAAU,CAAC,CAACyC,UAAU,EAAE,CAACzC,UAAU,CAAC,CAAC;EAEnG,MAAM0C,aAAa,GAAGlF,WAAW,CAAC,MAAM;IACtCyC,aAAa,CAAC0C,IAAI,IAAI;MACpB,MAAMC,OAAO,GAAGC,IAAI,CAACC,GAAG,CAACH,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC;MACrCvC,WAAW,CAAC,EAAE,CAAC;MACfkB,oBAAoB,CAAC,KAAK,CAAC;MAC3B,IAAIqB,IAAI,KAAK,CAAC,EAAE;QACd3B,kBAAkB,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;MACvC,CAAC,MAAM,IAAIyB,IAAI,KAAK,CAAC,EAAE;QACrBvB,qBAAqB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;MACrC;MACAN,iBAAiB,CAAC,KAAK,CAAC;MACxBF,eAAe,CAAC,GAAG,CAAC;MACpB,OAAOgC,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,kBAAkB,GAAGvF,WAAW,CAAC,MAAM;IAAA,IAAAwF,YAAA,EAAAC,aAAA;IAC3C,IAAIC,UAAU,GAAG,KAAK;IAEtB,QAAQlD,UAAU;MAChB,KAAK,CAAC;QACJkD,UAAU,GAAG,EAAAF,YAAA,GAAA3C,UAAU,CAAC,CAAC,CAAC,cAAA2C,YAAA,uBAAbA,YAAA,CAAgB,gBAAgB,CAAC,OAAAC,aAAA,GAAI5C,UAAU,CAAC,CAAC,CAAC,cAAA4C,aAAA,uBAAbA,aAAA,CAAgB,oBAAoB,CAAC;QACvF;MACF,KAAK,CAAC;QACJC,UAAU,GAAGnC,eAAe,CAACoC,KAAK,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;QAC9D;MACF,KAAK,CAAC;QACJH,UAAU,GAAG/B,kBAAkB,CAACgC,KAAK,CAACG,OAAO,IAAIA,OAAO,CAACD,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;QACvE;MACF,KAAK,CAAC;QACJH,UAAU,GAAGK,MAAM,CAACC,MAAM,CAACjC,aAAa,CAAC,CAAC4B,KAAK,CAACM,KAAK,IAAIA,KAAK,CAACJ,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;QAC7E;MACF,KAAK,CAAC;QACJH,UAAU,GAAGtB,eAAe,CAACyB,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIvB,eAAe,CAACuB,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIrB,aAAa,CAACqB,IAAI,CAAC,CAAC,KAAK,EAAE;QAC1G;MACF;QACEH,UAAU,GAAG,KAAK;IACtB;IAEA5B,oBAAoB,CAAC4B,UAAU,CAAC;EAClC,CAAC,EAAE,CAAClD,UAAU,EAAEK,UAAU,EAAEU,eAAe,EAAEI,kBAAkB,EAAEI,aAAa,EAAEK,eAAe,EAAEE,eAAe,EAAEE,aAAa,CAAC,CAAC;EAEjIzE,SAAS,CAAC,MAAM;IACd,IAAImG,QAAQ;IACZ,IAAI7C,cAAc,IAAIF,YAAY,GAAG,CAAC,EAAE;MACtC+C,QAAQ,GAAGC,WAAW,CAAC,MAAM;QAC3B/C,eAAe,CAACgD,OAAO,IAAIA,OAAO,GAAG,CAAC,CAAC;MACzC,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM,IAAIjD,YAAY,KAAK,CAAC,EAAE;MAC7BG,iBAAiB,CAAC,KAAK,CAAC;IAC1B;IACA,OAAO,MAAM+C,aAAa,CAACH,QAAQ,CAAC;EACtC,CAAC,EAAE,CAAC7C,cAAc,EAAEF,YAAY,CAAC,CAAC;EAElC,MAAMmD,gBAAgB,GAAGtG,WAAW,CAAC,MAAM;IACzC,IAAIwC,UAAU,KAAK,CAAC,EAAE;MACpB,OAAO;AACb;AACA,6PAA6P;IACzP;IACA,OAAO,kBAAkBA,UAAU,0BAA0BpC,cAAc,CAACoC,UAAU,CAAC,CAACuC,MAAM,EAAE;EAClG,CAAC,EAAE,CAACvC,UAAU,CAAC,CAAC;EAEhBzC,SAAS,CAAC,MAAM;IACd,MAAMwG,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC;MACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MAEvD,MAAME,aAAa,GAAGL,gBAAgB,CAAC,CAAC;MACxCtD,WAAW,CAAC,KAAK,CAAC;MAClBJ,WAAW,CAAC+D,aAAa,CAAC;MAC1BzD,kBAAkB,CAAC,CAAC;QAAE5B,MAAM,EAAE,KAAK;QAAEsF,IAAI,EAAED;MAAc,CAAC,CAAC,CAAC;IAC9D,CAAC;IAEDJ,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAAC/D,UAAU,EAAE8D,gBAAgB,CAAC,CAAC;EAElC,MAAMO,aAAa,GAAG,MAAAA,CAAOhF,KAAK,EAAEiF,OAAO,KAAK;IAC9C9D,WAAW,CAAC,IAAI,CAAC;IACjB,MAAM+B,MAAM,GAAG,OAAOvC,UAAU,+BAA+BsE,OAAO,kBAAkBjF,KAAK,MAAMiD,gBAAgB,CAAC,CAAC,6KAA6K;IAElS,IAAI;MACF,MAAMiC,QAAQ,GAAG,MAAM5G,cAAc,CAAC4E,MAAM,EAAEvC,UAAU,CAAC;MACzDI,WAAW,CAACmE,QAAQ,CAAC;MACrB7D,kBAAkB,CAACiC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;QAAE7D,MAAM,EAAE,KAAK;QAAEsF,IAAI,EAAEG;MAAS,CAAC,CAAC,CAAC;IAC1E,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdpE,WAAW,CAAC,oEAAoE,CAAC;IACnF,CAAC,SAAS;MACRI,WAAW,CAAC,KAAK,CAAC;IACpB;EACF,CAAC;EAED,MAAMiE,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACpF,KAAK,CAACgE,IAAI,CAAC,CAAC,EAAE;IAEnB,MAAMqB,SAAS,GAAGrF,KAAK;IACvBa,QAAQ,CAAC,EAAE,CAAC;IACZM,WAAW,CAAC,IAAI,CAAC;IACjBE,kBAAkB,CAACiC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAE7D,MAAM,EAAE,IAAI;MAAEsF,IAAI,EAAEM;IAAU,CAAC,CAAC,CAAC;IAExE,IAAIC,iBAAiB,GAAG;MAAE,GAAGtE;IAAW,CAAC;IAEzC,IAAI;MACF,IAAIL,UAAU,KAAK,CAAC,EAAE;QAAA,IAAA4E,mBAAA,EAAAC,oBAAA;QACpB,IAAI,GAAAD,mBAAA,GAACD,iBAAiB,CAAC,CAAC,CAAC,cAAAC,mBAAA,uBAApBA,mBAAA,CAAuB,gBAAgB,CAAC,GAAE;UAC7C,MAAME,cAAc,GAAG,MAAMnH,cAAc,CAAC,4CAA4C+G,SAAS,EAAE,CAAC;UACpGC,iBAAiB,CAAC,CAAC,CAAC,GAAG;YAAE,GAAGA,iBAAiB,CAAC,CAAC,CAAC;YAAE,gBAAgB,EAAEG;UAAe,CAAC;UACpFxE,aAAa,CAACqE,iBAAiB,CAAC;UAEhC,MAAMJ,QAAQ,GAAG,MAAM5G,cAAc,CAAC,kCAAkC+G,SAAS,6FAA6F,CAAC;UAC/KtE,WAAW,CAACmE,QAAQ,CAAC;UACrB7D,kBAAkB,CAACiC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;YAAE7D,MAAM,EAAE,KAAK;YAAEsF,IAAI,EAAEG;UAAS,CAAC,CAAC,CAAC;QAC1E,CAAC,MAAM,IAAI,GAAAM,oBAAA,GAACF,iBAAiB,CAAC,CAAC,CAAC,cAAAE,oBAAA,uBAApBA,oBAAA,CAAuB,oBAAoB,CAAC,GAAE;UACxD,MAAME,mBAAmB,GAAG,MAAMpH,cAAc,CAAC,iDAAiD+G,SAAS,EAAE,CAAC;UAC9GC,iBAAiB,CAAC,CAAC,CAAC,GAAG;YAAE,GAAGA,iBAAiB,CAAC,CAAC,CAAC;YAAE,oBAAoB,EAAEI;UAAoB,CAAC;UAC7FzE,aAAa,CAACqE,iBAAiB,CAAC;UAEhC,MAAMJ,QAAQ,GAAG,MAAM5G,cAAc,CAAC,uCAAuC+G,SAAS,0GAA0G,CAAC;UACjMtE,WAAW,CAACmE,QAAQ,CAAC;UACrB7D,kBAAkB,CAACiC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;YAAE7D,MAAM,EAAE,KAAK;YAAEsF,IAAI,EAAEG;UAAS,CAAC,CAAC,CAAC;QAC1E;MACF,CAAC,MAAM;QACL,MAAMS,iBAAiB,GAAGxC,oBAAoB,CAAC,CAAC;QAChD,MAAMyC,gBAAgB,GAAGD,iBAAiB,CAACzB,MAAM,CAAC2B,IAAI,CAACP,iBAAiB,CAAC3E,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAACmF,MAAM,CAAC;QACnG,IAAIF,gBAAgB,EAAE;UACpBN,iBAAiB,CAAC3E,UAAU,CAAC,GAAG;YAC9B,GAAG2E,iBAAiB,CAAC3E,UAAU,CAAC;YAChC,CAACiF,gBAAgB,GAAGP;UACtB,CAAC;UACDpE,aAAa,CAACqE,iBAAiB,CAAC;UAEhC,MAAMpC,MAAM,GAAG,OAAOvC,UAAU,+BAA+BoF,IAAI,CAACC,SAAS,CAACV,iBAAiB,CAAC,kBAAkBD,SAAS,MAAMpC,gBAAgB,CAAC,CAAC,0EAA0E;UAE7N,MAAMiC,QAAQ,GAAG,MAAM5G,cAAc,CAAC4E,MAAM,EAAEvC,UAAU,CAAC;UACzDI,WAAW,CAACmE,QAAQ,CAAC;UACrB7D,kBAAkB,CAACiC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;YAAE7D,MAAM,EAAE,KAAK;YAAEsF,IAAI,EAAEG;UAAS,CAAC,CAAC,CAAC;QAC1E;MACF;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdpE,WAAW,CAAC,oEAAoE,CAAC;IACnF,CAAC,SAAS;MACRI,WAAW,CAAC,KAAK,CAAC;MAClBuC,kBAAkB,CAAC,CAAC;IACtB;EACF,CAAC;EAED,MAAMuC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAIvE,eAAe,CAACoC,KAAK,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE;MACrD7C,WAAW,CAAC,IAAI,CAAC;MACjB,MAAM+E,WAAW,GAAGxE,eAAe,CAACyE,GAAG,CAAC,CAACpC,IAAI,EAAEqC,KAAK,KAAK,QAAQA,KAAK,GAAG,CAAC,KAAKrC,IAAI,EAAE,CAAC,CAACsC,IAAI,CAAC,IAAI,CAAC;MACjG,MAAMnD,MAAM,GAAG,2EAA2EgD,WAAW,mJAAmJ;MAExP,IAAI;QACF,MAAMhB,QAAQ,GAAG,MAAM5G,cAAc,CAAC4E,MAAM,CAAC;QAC7CnC,WAAW,CAACmE,QAAQ,CAAC;QACrB7D,kBAAkB,CAACiC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;UAAE7D,MAAM,EAAE,KAAK;UAAEsF,IAAI,EAAEG;QAAS,CAAC,CAAC,CAAC;MAC1E,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdpE,WAAW,CAAC,2FAA2F,CAAC;MAC1G,CAAC,SAAS;QACRI,WAAW,CAAC,KAAK,CAAC;MACpB;IACF,CAAC,MAAM;MACLmF,KAAK,CAAC,gDAAgD,CAAC;IACzD;EACF,CAAC;EAED,MAAMC,oBAAoB,GAAG,MAAAA,CAAOH,KAAK,EAAEhC,KAAK,KAAK;IACnD,MAAMoC,QAAQ,GAAG,CAAC,GAAG9E,eAAe,CAAC;IACrC8E,QAAQ,CAACJ,KAAK,CAAC,GAAGhC,KAAK;IACvBzC,kBAAkB,CAAC6E,QAAQ,CAAC;IAC5B,MAAMxB,aAAa,CAACZ,KAAK,EAAE,0BAA0BgC,KAAK,GAAG,CAAC,EAAE,CAAC;EACnE,CAAC;EAED,MAAMK,uBAAuB,GAAG,MAAAA,CAAOL,KAAK,EAAEhC,KAAK,KAAK;IACtD,MAAMsC,WAAW,GAAG,CAAC,GAAG5E,kBAAkB,CAAC;IAC3C4E,WAAW,CAACN,KAAK,CAAC,GAAGhC,KAAK;IAC1BrC,qBAAqB,CAAC2E,WAAW,CAAC;IAClC,MAAM1B,aAAa,CAACZ,KAAK,EAAE,6BAA6BgC,KAAK,GAAG,CAAC,EAAE,CAAC;IACpE1C,kBAAkB,CAAC,CAAC;EACtB,CAAC;EAED,MAAMiD,mBAAmB,GAAG,MAAAA,CAAOC,GAAG,EAAExC,KAAK,KAAK;IAChDjC,gBAAgB,CAACmB,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,CAACsD,GAAG,GAAGxC;IAAM,CAAC,CAAC,CAAC;IACrD,MAAMY,aAAa,CAACZ,KAAK,EAAE,sBAAsBwC,GAAG,EAAE,CAAC;IACvDlD,kBAAkB,CAAC,CAAC;EACtB,CAAC;EAED,MAAMmD,UAAU,GAAG1I,WAAW,CAAC,MAAM;IACnC,IAAI2D,kBAAkB,CAACgC,KAAK,CAACG,OAAO,IAAIA,OAAO,CAACD,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE;MAC9D/C,aAAa,CAACqC,IAAI,KAAK;QACrB,GAAGA,IAAI;QACP,CAAC,EAAE;UACD,iBAAiB,EAAExB,kBAAkB,CAACqE,GAAG,CAAC,CAAClC,OAAO,EAAEmC,KAAK,KAAK,SAASA,KAAK,GAAG,CAAC,KAAKnC,OAAO,EAAE;QAChG;MACF,CAAC,CAAC,CAAC;MACHZ,aAAa,CAAC,CAAC;IACjB,CAAC,MAAM;MACLiD,KAAK,CAAC,gEAAgE,CAAC;IACzE;EACF,CAAC,EAAE,CAACxE,kBAAkB,EAAEuB,aAAa,CAAC,CAAC;EAEvC,MAAMyD,UAAU,GAAG3I,WAAW,CAAC,MAAM;IACnC,IAAI+F,MAAM,CAACC,MAAM,CAACjC,aAAa,CAAC,CAAC4B,KAAK,CAACM,KAAK,IAAIA,KAAK,CAACJ,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE;MACpE/C,aAAa,CAACqC,IAAI,KAAK;QACrB,GAAGA,IAAI;QACP,CAAC,EAAEpB;MACL,CAAC,CAAC,CAAC;MACHmB,aAAa,CAAC,CAAC;IACjB,CAAC,MAAM;MACLiD,KAAK,CAAC,2DAA2D,CAAC;IACpE;EACF,CAAC,EAAE,CAACpE,aAAa,EAAEmB,aAAa,CAAC,CAAC;EAElC,MAAM0D,UAAU,GAAG5I,WAAW,CAAC,MAAM;IACnC,IAAIoE,eAAe,CAACyB,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIvB,eAAe,CAACuB,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIrB,aAAa,CAACqB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACjG/C,aAAa,CAACqC,IAAI,KAAK;QACrB,GAAGA,IAAI;QACP,CAAC,EAAE;UACD,kBAAkB,EAAEf,eAAe;UACnC,kBAAkB,EAAEE,eAAe;UACnC,UAAU,EAAEE;QACd;MACF,CAAC,CAAC,CAAC;MACHU,aAAa,CAAC,CAAC;IACjB,CAAC,MAAM;MACLiD,KAAK,CAAC,iDAAiD,CAAC;IAC1D;EACF,CAAC,EAAE,CAAC/D,eAAe,EAAEE,eAAe,EAAEE,aAAa,EAAEU,aAAa,CAAC,CAAC;EAEpE,MAAM2D,UAAU,GAAGA,CAAA,KAAM;IACvBvF,iBAAiB,CAAC,IAAI,CAAC;IACvBF,eAAe,CAAC,GAAG,CAAC;EACtB,CAAC;EAED,MAAM0F,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMC,OAAO,GAAG9F,eAAe,CAAC+E,GAAG,CAACgB,KAAK,IAAI,KAAKA,KAAK,CAAC1H,MAAM,GAAG,MAAM,GAAG,OAAO,OAAO0H,KAAK,CAACpC,IAAI,EAAE,CAAC,CAACsB,IAAI,CAAC,IAAI,CAAC;IAChHe,SAAS,CAACC,SAAS,CAACC,SAAS,CAACJ,OAAO,CAAC;EACxC,CAAC;EAED,MAAMK,2BAA2B,GAAG,MAAAA,CAAA,KAAY;IAC9CpG,WAAW,CAAC,IAAI,CAAC;IACjB,MAAM+B,MAAM,GAAG,8EAA8E6C,IAAI,CAACC,SAAS,CAAC9D,aAAa,CAAC,oFAAoFK,eAAe,EAAE;IAC/N,IAAI;MACF,MAAM2C,QAAQ,GAAG,MAAM5G,cAAc,CAAC4E,MAAM,EAAEvC,UAAU,CAAC;MACzD+B,kBAAkB,CAACwC,QAAQ,CAAC;MAC5B,MAAMF,aAAa,CAACE,QAAQ,EAAE,4BAA4B,CAAC;IAC7D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdzC,kBAAkB,CAAC,iDAAiD,CAAC;IACvE,CAAC,SAAS;MACRvB,WAAW,CAAC,KAAK,CAAC;IACpB;EACF,CAAC;EAED,oBACEnD,KAAA,CAAAwJ,aAAA,CAAC9I,eAAe;IAAA+I,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACd9J,KAAA,CAAAwJ,aAAA,CAAC5I,WAAW;IAAA6I,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACV9J,KAAA,CAAAwJ,aAAA,CAAC3I,MAAM;IAAA4I,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAE,OAAOnH,UAAU,KAAKpC,cAAc,CAACoC,UAAU,CAAC,CAACoH,IAAI,EAAW,CAAC,EACzE7G,QAAQ,gBACPlD,KAAA,CAAAwJ,aAAA,CAACrI,eAAe;IAAAsI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACd9J,KAAA,CAAAwJ,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAY,CAAC,eACb9J,KAAA,CAAAwJ,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAY,CAAC,eACb9J,KAAA,CAAAwJ,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAY,CACG,CAAC,GAChBhH,QAAQ,gBACV9C,KAAA,CAAAwJ,aAAA,CAACzI,SAAS;IAAA0I,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACR9J,KAAA,CAAAwJ,aAAA,CAACxI,SAAS;IAAAyI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,UAAmB,CAAC,KAAC,EAAChH,QACxB,CAAC,GACV,IAAI,EAGPH,UAAU,KAAK,CAAC,iBACf3C,KAAA,CAAAwJ,aAAA,CAAAxJ,KAAA,CAAAgK,QAAA,qBACEhK,KAAA,CAAAwJ,aAAA,CAAC/I,iBAAiB;IAChB2F,KAAK,EAAEpE,KAAM;IACbiI,QAAQ,EAAGC,CAAC,IAAKrH,QAAQ,CAACqH,CAAC,CAACC,MAAM,CAAC/D,KAAK,CAAE;IAC1CgE,QAAQ,EAAEhD,YAAa;IACvBiD,UAAU,EAAGH,CAAC,IAAKA,CAAC,CAACtB,GAAG,KAAK,OAAO,IAAI,CAACsB,CAAC,CAACI,QAAQ,IAAIlD,YAAY,CAAC,CAAE;IACtEmD,WAAW,EAAC,6BAA6B;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC1C,CAAC,EACD9F,iBAAiB,iBAChBhE,KAAA,CAAAwJ,aAAA,CAACpI,aAAa;IAACoJ,OAAO,EAAEnF,aAAc;IAAAoE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,eAExB,CAEjB,CACH,EAGAnH,UAAU,KAAK,CAAC,iBACf3C,KAAA,CAAAwJ,aAAA,CAAAxJ,KAAA,CAAAgK,QAAA,qBACEhK,KAAA,CAAAwJ,aAAA,CAAC5H,mBAAmB;IAAA6H,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAClB9J,KAAA,CAAAwJ,aAAA,CAAC3H,sBAAsB;IAAA4H,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,yQAIA,CAAC,eACzB9J,KAAA,CAAAwJ,aAAA,CAAC9H,UAAU;IAAC8I,OAAO,EAAExB,UAAW;IAAAS,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,sBAAgC,CAAC,eAClE9J,KAAA,CAAAwJ,aAAA,CAAC7H,KAAK;IAAA8H,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAEtE,IAAI,CAACiF,KAAK,CAACnH,YAAY,GAAG,EAAE,CAAC,EAAC,GAAC,EAAC,CAACA,YAAY,GAAG,EAAE,EAAEoH,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAS,CAAC,EAC/FjH,eAAe,CAACyE,GAAG,CAAC,CAACpC,IAAI,EAAEqC,KAAK,kBAC/BpI,KAAA,CAAAwJ,aAAA,CAACzH,eAAe;IACd6G,GAAG,EAAER,KAAM;IACXhC,KAAK,EAAEL,IAAK;IACZkE,QAAQ,EAAGC,CAAC,IAAK3B,oBAAoB,CAACH,KAAK,EAAE8B,CAAC,CAACC,MAAM,CAAC/D,KAAK,CAAE;IAC7DmE,WAAW,EAAE,iBAAiBnC,KAAK,GAAG,CAAC,EAAG;IAAAqB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC3C,CACF,CAAC,eACF9J,KAAA,CAAAwJ,aAAA,CAACnH,YAAY;IAACmI,OAAO,EAAEvC,gBAAiB;IAAAwB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,oCAE3B,CACK,CAAC,EACrB9F,iBAAiB,iBAChBhE,KAAA,CAAAwJ,aAAA,CAACpI,aAAa;IAACoJ,OAAO,EAAEnF,aAAc;IAAAoE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,eAExB,CAChB,eACD9J,KAAA,CAAAwJ,aAAA,CAAChH,iBAAiB;IAACgI,OAAO,EAAEA,CAAA,KAAM1F,oBAAoB,CAAC,CAACD,iBAAiB,CAAE;IAAA4E,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACxEjF,iBAAiB,GAAG,qBAAqB,GAAG,gBAC5B,CAAC,EACnBA,iBAAiB,iBAChB7E,KAAA,CAAAwJ,aAAA,CAAC/I,iBAAiB;IAChB2F,KAAK,EAAEpE,KAAM;IACbiI,QAAQ,EAAGC,CAAC,IAAKrH,QAAQ,CAACqH,CAAC,CAACC,MAAM,CAAC/D,KAAK,CAAE;IAC1CgE,QAAQ,EAAEhD,YAAa;IACvBiD,UAAU,EAAGH,CAAC,IAAKA,CAAC,CAACtB,GAAG,KAAK,OAAO,IAAI,CAACsB,CAAC,CAACI,QAAQ,IAAIlD,YAAY,CAAC,CAAE;IACtEmD,WAAW,EAAC,qBAAqB;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAClC,CAEH,CACH,EAGAnH,UAAU,KAAK,CAAC,iBACf3C,KAAA,CAAAwJ,aAAA,CAACvH,mBAAmB;IAAAwH,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAClB9J,KAAA,CAAAwJ,aAAA,CAACtH,sBAAsB;IAAAuH,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,uSAMA,CAAC,EACxBhG,kBAAkB,CAACqE,GAAG,CAAC,CAAClC,OAAO,EAAEmC,KAAK,kBACrCpI,KAAA,CAAAwJ,aAAA,CAACrH,iBAAiB;IAChByG,GAAG,EAAER,KAAM;IACXhC,KAAK,EAAEH,OAAQ;IACfgE,QAAQ,EAAGC,CAAC,IAAKzB,uBAAuB,CAACL,KAAK,EAAE8B,CAAC,CAACC,MAAM,CAAC/D,KAAK,CAAE;IAChEmE,WAAW,EAAE,kBAAkBnC,KAAK,GAAG,CAAC,EAAG;IAAAqB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC5C,CACF,CAAC,EACD9F,iBAAiB,iBAChBhE,KAAA,CAAAwJ,aAAA,CAACnH,YAAY;IAACmI,OAAO,EAAE3B,UAAW;IAAAY,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,qCAErB,CAEG,CACtB,EAGAnH,UAAU,KAAK,CAAC,iBACf3C,KAAA,CAAAwJ,aAAA,CAAClH,gBAAgB;IAAAmH,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACf9J,KAAA,CAAAwJ,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,kCAAoC,CAAC,eACzC9J,KAAA,CAAAwJ,aAAA,CAACrH,iBAAiB;IAChBiE,KAAK,EAAElC,aAAa,CAACE,YAAa;IAClC6F,QAAQ,EAAGC,CAAC,IAAKvB,mBAAmB,CAAC,cAAc,EAAEuB,CAAC,CAACC,MAAM,CAAC/D,KAAK,CAAE;IACrEmE,WAAW,EAAC,2BAA2B;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACxC,CAAC,eACF9J,KAAA,CAAAwJ,aAAA,CAACrH,iBAAiB;IAChBiE,KAAK,EAAElC,aAAa,CAACG,aAAc;IACnC4F,QAAQ,EAAGC,CAAC,IAAKvB,mBAAmB,CAAC,eAAe,EAAEuB,CAAC,CAACC,MAAM,CAAC/D,KAAK,CAAE;IACtEmE,WAAW,EAAC,8BAA8B;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC3C,CAAC,eACF9J,KAAA,CAAAwJ,aAAA,CAACrH,iBAAiB;IAChBiE,KAAK,EAAElC,aAAa,CAACI,qBAAsB;IAC3C2F,QAAQ,EAAGC,CAAC,IAAKvB,mBAAmB,CAAC,uBAAuB,EAAEuB,CAAC,CAACC,MAAM,CAAC/D,KAAK,CAAE;IAC9EmE,WAAW,EAAC,qCAAqC;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAClD,CAAC,EACD9F,iBAAiB,iBAChBhE,KAAA,CAAAwJ,aAAA,CAACnH,YAAY;IAACmI,OAAO,EAAE1B,UAAW;IAAAW,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,+CAErB,CAEA,CACnB,EAGAnH,UAAU,KAAK,CAAC,iBACf3C,KAAA,CAAAwJ,aAAA,CAACjH,kBAAkB;IAAAkH,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACjB9J,KAAA,CAAAwJ,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,oCAAsC,CAAC,eAC3C9J,KAAA,CAAAwJ,aAAA,CAACrH,iBAAiB;IAChBiE,KAAK,EAAE7B,eAAgB;IACvB0F,QAAQ,EAAGC,CAAC,IAAK1F,kBAAkB,CAAC0F,CAAC,CAACC,MAAM,CAAC/D,KAAK,CAAE;IACpDmE,WAAW,EAAC,mDAAmD;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAChE,CAAC,eACF9J,KAAA,CAAAwJ,aAAA,CAAC9H,UAAU;IAAC8I,OAAO,EAAEjB,2BAA4B;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,2BAAqC,CAAC,EACvFrF,eAAe,iBACdzE,KAAA,CAAAwJ,aAAA,CAAAxJ,KAAA,CAAAgK,QAAA,qBACEhK,KAAA,CAAAwJ,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,6BAA+B,CAAC,eACpC9J,KAAA,CAAAwJ,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAIrF,eAAmB,CACvB,CACH,eACDzE,KAAA,CAAAwJ,aAAA,CAACrH,iBAAiB;IAChBiE,KAAK,EAAEzB,aAAc;IACrBsF,QAAQ,EAAGC,CAAC,IAAKtF,gBAAgB,CAACsF,CAAC,CAACC,MAAM,CAAC/D,KAAK,CAAE;IAClDmE,WAAW,EAAC,qEAAqE;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAClF,CAAC,EACD9F,iBAAiB,iBAChBhE,KAAA,CAAAwJ,aAAA,CAACnH,YAAY;IAACmI,OAAO,EAAEzB,UAAW;IAAAU,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,4CAErB,CAEE,CACrB,EAGAnH,UAAU,KAAK,CAAC,IAAIA,UAAU,KAAK,CAAC,iBACnC3C,KAAA,CAAAwJ,aAAA,CAAAxJ,KAAA,CAAAgK,QAAA,qBACEhK,KAAA,CAAAwJ,aAAA,CAAChH,iBAAiB;IAACgI,OAAO,EAAEA,CAAA,KAAM1F,oBAAoB,CAAC,CAACD,iBAAiB,CAAE;IAAA4E,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACxEjF,iBAAiB,GAAG,qBAAqB,GAAG,gBAC5B,CAAC,EACnBA,iBAAiB,iBAChB7E,KAAA,CAAAwJ,aAAA,CAAC/I,iBAAiB;IAChB2F,KAAK,EAAEpE,KAAM;IACbiI,QAAQ,EAAGC,CAAC,IAAKrH,QAAQ,CAACqH,CAAC,CAACC,MAAM,CAAC/D,KAAK,CAAE;IAC1CgE,QAAQ,EAAEhD,YAAa;IACvBiD,UAAU,EAAGH,CAAC,IAAKA,CAAC,CAACtB,GAAG,KAAK,OAAO,IAAI,CAACsB,CAAC,CAACI,QAAQ,IAAIlD,YAAY,CAAC,CAAE;IACtEmD,WAAW,EAAC,qBAAqB;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAClC,CAEH,CACH,eAED9J,KAAA,CAAAwJ,aAAA,CAAClI,eAAe;IAAAmI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACd9J,KAAA,CAAAwJ,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,oCAAsC,CAAC,eAC3C9J,KAAA,CAAAwJ,aAAA,CAAC9H,UAAU;IAAC8I,OAAO,EAAEvB,mBAAoB;IAAAQ,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,UAAoB,CAAC,EAC9D1G,eAAe,CAAC+E,GAAG,CAAC,CAACgB,KAAK,EAAEf,KAAK,kBAChCpI,KAAA,CAAAwJ,aAAA,CAACjI,QAAQ;IAACqH,GAAG,EAAER,KAAM;IAAC3G,MAAM,EAAE0H,KAAK,CAAC1H,MAAO;IAAAgI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACzC9J,KAAA,CAAAwJ,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAASX,KAAK,CAAC1H,MAAM,GAAG,MAAM,GAAG,OAAgB,CAAC,MAAE,EAAC0H,KAAK,CAACpC,IACnD,CACX,CACc,CACN,CAAC,EACbhC,aAAa,iBACZ/E,KAAA,CAAAwJ,aAAA,CAAChJ,aAAa;IACZwC,UAAU,EAAEA,UAAW;IACvBL,UAAU,EAAEA,UAAW;IAAA8G,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAEvB9J,KAAA,CAAAwJ,aAAA,CAAC/G,mBAAmB;IAAC+H,OAAO,EAAEA,CAAA,KAAMxF,gBAAgB,CAAC,CAACD,aAAa,CAAE;IAAA0E,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,QAEjD,CACR,CAEF,CAAC;AAEtB,CAAC;AAED,eAAepH,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module"}