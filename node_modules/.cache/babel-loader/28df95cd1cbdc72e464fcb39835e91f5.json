{"ast":null,"code":"var _jsxFileName = \"/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\nimport { createSprintDay, states } from './sprintStateMachine';\n\n// Styled components remain the same\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #1e1e1e;\n  border-radius: 8px;\n  padding: 1.5rem;\n  font-family: 'Roboto', sans-serif;\n  height: 60vh;\n  overflow-y: auto;\n`;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#2a2a2a'};\n  color: #ffffff;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 80%;\n`;\nconst RelayIcon = styled.span`\n  color: #3c8ce7;\n  margin-right: 0.5rem;\n`;\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n  align-items: flex-end;\n`;\nconst Input = styled.textarea`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #2a2a2a;\n  color: #ffffff;\n  resize: none;\n  min-height: 40px;\n  overflow-y: hidden;\n`;\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n  height: 40px;\n`;\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 1rem;\n`;\nconst MoreInfoButton = styled.button`\n  background-color: transparent;\n  color: #3c8ce7;\n  border: 1px solid #3c8ce7;\n  padding: 5px 10px;\n  font-size: 0.8rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-top: 0.5rem;\n`;\nconst parseMarkdown = markdown => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = source => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\nconst AIChat = ({\n  day,\n  tasks,\n  onUpdateDeliverable,\n  onNextDay\n}) => {\n  const sprintDay = createSprintDay(day);\n  const [currentState, setCurrentState] = useState(sprintDay.initialState);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef(null);\n  const getAIResponse = useCallback(async (prompt, currentDay) => {\n    console.log('Getting AI response for:', prompt);\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay, messages, currentState));\n      console.log('AI response received:', aiResponse);\n      const aiMessage = {\n        text: aiResponse,\n        isUser: false\n      };\n      setMessages(prev => {\n        console.log('Updating messages:', [...prev, aiMessage]);\n        return [...prev, aiMessage];\n      });\n      const nextState = sprintDay.transitions[currentState];\n      if (nextState) {\n        console.log('Transitioning to next state:', nextState);\n        setCurrentState(nextState);\n        if (nextState === states.COMPLETED) {\n          const deliverable = await getGPTResponse(getDeliverablePrompt(prompt, currentDay, messages));\n          onUpdateDeliverable(currentDay, deliverable);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        text: \"I apologize, but I'm having trouble processing that request. Let's try a different approach. \" + getSprintTip(day),\n        isUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [day, messages, currentState, sprintDay, onUpdateDeliverable]);\n  useEffect(() => {\n    const initialPrompt = `Hi, I'm Relay, your AI assistant for this mini design sprint. Welcome to Day ${day}! ${sprintDay.prompts[sprintDay.initialState]}`;\n    setMessages([{\n      text: initialPrompt,\n      isUser: false\n    }]);\n  }, [day, sprintDay]);\n  const handleSend = async () => {\n    if (input.trim() && !isLoading) {\n      console.log('Sending message:', input);\n      const userMessage = {\n        text: input,\n        isUser: true\n      };\n      setMessages(prev => [...prev, userMessage]);\n      const currentInput = input;\n      setInput('');\n      await getAIResponse(currentInput, day);\n    }\n  };\n  const handleInputChange = e => {\n    setInput(e.target.value);\n    e.target.style.height = 'auto';\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n  const handleNextDay = () => {\n    onNextDay();\n  };\n  const handleMoreInfo = () => {\n    getAIResponse(\"Can you elaborate on that?\", day);\n  };\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.style.height = 'auto';\n      inputRef.current.style.height = `${inputRef.current.scrollHeight}px`;\n    }\n  }, [input]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChatContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(Message, {\n    key: index,\n    isUser: message.isUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, !message.isUser && /*#__PURE__*/React.createElement(RelayIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 33\n    }\n  }, \":-) Relay\"), parseMarkdown(message.text)))), /*#__PURE__*/React.createElement(InputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: inputRef,\n    value: input,\n    onChange: handleInputChange,\n    onKeyPress: handleKeyPress,\n    placeholder: \"Type your message...\",\n    disabled: isLoading || currentState === states.COMPLETED,\n    rows: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SendButton, {\n    onClick: handleSend,\n    disabled: isLoading || currentState === states.COMPLETED,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, isLoading ? 'Thinking...' : 'Send')), currentState === states.COMPLETED && /*#__PURE__*/React.createElement(NextDayButton, {\n    onClick: handleNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, \"Move to Day \", day + 1), !isLoading && currentState !== states.COMPLETED && /*#__PURE__*/React.createElement(MoreInfoButton, {\n    onClick: handleMoreInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, \"More Info\"));\n};\nconst getAIPrompt = (userInput, day, context, currentState) => {\n  const {\n    goal,\n    tasks\n  } = sprintGuidance[day];\n  const userMessages = context.filter(msg => msg.isUser).map(msg => msg.text);\n  const lastUserMessage = userMessages[userMessages.length - 1] || '';\n  return `You are Relay, an AI assistant for a mini design sprint. It's Day ${day}, and the current state is ${currentState}. Be extremely concise and direct.\n  Goal: ${goal}\n  Tasks: ${tasks.join(', ')}\n  User's last message: \"${lastUserMessage}\"\n\n  Respond in 1-2 short sentences max. Focus on the most important next step or question for the current state.\n  If the current state is COMPLETED, summarize the key points and include [SHOW_NEXT_DAY_BUTTON].\n  Avoid pleasantries or repeating information.`;\n};\nconst getDeliverablePrompt = (userInput, day, context) => {\n  const {\n    goal\n  } = sprintGuidance[day];\n  const allUserInputs = context.filter(msg => msg.isUser).map(msg => msg.text).join(' ');\n  return `Summarize key points for Day ${day} based on: \"${allUserInputs}\"\n  Goal: ${goal}\n  Provide 2-3 bullet points max. Be extremely concise and specific.`;\n};\nexport default AIChat;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","styled","SimpleMarkdown","getGPTResponse","sprintGuidance","getSprintTip","createSprintDay","states","ChatContainer","div","Message","props","isUser","RelayIcon","span","InputContainer","Input","textarea","SendButton","button","NextDayButton","MoreInfoButton","parseMarkdown","markdown","rawBuiltParser","parserFor","defaultRules","parser","source","blockSource","reactOutput","reactFor","ruleOutput","AIChat","day","tasks","onUpdateDeliverable","onNextDay","sprintDay","currentState","setCurrentState","initialState","messages","setMessages","input","setInput","isLoading","setIsLoading","inputRef","getAIResponse","prompt","currentDay","console","log","aiResponse","getAIPrompt","aiMessage","text","prev","nextState","transitions","COMPLETED","deliverable","getDeliverablePrompt","error","initialPrompt","prompts","handleSend","trim","userMessage","currentInput","handleInputChange","e","target","value","style","height","scrollHeight","handleKeyPress","key","shiftKey","preventDefault","handleNextDay","handleMoreInfo","current","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","ref","onChange","onKeyPress","placeholder","disabled","rows","onClick","userInput","context","goal","userMessages","filter","msg","lastUserMessage","length","join","allUserInputs"],"sources":["/Users/nickbaumann/Develop/mini-design-sprint/src/components/AIChat.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport SimpleMarkdown from 'simple-markdown';\nimport { getGPTResponse } from '../utils/gptService';\nimport { sprintGuidance, getSprintTip } from '../utils/sprintResources';\nimport { createSprintDay, states } from './sprintStateMachine';\n\n// Styled components remain the same\nconst ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #1e1e1e;\n  border-radius: 8px;\n  padding: 1.5rem;\n  font-family: 'Roboto', sans-serif;\n  height: 60vh;\n  overflow-y: auto;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? '#3c8ce7' : '#2a2a2a'};\n  color: #ffffff;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  max-width: 80%;\n`;\n\nconst RelayIcon = styled.span`\n  color: #3c8ce7;\n  margin-right: 0.5rem;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  margin-top: 1rem;\n  align-items: flex-end;\n`;\n\nconst Input = styled.textarea`\n  flex: 1;\n  padding: 0.8rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: 4px;\n  background-color: #2a2a2a;\n  color: #ffffff;\n  resize: none;\n  min-height: 40px;\n  overflow-y: hidden;\n`;\n\nconst SendButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-left: 0.5rem;\n  height: 40px;\n`;\n\nconst NextDayButton = styled.button`\n  background-color: #3c8ce7;\n  color: #ffffff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n  margin-top: 1rem;\n`;\n\nconst MoreInfoButton = styled.button`\n  background-color: transparent;\n  color: #3c8ce7;\n  border: 1px solid #3c8ce7;\n  padding: 5px 10px;\n  font-size: 0.8rem;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-top: 0.5rem;\n`;\n\nconst parseMarkdown = (markdown) => {\n  const rawBuiltParser = SimpleMarkdown.parserFor(SimpleMarkdown.defaultRules);\n  const parser = (source) => {\n    const blockSource = source + \"\\n\\n\";\n    return rawBuiltParser(blockSource);\n  };\n  const reactOutput = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(SimpleMarkdown.defaultRules, 'react'));\n  return reactOutput(parser(markdown));\n};\n\nconst AIChat = ({ day, tasks, onUpdateDeliverable, onNextDay }) => {\n  const sprintDay = createSprintDay(day);\n  const [currentState, setCurrentState] = useState(sprintDay.initialState);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef(null);\n\n  const getAIResponse = useCallback(async (prompt, currentDay) => {\n    console.log('Getting AI response for:', prompt);\n    setIsLoading(true);\n    try {\n      const aiResponse = await getGPTResponse(getAIPrompt(prompt, currentDay, messages, currentState));\n      console.log('AI response received:', aiResponse);\n      const aiMessage = { text: aiResponse, isUser: false };\n      setMessages(prev => {\n        console.log('Updating messages:', [...prev, aiMessage]);\n        return [...prev, aiMessage];\n      });\n\n      const nextState = sprintDay.transitions[currentState];\n      if (nextState) {\n        console.log('Transitioning to next state:', nextState);\n        setCurrentState(nextState);\n        if (nextState === states.COMPLETED) {\n          const deliverable = await getGPTResponse(getDeliverablePrompt(prompt, currentDay, messages));\n          onUpdateDeliverable(currentDay, deliverable);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, { \n        text: \"I apologize, but I'm having trouble processing that request. Let's try a different approach. \" + getSprintTip(day), \n        isUser: false \n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [day, messages, currentState, sprintDay, onUpdateDeliverable]);\n\n  useEffect(() => {\n    const initialPrompt = `Hi, I'm Relay, your AI assistant for this mini design sprint. Welcome to Day ${day}! ${sprintDay.prompts[sprintDay.initialState]}`;\n    setMessages([{ text: initialPrompt, isUser: false }]);\n  }, [day, sprintDay]);\n\n  const handleSend = async () => {\n    if (input.trim() && !isLoading) {\n      console.log('Sending message:', input);\n      const userMessage = { text: input, isUser: true };\n      setMessages(prev => [...prev, userMessage]);\n      const currentInput = input;\n      setInput('');\n      await getAIResponse(currentInput, day);\n    }\n  };\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n    e.target.style.height = 'auto';\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  const handleNextDay = () => {\n    onNextDay();\n  };\n\n  const handleMoreInfo = () => {\n    getAIResponse(\"Can you elaborate on that?\", day);\n  };\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.style.height = 'auto';\n      inputRef.current.style.height = `${inputRef.current.scrollHeight}px`;\n    }\n  }, [input]);\n\n  return (\n    <>\n      <ChatContainer>\n        {messages.map((message, index) => (\n          <Message key={index} isUser={message.isUser}>\n            {!message.isUser && <RelayIcon>:-) Relay</RelayIcon>}\n            {parseMarkdown(message.text)}\n          </Message>\n        ))}\n      </ChatContainer>\n      <InputContainer>\n        <Input\n          ref={inputRef}\n          value={input}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Type your message...\"\n          disabled={isLoading || currentState === states.COMPLETED}\n          rows={1}\n        />\n        <SendButton onClick={handleSend} disabled={isLoading || currentState === states.COMPLETED}>\n          {isLoading ? 'Thinking...' : 'Send'}\n        </SendButton>\n      </InputContainer>\n      {currentState === states.COMPLETED && (\n        <NextDayButton onClick={handleNextDay}>\n          Move to Day {day + 1}\n        </NextDayButton>\n      )}\n      {!isLoading && currentState !== states.COMPLETED && (\n        <MoreInfoButton onClick={handleMoreInfo}>\n          More Info\n        </MoreInfoButton>\n      )}\n    </>\n  );\n};\n\nconst getAIPrompt = (userInput, day, context, currentState) => {\n  const { goal, tasks } = sprintGuidance[day];\n  const userMessages = context.filter(msg => msg.isUser).map(msg => msg.text);\n  const lastUserMessage = userMessages[userMessages.length - 1] || '';\n  \n  return `You are Relay, an AI assistant for a mini design sprint. It's Day ${day}, and the current state is ${currentState}. Be extremely concise and direct.\n  Goal: ${goal}\n  Tasks: ${tasks.join(', ')}\n  User's last message: \"${lastUserMessage}\"\n\n  Respond in 1-2 short sentences max. Focus on the most important next step or question for the current state.\n  If the current state is COMPLETED, summarize the key points and include [SHOW_NEXT_DAY_BUTTON].\n  Avoid pleasantries or repeating information.`;\n};\n\nconst getDeliverablePrompt = (userInput, day, context) => {\n  const { goal } = sprintGuidance[day];\n  const allUserInputs = context.filter(msg => msg.isUser).map(msg => msg.text).join(' ');\n  return `Summarize key points for Day ${day} based on: \"${allUserInputs}\"\n  Goal: ${goal}\n  Provide 2-3 bullet points max. Be extremely concise and specific.`;\n};\n\nexport default AIChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}